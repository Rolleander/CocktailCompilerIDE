/**
 * generated by Xtext 2.9.1
 */
package de.roma.cocktail.xtext.rpp.impl;

import de.roma.cocktail.xtext.rpp.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class RppFactoryImpl extends EFactoryImpl implements RppFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static RppFactory init()
  {
    try
    {
      RppFactory theRppFactory = (RppFactory)EPackage.Registry.INSTANCE.getEFactory(RppPackage.eNS_URI);
      if (theRppFactory != null)
      {
        return theRppFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new RppFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RppFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case RppPackage.MODEL: return createModel();
      case RppPackage.CODE_BLOCK: return createCodeBlock();
      case RppPackage.SCANNER: return createScanner();
      case RppPackage.EXPORT: return createExport();
      case RppPackage.IMPORT: return createImport();
      case RppPackage.GLOBAL: return createGlobal();
      case RppPackage.LOCAL: return createLocal();
      case RppPackage.DEFAULT: return createDefault();
      case RppPackage.EOF: return createEof();
      case RppPackage.BEGIN: return createBegin();
      case RppPackage.CLOSE: return createClose();
      case RppPackage.DEFINE: return createDefine();
      case RppPackage.DEFINE_RULE: return createDefineRule();
      case RppPackage.START_STATES: return createStartStates();
      case RppPackage.START_STATE: return createStartState();
      case RppPackage.RULE: return createRule();
      case RppPackage.RULE_INSERT: return createRuleInsert();
      case RppPackage.SINGLE_RULE: return createSingleRule();
      case RppPackage.RULE_DEFINITION: return createRuleDefinition();
      case RppPackage.RULE_PART: return createRulePart();
      case RppPackage.RULE_START: return createRuleStart();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CodeBlock createCodeBlock()
  {
    CodeBlockImpl codeBlock = new CodeBlockImpl();
    return codeBlock;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Scanner createScanner()
  {
    ScannerImpl scanner = new ScannerImpl();
    return scanner;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Export createExport()
  {
    ExportImpl export = new ExportImpl();
    return export;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Import createImport()
  {
    ImportImpl import_ = new ImportImpl();
    return import_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Global createGlobal()
  {
    GlobalImpl global = new GlobalImpl();
    return global;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Local createLocal()
  {
    LocalImpl local = new LocalImpl();
    return local;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Default createDefault()
  {
    DefaultImpl default_ = new DefaultImpl();
    return default_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Eof createEof()
  {
    EofImpl eof = new EofImpl();
    return eof;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Begin createBegin()
  {
    BeginImpl begin = new BeginImpl();
    return begin;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Close createClose()
  {
    CloseImpl close = new CloseImpl();
    return close;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Define createDefine()
  {
    DefineImpl define = new DefineImpl();
    return define;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DefineRule createDefineRule()
  {
    DefineRuleImpl defineRule = new DefineRuleImpl();
    return defineRule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StartStates createStartStates()
  {
    StartStatesImpl startStates = new StartStatesImpl();
    return startStates;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StartState createStartState()
  {
    StartStateImpl startState = new StartStateImpl();
    return startState;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Rule createRule()
  {
    RuleImpl rule = new RuleImpl();
    return rule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RuleInsert createRuleInsert()
  {
    RuleInsertImpl ruleInsert = new RuleInsertImpl();
    return ruleInsert;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SingleRule createSingleRule()
  {
    SingleRuleImpl singleRule = new SingleRuleImpl();
    return singleRule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RuleDefinition createRuleDefinition()
  {
    RuleDefinitionImpl ruleDefinition = new RuleDefinitionImpl();
    return ruleDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RulePart createRulePart()
  {
    RulePartImpl rulePart = new RulePartImpl();
    return rulePart;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RuleStart createRuleStart()
  {
    RuleStartImpl ruleStart = new RuleStartImpl();
    return ruleStart;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RppPackage getRppPackage()
  {
    return (RppPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static RppPackage getPackage()
  {
    return RppPackage.eINSTANCE;
  }

} //RppFactoryImpl
