/**
 * generated by Xtext 2.9.1
 */
package de.roma.cocktail.xtext.rpp.impl;

import de.roma.cocktail.xtext.rpp.RppPackage;
import de.roma.cocktail.xtext.rpp.StartState;
import de.roma.cocktail.xtext.rpp.StartStates;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Start States</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link de.roma.cocktail.xtext.rpp.impl.StartStatesImpl#getIncstates <em>Incstates</em>}</li>
 *   <li>{@link de.roma.cocktail.xtext.rpp.impl.StartStatesImpl#getExstates <em>Exstates</em>}</li>
 * </ul>
 *
 * @generated
 */
public class StartStatesImpl extends MinimalEObjectImpl.Container implements StartStates
{
  /**
   * The cached value of the '{@link #getIncstates() <em>Incstates</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIncstates()
   * @generated
   * @ordered
   */
  protected EList<StartState> incstates;

  /**
   * The cached value of the '{@link #getExstates() <em>Exstates</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExstates()
   * @generated
   * @ordered
   */
  protected EList<StartState> exstates;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected StartStatesImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return RppPackage.Literals.START_STATES;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<StartState> getIncstates()
  {
    if (incstates == null)
    {
      incstates = new EObjectContainmentEList<StartState>(StartState.class, this, RppPackage.START_STATES__INCSTATES);
    }
    return incstates;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<StartState> getExstates()
  {
    if (exstates == null)
    {
      exstates = new EObjectContainmentEList<StartState>(StartState.class, this, RppPackage.START_STATES__EXSTATES);
    }
    return exstates;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case RppPackage.START_STATES__INCSTATES:
        return ((InternalEList<?>)getIncstates()).basicRemove(otherEnd, msgs);
      case RppPackage.START_STATES__EXSTATES:
        return ((InternalEList<?>)getExstates()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case RppPackage.START_STATES__INCSTATES:
        return getIncstates();
      case RppPackage.START_STATES__EXSTATES:
        return getExstates();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case RppPackage.START_STATES__INCSTATES:
        getIncstates().clear();
        getIncstates().addAll((Collection<? extends StartState>)newValue);
        return;
      case RppPackage.START_STATES__EXSTATES:
        getExstates().clear();
        getExstates().addAll((Collection<? extends StartState>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case RppPackage.START_STATES__INCSTATES:
        getIncstates().clear();
        return;
      case RppPackage.START_STATES__EXSTATES:
        getExstates().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case RppPackage.START_STATES__INCSTATES:
        return incstates != null && !incstates.isEmpty();
      case RppPackage.START_STATES__EXSTATES:
        return exstates != null && !exstates.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //StartStatesImpl
