/*
 * generated by Xtext 2.9.1
 */
grammar InternalLpp;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package de.roma.cocktail.xtext.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package de.roma.cocktail.xtext.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import de.roma.cocktail.xtext.services.LppGrammarAccess;

}
@parser::members {
	private LppGrammarAccess grammarAccess;

	public void setGrammarAccess(LppGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleParserModel
entryRuleParserModel
:
{ before(grammarAccess.getParserModelRule()); }
	 ruleParserModel
{ after(grammarAccess.getParserModelRule()); } 
	 EOF 
;

// Rule ParserModel
ruleParserModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParserModelAccess().getGroup()); }
		(rule__ParserModel__Group__0)
		{ after(grammarAccess.getParserModelAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleScannerName
entryRuleScannerName
:
{ before(grammarAccess.getScannerNameRule()); }
	 ruleScannerName
{ after(grammarAccess.getScannerNameRule()); } 
	 EOF 
;

// Rule ScannerName
ruleScannerName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getScannerNameAccess().getGroup()); }
		(rule__ScannerName__Group__0)
		{ after(grammarAccess.getScannerNameAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleParserName
entryRuleParserName
:
{ before(grammarAccess.getParserNameRule()); }
	 ruleParserName
{ after(grammarAccess.getParserNameRule()); } 
	 EOF 
;

// Rule ParserName
ruleParserName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParserNameAccess().getGroup()); }
		(rule__ParserName__Group__0)
		{ after(grammarAccess.getParserNameAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleImport
entryRuleImport
:
{ before(grammarAccess.getImportRule()); }
	 ruleImport
{ after(grammarAccess.getImportRule()); } 
	 EOF 
;

// Rule Import
ruleImport 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getImportAccess().getGroup()); }
		(rule__Import__Group__0)
		{ after(grammarAccess.getImportAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExport
entryRuleExport
:
{ before(grammarAccess.getExportRule()); }
	 ruleExport
{ after(grammarAccess.getExportRule()); } 
	 EOF 
;

// Rule Export
ruleExport 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExportAccess().getGroup()); }
		(rule__Export__Group__0)
		{ after(grammarAccess.getExportAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGlobal
entryRuleGlobal
:
{ before(grammarAccess.getGlobalRule()); }
	 ruleGlobal
{ after(grammarAccess.getGlobalRule()); } 
	 EOF 
;

// Rule Global
ruleGlobal 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGlobalAccess().getGroup()); }
		(rule__Global__Group__0)
		{ after(grammarAccess.getGlobalAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLocal
entryRuleLocal
:
{ before(grammarAccess.getLocalRule()); }
	 ruleLocal
{ after(grammarAccess.getLocalRule()); } 
	 EOF 
;

// Rule Local
ruleLocal 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLocalAccess().getGroup()); }
		(rule__Local__Group__0)
		{ after(grammarAccess.getLocalAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBegin
entryRuleBegin
:
{ before(grammarAccess.getBeginRule()); }
	 ruleBegin
{ after(grammarAccess.getBeginRule()); } 
	 EOF 
;

// Rule Begin
ruleBegin 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBeginAccess().getGroup()); }
		(rule__Begin__Group__0)
		{ after(grammarAccess.getBeginAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleClose
entryRuleClose
:
{ before(grammarAccess.getCloseRule()); }
	 ruleClose
{ after(grammarAccess.getCloseRule()); } 
	 EOF 
;

// Rule Close
ruleClose 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCloseAccess().getGroup()); }
		(rule__Close__Group__0)
		{ after(grammarAccess.getCloseAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTokens
entryRuleTokens
:
{ before(grammarAccess.getTokensRule()); }
	 ruleTokens
{ after(grammarAccess.getTokensRule()); } 
	 EOF 
;

// Rule Tokens
ruleTokens 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTokensAccess().getGroup()); }
		(rule__Tokens__Group__0)
		{ after(grammarAccess.getTokensAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDefinedToken
entryRuleDefinedToken
:
{ before(grammarAccess.getDefinedTokenRule()); }
	 ruleDefinedToken
{ after(grammarAccess.getDefinedTokenRule()); } 
	 EOF 
;

// Rule DefinedToken
ruleDefinedToken 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDefinedTokenAccess().getAlternatives()); }
		(rule__DefinedToken__Alternatives)
		{ after(grammarAccess.getDefinedTokenAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTokenExtra
entryRuleTokenExtra
:
{ before(grammarAccess.getTokenExtraRule()); }
	 ruleTokenExtra
{ after(grammarAccess.getTokenExtraRule()); } 
	 EOF 
;

// Rule TokenExtra
ruleTokenExtra 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTokenExtraAccess().getGroup()); }
		(rule__TokenExtra__Group__0)
		{ after(grammarAccess.getTokenExtraAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCodeBlock
entryRuleCodeBlock
:
{ before(grammarAccess.getCodeBlockRule()); }
	 ruleCodeBlock
{ after(grammarAccess.getCodeBlockRule()); } 
	 EOF 
;

// Rule CodeBlock
ruleCodeBlock 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCodeBlockAccess().getAlternatives()); }
		(rule__CodeBlock__Alternatives)*
		{ after(grammarAccess.getCodeBlockAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCodeWall
entryRuleCodeWall
:
{ before(grammarAccess.getCodeWallRule()); }
	 ruleCodeWall
{ after(grammarAccess.getCodeWallRule()); } 
	 EOF 
;

// Rule CodeWall
ruleCodeWall 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCodeWallAccess().getAlternatives()); }
		(rule__CodeWall__Alternatives)
		{ after(grammarAccess.getCodeWallAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrecedence
entryRulePrecedence
:
{ before(grammarAccess.getPrecedenceRule()); }
	 rulePrecedence
{ after(grammarAccess.getPrecedenceRule()); } 
	 EOF 
;

// Rule Precedence
rulePrecedence 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrecedenceAccess().getGroup()); }
		(rule__Precedence__Group__0)
		{ after(grammarAccess.getPrecedenceAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrecedenceRow
entryRulePrecedenceRow
:
{ before(grammarAccess.getPrecedenceRowRule()); }
	 rulePrecedenceRow
{ after(grammarAccess.getPrecedenceRowRule()); } 
	 EOF 
;

// Rule PrecedenceRow
rulePrecedenceRow 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrecedenceRowAccess().getGroup()); }
		(rule__PrecedenceRow__Group__0)
		{ after(grammarAccess.getPrecedenceRowAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStartSymbols
entryRuleStartSymbols
:
{ before(grammarAccess.getStartSymbolsRule()); }
	 ruleStartSymbols
{ after(grammarAccess.getStartSymbolsRule()); } 
	 EOF 
;

// Rule StartSymbols
ruleStartSymbols 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStartSymbolsAccess().getGroup()); }
		(rule__StartSymbols__Group__0)
		{ after(grammarAccess.getStartSymbolsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStartState
entryRuleStartState
:
{ before(grammarAccess.getStartStateRule()); }
	 ruleStartState
{ after(grammarAccess.getStartStateRule()); } 
	 EOF 
;

// Rule StartState
ruleStartState 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStartStateAccess().getNameAssignment()); }
		(rule__StartState__NameAssignment)
		{ after(grammarAccess.getStartStateAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGrammarRules
entryRuleGrammarRules
:
{ before(grammarAccess.getGrammarRulesRule()); }
	 ruleGrammarRules
{ after(grammarAccess.getGrammarRulesRule()); } 
	 EOF 
;

// Rule GrammarRules
ruleGrammarRules 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGrammarRulesAccess().getGroup()); }
		(rule__GrammarRules__Group__0)
		{ after(grammarAccess.getGrammarRulesAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGrammarRule
entryRuleGrammarRule
:
{ before(grammarAccess.getGrammarRuleRule()); }
	 ruleGrammarRule
{ after(grammarAccess.getGrammarRuleRule()); } 
	 EOF 
;

// Rule GrammarRule
ruleGrammarRule 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGrammarRuleAccess().getGroup()); }
		(rule__GrammarRule__Group__0)
		{ after(grammarAccess.getGrammarRuleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSimpleRule
entryRuleSimpleRule
:
{ before(grammarAccess.getSimpleRuleRule()); }
	 ruleSimpleRule
{ after(grammarAccess.getSimpleRuleRule()); } 
	 EOF 
;

// Rule SimpleRule
ruleSimpleRule 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSimpleRuleAccess().getGroup()); }
		(rule__SimpleRule__Group__0)
		{ after(grammarAccess.getSimpleRuleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRuleBody
entryRuleRuleBody
:
{ before(grammarAccess.getRuleBodyRule()); }
	 ruleRuleBody
{ after(grammarAccess.getRuleBodyRule()); } 
	 EOF 
;

// Rule RuleBody
ruleRuleBody 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRuleBodyAccess().getGroup()); }
		(rule__RuleBody__Group__0)
		{ after(grammarAccess.getRuleBodyAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRuleCode
entryRuleRuleCode
:
{ before(grammarAccess.getRuleCodeRule()); }
	 ruleRuleCode
{ after(grammarAccess.getRuleCodeRule()); } 
	 EOF 
;

// Rule RuleCode
ruleRuleCode 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRuleCodeAccess().getUnorderedGroup()); }
		(rule__RuleCode__UnorderedGroup)
		{ after(grammarAccess.getRuleCodeAccess().getUnorderedGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRuleContent
entryRuleRuleContent
:
{ before(grammarAccess.getRuleContentRule()); }
	 ruleRuleContent
{ after(grammarAccess.getRuleContentRule()); } 
	 EOF 
;

// Rule RuleContent
ruleRuleContent 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRuleContentAccess().getAlternatives()); }
		(rule__RuleContent__Alternatives)
		{ after(grammarAccess.getRuleContentAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRulePart
entryRuleRulePart
:
{ before(grammarAccess.getRulePartRule()); }
	 ruleRulePart
{ after(grammarAccess.getRulePartRule()); } 
	 EOF 
;

// Rule RulePart
ruleRulePart 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRulePartAccess().getContentAssignment()); }
		(rule__RulePart__ContentAssignment)*
		{ after(grammarAccess.getRulePartAccess().getContentAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule PrecedenceType
rulePrecedenceType
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrecedenceTypeAccess().getAlternatives()); }
		(rule__PrecedenceType__Alternatives)
		{ after(grammarAccess.getPrecedenceTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DefinedToken__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDefinedTokenAccess().getGroup_0()); }
		(rule__DefinedToken__Group_0__0)
		{ after(grammarAccess.getDefinedTokenAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getDefinedTokenAccess().getExtraAssignment_1()); }
		(rule__DefinedToken__ExtraAssignment_1)
		{ after(grammarAccess.getDefinedTokenAccess().getExtraAssignment_1()); }
	)
	|
	(
		{ before(grammarAccess.getDefinedTokenAccess().getWSTerminalRuleCall_2()); }
		RULE_WS
		{ after(grammarAccess.getDefinedTokenAccess().getWSTerminalRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DefinedToken__NameAlternatives_0_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDefinedTokenAccess().getNameIDTerminalRuleCall_0_0_0_0()); }
		RULE_ID
		{ after(grammarAccess.getDefinedTokenAccess().getNameIDTerminalRuleCall_0_0_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getDefinedTokenAccess().getNameSTRINGTerminalRuleCall_0_0_0_1()); }
		RULE_STRING
		{ after(grammarAccess.getDefinedTokenAccess().getNameSTRINGTerminalRuleCall_0_0_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CodeBlock__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCodeBlockAccess().getCodeWallParserRuleCall_0()); }
		ruleCodeWall
		{ after(grammarAccess.getCodeBlockAccess().getCodeWallParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getCodeBlockAccess().getGroup_1()); }
		(rule__CodeBlock__Group_1__0)
		{ after(grammarAccess.getCodeBlockAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CodeWall__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCodeWallAccess().getIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getCodeWallAccess().getIDTerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getCodeWallAccess().getINTTerminalRuleCall_1()); }
		RULE_INT
		{ after(grammarAccess.getCodeWallAccess().getINTTerminalRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getCodeWallAccess().getSTRINGTerminalRuleCall_2()); }
		RULE_STRING
		{ after(grammarAccess.getCodeWallAccess().getSTRINGTerminalRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getCodeWallAccess().getWSTerminalRuleCall_3()); }
		RULE_WS
		{ after(grammarAccess.getCodeWallAccess().getWSTerminalRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getCodeWallAccess().getPlusSignKeyword_4()); }
		'+'
		{ after(grammarAccess.getCodeWallAccess().getPlusSignKeyword_4()); }
	)
	|
	(
		{ before(grammarAccess.getCodeWallAccess().getHyphenMinusKeyword_5()); }
		'-'
		{ after(grammarAccess.getCodeWallAccess().getHyphenMinusKeyword_5()); }
	)
	|
	(
		{ before(grammarAccess.getCodeWallAccess().getLeftParenthesisKeyword_6()); }
		'('
		{ after(grammarAccess.getCodeWallAccess().getLeftParenthesisKeyword_6()); }
	)
	|
	(
		{ before(grammarAccess.getCodeWallAccess().getRightParenthesisKeyword_7()); }
		')'
		{ after(grammarAccess.getCodeWallAccess().getRightParenthesisKeyword_7()); }
	)
	|
	(
		{ before(grammarAccess.getCodeWallAccess().getAsteriskKeyword_8()); }
		'*'
		{ after(grammarAccess.getCodeWallAccess().getAsteriskKeyword_8()); }
	)
	|
	(
		{ before(grammarAccess.getCodeWallAccess().getFullStopKeyword_9()); }
		'.'
		{ after(grammarAccess.getCodeWallAccess().getFullStopKeyword_9()); }
	)
	|
	(
		{ before(grammarAccess.getCodeWallAccess().getSolidusKeyword_10()); }
		'/'
		{ after(grammarAccess.getCodeWallAccess().getSolidusKeyword_10()); }
	)
	|
	(
		{ before(grammarAccess.getCodeWallAccess().getReverseSolidusKeyword_11()); }
		'\\'
		{ after(grammarAccess.getCodeWallAccess().getReverseSolidusKeyword_11()); }
	)
	|
	(
		{ before(grammarAccess.getCodeWallAccess().getVerticalLineKeyword_12()); }
		'|'
		{ after(grammarAccess.getCodeWallAccess().getVerticalLineKeyword_12()); }
	)
	|
	(
		{ before(grammarAccess.getCodeWallAccess().getQuestionMarkKeyword_13()); }
		'?'
		{ after(grammarAccess.getCodeWallAccess().getQuestionMarkKeyword_13()); }
	)
	|
	(
		{ before(grammarAccess.getCodeWallAccess().getGreaterThanSignKeyword_14()); }
		'>'
		{ after(grammarAccess.getCodeWallAccess().getGreaterThanSignKeyword_14()); }
	)
	|
	(
		{ before(grammarAccess.getCodeWallAccess().getLessThanSignKeyword_15()); }
		'<'
		{ after(grammarAccess.getCodeWallAccess().getLessThanSignKeyword_15()); }
	)
	|
	(
		{ before(grammarAccess.getCodeWallAccess().getNumberSignKeyword_16()); }
		'#'
		{ after(grammarAccess.getCodeWallAccess().getNumberSignKeyword_16()); }
	)
	|
	(
		{ before(grammarAccess.getCodeWallAccess().getDollarSignKeyword_17()); }
		'$'
		{ after(grammarAccess.getCodeWallAccess().getDollarSignKeyword_17()); }
	)
	|
	(
		{ before(grammarAccess.getCodeWallAccess().getPercentSignKeyword_18()); }
		'%'
		{ after(grammarAccess.getCodeWallAccess().getPercentSignKeyword_18()); }
	)
	|
	(
		{ before(grammarAccess.getCodeWallAccess().getSemicolonKeyword_19()); }
		';'
		{ after(grammarAccess.getCodeWallAccess().getSemicolonKeyword_19()); }
	)
	|
	(
		{ before(grammarAccess.getCodeWallAccess().getColonKeyword_20()); }
		':'
		{ after(grammarAccess.getCodeWallAccess().getColonKeyword_20()); }
	)
	|
	(
		{ before(grammarAccess.getCodeWallAccess().getExclamationMarkKeyword_21()); }
		'!'
		{ after(grammarAccess.getCodeWallAccess().getExclamationMarkKeyword_21()); }
	)
	|
	(
		{ before(grammarAccess.getCodeWallAccess().getEqualsSignKeyword_22()); }
		'='
		{ after(grammarAccess.getCodeWallAccess().getEqualsSignKeyword_22()); }
	)
	|
	(
		{ before(grammarAccess.getCodeWallAccess().getCommaKeyword_23()); }
		','
		{ after(grammarAccess.getCodeWallAccess().getCommaKeyword_23()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GrammarRules__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGrammarRulesAccess().getRULEKeyword_0_0()); }
		'RULE'
		{ after(grammarAccess.getGrammarRulesAccess().getRULEKeyword_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getGrammarRulesAccess().getRULESKeyword_0_1()); }
		'RULES'
		{ after(grammarAccess.getGrammarRulesAccess().getRULESKeyword_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleContent__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRuleContentAccess().getRegexAssignment_0()); }
		(rule__RuleContent__RegexAssignment_0)
		{ after(grammarAccess.getRuleContentAccess().getRegexAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getRuleContentAccess().getRefAssignment_1()); }
		(rule__RuleContent__RefAssignment_1)
		{ after(grammarAccess.getRuleContentAccess().getRefAssignment_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrecedenceType__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrecedenceTypeAccess().getNONEEnumLiteralDeclaration_0()); }
		('NONE')
		{ after(grammarAccess.getPrecedenceTypeAccess().getNONEEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getPrecedenceTypeAccess().getLEFTEnumLiteralDeclaration_1()); }
		('LEFT')
		{ after(grammarAccess.getPrecedenceTypeAccess().getLEFTEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getPrecedenceTypeAccess().getRIGHTEnumLiteralDeclaration_2()); }
		('RIGHT')
		{ after(grammarAccess.getPrecedenceTypeAccess().getRIGHTEnumLiteralDeclaration_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParserModel__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParserModel__Group__0__Impl
	rule__ParserModel__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParserModel__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParserModelAccess().getUnorderedGroup_0()); }
	(rule__ParserModel__UnorderedGroup_0)
	{ after(grammarAccess.getParserModelAccess().getUnorderedGroup_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParserModel__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParserModel__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParserModel__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParserModelAccess().getRulesAssignment_1()); }
	(rule__ParserModel__RulesAssignment_1)
	{ after(grammarAccess.getParserModelAccess().getRulesAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ScannerName__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ScannerName__Group__0__Impl
	rule__ScannerName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ScannerName__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getScannerNameAccess().getSCANNERKeyword_0()); }
	'SCANNER'
	{ after(grammarAccess.getScannerNameAccess().getSCANNERKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ScannerName__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ScannerName__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ScannerName__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getScannerNameAccess().getNameAssignment_1()); }
	(rule__ScannerName__NameAssignment_1)?
	{ after(grammarAccess.getScannerNameAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ParserName__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParserName__Group__0__Impl
	rule__ParserName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParserName__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParserNameAccess().getPARSERKeyword_0()); }
	'PARSER'
	{ after(grammarAccess.getParserNameAccess().getPARSERKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParserName__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParserName__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParserName__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParserNameAccess().getNameAssignment_1()); }
	(rule__ParserName__NameAssignment_1)?
	{ after(grammarAccess.getParserNameAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Import__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Import__Group__0__Impl
	rule__Import__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportAccess().getIMPORTKeyword_0()); }
	'IMPORT'
	{ after(grammarAccess.getImportAccess().getIMPORTKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Import__Group__1__Impl
	rule__Import__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getImportAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Import__Group__2__Impl
	rule__Import__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportAccess().getContentAssignment_2()); }
	(rule__Import__ContentAssignment_2)
	{ after(grammarAccess.getImportAccess().getContentAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Import__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportAccess().getRightCurlyBracketKeyword_3()); }
	'}'
	{ after(grammarAccess.getImportAccess().getRightCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Export__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Export__Group__0__Impl
	rule__Export__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Export__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExportAccess().getEXPORTKeyword_0()); }
	'EXPORT'
	{ after(grammarAccess.getExportAccess().getEXPORTKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Export__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Export__Group__1__Impl
	rule__Export__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Export__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExportAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getExportAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Export__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Export__Group__2__Impl
	rule__Export__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Export__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExportAccess().getContentAssignment_2()); }
	(rule__Export__ContentAssignment_2)
	{ after(grammarAccess.getExportAccess().getContentAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Export__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Export__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Export__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExportAccess().getRightCurlyBracketKeyword_3()); }
	'}'
	{ after(grammarAccess.getExportAccess().getRightCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Global__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Global__Group__0__Impl
	rule__Global__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Global__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGlobalAccess().getGLOBALKeyword_0()); }
	'GLOBAL'
	{ after(grammarAccess.getGlobalAccess().getGLOBALKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Global__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Global__Group__1__Impl
	rule__Global__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Global__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGlobalAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getGlobalAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Global__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Global__Group__2__Impl
	rule__Global__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Global__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGlobalAccess().getContentAssignment_2()); }
	(rule__Global__ContentAssignment_2)
	{ after(grammarAccess.getGlobalAccess().getContentAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Global__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Global__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Global__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGlobalAccess().getRightCurlyBracketKeyword_3()); }
	'}'
	{ after(grammarAccess.getGlobalAccess().getRightCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Local__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Local__Group__0__Impl
	rule__Local__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Local__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLocalAccess().getLOCALKeyword_0()); }
	'LOCAL'
	{ after(grammarAccess.getLocalAccess().getLOCALKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Local__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Local__Group__1__Impl
	rule__Local__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Local__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLocalAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getLocalAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Local__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Local__Group__2__Impl
	rule__Local__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Local__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLocalAccess().getContentAssignment_2()); }
	(rule__Local__ContentAssignment_2)
	{ after(grammarAccess.getLocalAccess().getContentAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Local__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Local__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Local__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLocalAccess().getRightCurlyBracketKeyword_3()); }
	'}'
	{ after(grammarAccess.getLocalAccess().getRightCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Begin__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Begin__Group__0__Impl
	rule__Begin__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Begin__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBeginAccess().getBEGINKeyword_0()); }
	'BEGIN'
	{ after(grammarAccess.getBeginAccess().getBEGINKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Begin__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Begin__Group__1__Impl
	rule__Begin__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Begin__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBeginAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getBeginAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Begin__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Begin__Group__2__Impl
	rule__Begin__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Begin__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBeginAccess().getContentAssignment_2()); }
	(rule__Begin__ContentAssignment_2)
	{ after(grammarAccess.getBeginAccess().getContentAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Begin__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Begin__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Begin__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBeginAccess().getRightCurlyBracketKeyword_3()); }
	'}'
	{ after(grammarAccess.getBeginAccess().getRightCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Close__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Close__Group__0__Impl
	rule__Close__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Close__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCloseAccess().getCLOSEKeyword_0()); }
	'CLOSE'
	{ after(grammarAccess.getCloseAccess().getCLOSEKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Close__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Close__Group__1__Impl
	rule__Close__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Close__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCloseAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getCloseAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Close__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Close__Group__2__Impl
	rule__Close__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Close__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCloseAccess().getContentAssignment_2()); }
	(rule__Close__ContentAssignment_2)
	{ after(grammarAccess.getCloseAccess().getContentAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Close__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Close__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Close__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCloseAccess().getRightCurlyBracketKeyword_3()); }
	'}'
	{ after(grammarAccess.getCloseAccess().getRightCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Tokens__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Tokens__Group__0__Impl
	rule__Tokens__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Tokens__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTokensAccess().getTOKENKeyword_0()); }
	'TOKEN'
	{ after(grammarAccess.getTokensAccess().getTOKENKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Tokens__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Tokens__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Tokens__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTokensAccess().getTokensAssignment_1()); }
	(rule__Tokens__TokensAssignment_1)*
	{ after(grammarAccess.getTokensAccess().getTokensAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DefinedToken__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DefinedToken__Group_0__0__Impl
	rule__DefinedToken__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DefinedToken__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinedTokenAccess().getNameAssignment_0_0()); }
	(rule__DefinedToken__NameAssignment_0_0)
	{ after(grammarAccess.getDefinedTokenAccess().getNameAssignment_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DefinedToken__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DefinedToken__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DefinedToken__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinedTokenAccess().getGroup_0_1()); }
	(rule__DefinedToken__Group_0_1__0)
	{ after(grammarAccess.getDefinedTokenAccess().getGroup_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DefinedToken__Group_0_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DefinedToken__Group_0_1__0__Impl
	rule__DefinedToken__Group_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DefinedToken__Group_0_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinedTokenAccess().getEqualsSignKeyword_0_1_0()); }
	'='
	{ after(grammarAccess.getDefinedTokenAccess().getEqualsSignKeyword_0_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DefinedToken__Group_0_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DefinedToken__Group_0_1__1__Impl
	rule__DefinedToken__Group_0_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DefinedToken__Group_0_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinedTokenAccess().getNumberAssignment_0_1_1()); }
	(rule__DefinedToken__NumberAssignment_0_1_1)
	{ after(grammarAccess.getDefinedTokenAccess().getNumberAssignment_0_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DefinedToken__Group_0_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DefinedToken__Group_0_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DefinedToken__Group_0_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinedTokenAccess().getGroup_0_1_2()); }
	(rule__DefinedToken__Group_0_1_2__0)?
	{ after(grammarAccess.getDefinedTokenAccess().getGroup_0_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DefinedToken__Group_0_1_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DefinedToken__Group_0_1_2__0__Impl
	rule__DefinedToken__Group_0_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DefinedToken__Group_0_1_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinedTokenAccess().getCommaKeyword_0_1_2_0()); }
	','
	{ after(grammarAccess.getDefinedTokenAccess().getCommaKeyword_0_1_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DefinedToken__Group_0_1_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DefinedToken__Group_0_1_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DefinedToken__Group_0_1_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinedTokenAccess().getExtraAssignment_0_1_2_1()); }
	(rule__DefinedToken__ExtraAssignment_0_1_2_1)
	{ after(grammarAccess.getDefinedTokenAccess().getExtraAssignment_0_1_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TokenExtra__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TokenExtra__Group__0__Impl
	rule__TokenExtra__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TokenExtra__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTokenExtraAccess().getCostAssignment_0()); }
	(rule__TokenExtra__CostAssignment_0)
	{ after(grammarAccess.getTokenExtraAccess().getCostAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TokenExtra__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TokenExtra__Group__1__Impl
	rule__TokenExtra__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TokenExtra__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTokenExtraAccess().getCommaKeyword_1()); }
	','
	{ after(grammarAccess.getTokenExtraAccess().getCommaKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TokenExtra__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TokenExtra__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TokenExtra__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTokenExtraAccess().getPresentationAssignment_2()); }
	(rule__TokenExtra__PresentationAssignment_2)
	{ after(grammarAccess.getTokenExtraAccess().getPresentationAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CodeBlock__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CodeBlock__Group_1__0__Impl
	rule__CodeBlock__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CodeBlock__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCodeBlockAccess().getLeftCurlyBracketKeyword_1_0()); }
	'{'
	{ after(grammarAccess.getCodeBlockAccess().getLeftCurlyBracketKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CodeBlock__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CodeBlock__Group_1__1__Impl
	rule__CodeBlock__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CodeBlock__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCodeBlockAccess().getCodeBlockParserRuleCall_1_1()); }
	ruleCodeBlock
	{ after(grammarAccess.getCodeBlockAccess().getCodeBlockParserRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CodeBlock__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CodeBlock__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CodeBlock__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCodeBlockAccess().getRightCurlyBracketKeyword_1_2()); }
	'}'
	{ after(grammarAccess.getCodeBlockAccess().getRightCurlyBracketKeyword_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Precedence__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Precedence__Group__0__Impl
	rule__Precedence__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Precedence__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrecedenceAccess().getPRECKeyword_0()); }
	'PREC'
	{ after(grammarAccess.getPrecedenceAccess().getPRECKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Precedence__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Precedence__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Precedence__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrecedenceAccess().getRowsAssignment_1()); }
	(rule__Precedence__RowsAssignment_1)*
	{ after(grammarAccess.getPrecedenceAccess().getRowsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PrecedenceRow__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrecedenceRow__Group__0__Impl
	rule__PrecedenceRow__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrecedenceRow__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrecedenceRowAccess().getTypeAssignment_0()); }
	(rule__PrecedenceRow__TypeAssignment_0)
	{ after(grammarAccess.getPrecedenceRowAccess().getTypeAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrecedenceRow__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrecedenceRow__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrecedenceRow__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrecedenceRowAccess().getTokensAssignment_1()); }
	(rule__PrecedenceRow__TokensAssignment_1)*
	{ after(grammarAccess.getPrecedenceRowAccess().getTokensAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StartSymbols__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StartSymbols__Group__0__Impl
	rule__StartSymbols__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StartSymbols__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStartSymbolsAccess().getSTARTKeyword_0()); }
	'START'
	{ after(grammarAccess.getStartSymbolsAccess().getSTARTKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StartSymbols__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StartSymbols__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StartSymbols__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStartSymbolsAccess().getStatesAssignment_1()); }
	(rule__StartSymbols__StatesAssignment_1)*
	{ after(grammarAccess.getStartSymbolsAccess().getStatesAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__GrammarRules__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GrammarRules__Group__0__Impl
	rule__GrammarRules__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GrammarRules__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGrammarRulesAccess().getAlternatives_0()); }
	(rule__GrammarRules__Alternatives_0)
	{ after(grammarAccess.getGrammarRulesAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GrammarRules__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GrammarRules__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GrammarRules__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGrammarRulesAccess().getRulesAssignment_1()); }
	(rule__GrammarRules__RulesAssignment_1)*
	{ after(grammarAccess.getGrammarRulesAccess().getRulesAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__GrammarRule__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GrammarRule__Group__0__Impl
	rule__GrammarRule__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GrammarRule__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGrammarRuleAccess().getNameAssignment_0()); }
	(rule__GrammarRule__NameAssignment_0)
	{ after(grammarAccess.getGrammarRuleAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GrammarRule__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GrammarRule__Group__1__Impl
	rule__GrammarRule__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__GrammarRule__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGrammarRuleAccess().getEqualsSignSpaceLessThanSignKeyword_1()); }
	'= <'
	{ after(grammarAccess.getGrammarRuleAccess().getEqualsSignSpaceLessThanSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GrammarRule__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GrammarRule__Group__2__Impl
	rule__GrammarRule__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__GrammarRule__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGrammarRuleAccess().getRulesAssignment_2()); }
	(rule__GrammarRule__RulesAssignment_2)*
	{ after(grammarAccess.getGrammarRuleAccess().getRulesAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GrammarRule__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GrammarRule__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GrammarRule__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGrammarRuleAccess().getGreaterThanSignFullStopKeyword_3()); }
	'>.'
	{ after(grammarAccess.getGrammarRuleAccess().getGreaterThanSignFullStopKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleRule__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleRule__Group__0__Impl
	rule__SimpleRule__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleRule__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleRuleAccess().getNameAssignment_0()); }
	(rule__SimpleRule__NameAssignment_0)?
	{ after(grammarAccess.getSimpleRuleAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleRule__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleRule__Group__1__Impl
	rule__SimpleRule__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleRule__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleRuleAccess().getEqualsSignKeyword_1()); }
	'='
	{ after(grammarAccess.getSimpleRuleAccess().getEqualsSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleRule__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleRule__Group__2__Impl
	rule__SimpleRule__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleRule__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleRuleAccess().getBodyAssignment_2()); }
	(rule__SimpleRule__BodyAssignment_2)
	{ after(grammarAccess.getSimpleRuleAccess().getBodyAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleRule__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleRule__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleRule__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleRuleAccess().getGroup_3()); }
	(rule__SimpleRule__Group_3__0)?
	{ after(grammarAccess.getSimpleRuleAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleRule__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleRule__Group_3__0__Impl
	rule__SimpleRule__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleRule__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleRuleAccess().getLessThanSignKeyword_3_0()); }
	'<'
	{ after(grammarAccess.getSimpleRuleAccess().getLessThanSignKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleRule__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleRule__Group_3__1__Impl
	rule__SimpleRule__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleRule__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleRuleAccess().getRulesAssignment_3_1()); }
	(rule__SimpleRule__RulesAssignment_3_1)*
	{ after(grammarAccess.getSimpleRuleAccess().getRulesAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleRule__Group_3__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleRule__Group_3__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleRule__Group_3__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleRuleAccess().getGreaterThanSignFullStopKeyword_3_2()); }
	'>.'
	{ after(grammarAccess.getSimpleRuleAccess().getGreaterThanSignFullStopKeyword_3_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RuleBody__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RuleBody__Group__0__Impl
	rule__RuleBody__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleBody__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleBodyAccess().getPartAssignment_0()); }
	(rule__RuleBody__PartAssignment_0)
	{ after(grammarAccess.getRuleBodyAccess().getPartAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleBody__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RuleBody__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleBody__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleBodyAccess().getCodeAssignment_1()); }
	(rule__RuleBody__CodeAssignment_1)
	{ after(grammarAccess.getRuleBodyAccess().getCodeAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RuleCode__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RuleCode__Group_0__0__Impl
	rule__RuleCode__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleCode__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleCodeAccess().getLeftCurlyBracketKeyword_0_0()); }
	'{'
	{ after(grammarAccess.getRuleCodeAccess().getLeftCurlyBracketKeyword_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleCode__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RuleCode__Group_0__1__Impl
	rule__RuleCode__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleCode__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleCodeAccess().getCodeBlockParserRuleCall_0_1()); }
	ruleCodeBlock
	{ after(grammarAccess.getRuleCodeAccess().getCodeBlockParserRuleCall_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleCode__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RuleCode__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleCode__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleCodeAccess().getRightCurlyBracketKeyword_0_2()); }
	'}'
	{ after(grammarAccess.getRuleCodeAccess().getRightCurlyBracketKeyword_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RuleCode__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RuleCode__Group_1__0__Impl
	rule__RuleCode__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleCode__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleCodeAccess().getLeftSquareBracketKeyword_1_0()); }
	'['
	{ after(grammarAccess.getRuleCodeAccess().getLeftSquareBracketKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleCode__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RuleCode__Group_1__1__Impl
	rule__RuleCode__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleCode__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleCodeAccess().getCodeBlockParserRuleCall_1_1()); }
	ruleCodeBlock
	{ after(grammarAccess.getRuleCodeAccess().getCodeBlockParserRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleCode__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RuleCode__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleCode__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleCodeAccess().getRightSquareBracketKeyword_1_2()); }
	']'
	{ after(grammarAccess.getRuleCodeAccess().getRightSquareBracketKeyword_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ParserModel__UnorderedGroup_0
	@init {
		int stackSize = keepStackSize();
		getUnorderedGroupHelper().enter(grammarAccess.getParserModelAccess().getUnorderedGroup_0());
	}
:
	rule__ParserModel__UnorderedGroup_0__0
	?
;
finally {
	getUnorderedGroupHelper().leave(grammarAccess.getParserModelAccess().getUnorderedGroup_0());
	restoreStackSize(stackSize);
}

rule__ParserModel__UnorderedGroup_0__Impl
	@init {
		int stackSize = keepStackSize();
		boolean selected = false;
	}
:
		(
		( 
			{getUnorderedGroupHelper().canSelect(grammarAccess.getParserModelAccess().getUnorderedGroup_0(), 0)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getParserModelAccess().getUnorderedGroup_0(), 0);
				}
				{
					selected = true;
				}
				(
					{ before(grammarAccess.getParserModelAccess().getScannerAssignment_0_0()); }
					(rule__ParserModel__ScannerAssignment_0_0)
					{ after(grammarAccess.getParserModelAccess().getScannerAssignment_0_0()); }
				)
			)
		)|
		( 
			{getUnorderedGroupHelper().canSelect(grammarAccess.getParserModelAccess().getUnorderedGroup_0(), 1)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getParserModelAccess().getUnorderedGroup_0(), 1);
				}
				{
					selected = true;
				}
				(
					{ before(grammarAccess.getParserModelAccess().getParserAssignment_0_1()); }
					(rule__ParserModel__ParserAssignment_0_1)
					{ after(grammarAccess.getParserModelAccess().getParserAssignment_0_1()); }
				)
			)
		)|
		( 
			{getUnorderedGroupHelper().canSelect(grammarAccess.getParserModelAccess().getUnorderedGroup_0(), 2)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getParserModelAccess().getUnorderedGroup_0(), 2);
				}
				{
					selected = true;
				}
				(
					{ before(grammarAccess.getParserModelAccess().getImportBlockAssignment_0_2()); }
					(rule__ParserModel__ImportBlockAssignment_0_2)
					{ after(grammarAccess.getParserModelAccess().getImportBlockAssignment_0_2()); }
				)
			)
		)|
		( 
			{getUnorderedGroupHelper().canSelect(grammarAccess.getParserModelAccess().getUnorderedGroup_0(), 3)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getParserModelAccess().getUnorderedGroup_0(), 3);
				}
				{
					selected = true;
				}
				(
					{ before(grammarAccess.getParserModelAccess().getExportBlockAssignment_0_3()); }
					(rule__ParserModel__ExportBlockAssignment_0_3)
					{ after(grammarAccess.getParserModelAccess().getExportBlockAssignment_0_3()); }
				)
			)
		)|
		( 
			{getUnorderedGroupHelper().canSelect(grammarAccess.getParserModelAccess().getUnorderedGroup_0(), 4)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getParserModelAccess().getUnorderedGroup_0(), 4);
				}
				{
					selected = true;
				}
				(
					{ before(grammarAccess.getParserModelAccess().getGlobalBlockAssignment_0_4()); }
					(rule__ParserModel__GlobalBlockAssignment_0_4)
					{ after(grammarAccess.getParserModelAccess().getGlobalBlockAssignment_0_4()); }
				)
			)
		)|
		( 
			{getUnorderedGroupHelper().canSelect(grammarAccess.getParserModelAccess().getUnorderedGroup_0(), 5)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getParserModelAccess().getUnorderedGroup_0(), 5);
				}
				{
					selected = true;
				}
				(
					{ before(grammarAccess.getParserModelAccess().getLocalBlockAssignment_0_5()); }
					(rule__ParserModel__LocalBlockAssignment_0_5)
					{ after(grammarAccess.getParserModelAccess().getLocalBlockAssignment_0_5()); }
				)
			)
		)|
		( 
			{getUnorderedGroupHelper().canSelect(grammarAccess.getParserModelAccess().getUnorderedGroup_0(), 6)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getParserModelAccess().getUnorderedGroup_0(), 6);
				}
				{
					selected = true;
				}
				(
					{ before(grammarAccess.getParserModelAccess().getBeginBlockAssignment_0_6()); }
					(rule__ParserModel__BeginBlockAssignment_0_6)
					{ after(grammarAccess.getParserModelAccess().getBeginBlockAssignment_0_6()); }
				)
			)
		)|
		( 
			{getUnorderedGroupHelper().canSelect(grammarAccess.getParserModelAccess().getUnorderedGroup_0(), 7)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getParserModelAccess().getUnorderedGroup_0(), 7);
				}
				{
					selected = true;
				}
				(
					{ before(grammarAccess.getParserModelAccess().getCloseBlockAssignment_0_7()); }
					(rule__ParserModel__CloseBlockAssignment_0_7)
					{ after(grammarAccess.getParserModelAccess().getCloseBlockAssignment_0_7()); }
				)
			)
		)|
		( 
			{getUnorderedGroupHelper().canSelect(grammarAccess.getParserModelAccess().getUnorderedGroup_0(), 8)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getParserModelAccess().getUnorderedGroup_0(), 8);
				}
				{
					selected = true;
				}
				(
					{ before(grammarAccess.getParserModelAccess().getTokensAssignment_0_8()); }
					(rule__ParserModel__TokensAssignment_0_8)
					{ after(grammarAccess.getParserModelAccess().getTokensAssignment_0_8()); }
				)
			)
		)|
		( 
			{getUnorderedGroupHelper().canSelect(grammarAccess.getParserModelAccess().getUnorderedGroup_0(), 9)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getParserModelAccess().getUnorderedGroup_0(), 9);
				}
				{
					selected = true;
				}
				(
					{ before(grammarAccess.getParserModelAccess().getPrecedencAssignment_0_9()); }
					(rule__ParserModel__PrecedencAssignment_0_9)
					{ after(grammarAccess.getParserModelAccess().getPrecedencAssignment_0_9()); }
				)
			)
		)|
		( 
			{getUnorderedGroupHelper().canSelect(grammarAccess.getParserModelAccess().getUnorderedGroup_0(), 10)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getParserModelAccess().getUnorderedGroup_0(), 10);
				}
				{
					selected = true;
				}
				(
					{ before(grammarAccess.getParserModelAccess().getStartAssignment_0_10()); }
					(rule__ParserModel__StartAssignment_0_10)
					{ after(grammarAccess.getParserModelAccess().getStartAssignment_0_10()); }
				)
			)
		)
		)
;
finally {
	if (selected)
		getUnorderedGroupHelper().returnFromSelection(grammarAccess.getParserModelAccess().getUnorderedGroup_0());
	restoreStackSize(stackSize);
}

rule__ParserModel__UnorderedGroup_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParserModel__UnorderedGroup_0__Impl
	rule__ParserModel__UnorderedGroup_0__1?
;
finally {
	restoreStackSize(stackSize);
}

rule__ParserModel__UnorderedGroup_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParserModel__UnorderedGroup_0__Impl
	rule__ParserModel__UnorderedGroup_0__2?
;
finally {
	restoreStackSize(stackSize);
}

rule__ParserModel__UnorderedGroup_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParserModel__UnorderedGroup_0__Impl
	rule__ParserModel__UnorderedGroup_0__3?
;
finally {
	restoreStackSize(stackSize);
}

rule__ParserModel__UnorderedGroup_0__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParserModel__UnorderedGroup_0__Impl
	rule__ParserModel__UnorderedGroup_0__4?
;
finally {
	restoreStackSize(stackSize);
}

rule__ParserModel__UnorderedGroup_0__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParserModel__UnorderedGroup_0__Impl
	rule__ParserModel__UnorderedGroup_0__5?
;
finally {
	restoreStackSize(stackSize);
}

rule__ParserModel__UnorderedGroup_0__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParserModel__UnorderedGroup_0__Impl
	rule__ParserModel__UnorderedGroup_0__6?
;
finally {
	restoreStackSize(stackSize);
}

rule__ParserModel__UnorderedGroup_0__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParserModel__UnorderedGroup_0__Impl
	rule__ParserModel__UnorderedGroup_0__7?
;
finally {
	restoreStackSize(stackSize);
}

rule__ParserModel__UnorderedGroup_0__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParserModel__UnorderedGroup_0__Impl
	rule__ParserModel__UnorderedGroup_0__8?
;
finally {
	restoreStackSize(stackSize);
}

rule__ParserModel__UnorderedGroup_0__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParserModel__UnorderedGroup_0__Impl
	rule__ParserModel__UnorderedGroup_0__9?
;
finally {
	restoreStackSize(stackSize);
}

rule__ParserModel__UnorderedGroup_0__9
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParserModel__UnorderedGroup_0__Impl
	rule__ParserModel__UnorderedGroup_0__10?
;
finally {
	restoreStackSize(stackSize);
}

rule__ParserModel__UnorderedGroup_0__10
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParserModel__UnorderedGroup_0__Impl
;
finally {
	restoreStackSize(stackSize);
}


rule__RuleCode__UnorderedGroup
	@init {
		int stackSize = keepStackSize();
		getUnorderedGroupHelper().enter(grammarAccess.getRuleCodeAccess().getUnorderedGroup());
	}
:
	rule__RuleCode__UnorderedGroup__0
	?
;
finally {
	getUnorderedGroupHelper().leave(grammarAccess.getRuleCodeAccess().getUnorderedGroup());
	restoreStackSize(stackSize);
}

rule__RuleCode__UnorderedGroup__Impl
	@init {
		int stackSize = keepStackSize();
		boolean selected = false;
	}
:
		(
		( 
			{getUnorderedGroupHelper().canSelect(grammarAccess.getRuleCodeAccess().getUnorderedGroup(), 0)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getRuleCodeAccess().getUnorderedGroup(), 0);
				}
				{
					selected = true;
				}
				(
					{ before(grammarAccess.getRuleCodeAccess().getGroup_0()); }
					(rule__RuleCode__Group_0__0)
					{ after(grammarAccess.getRuleCodeAccess().getGroup_0()); }
				)
			)
		)|
		( 
			{getUnorderedGroupHelper().canSelect(grammarAccess.getRuleCodeAccess().getUnorderedGroup(), 1)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getRuleCodeAccess().getUnorderedGroup(), 1);
				}
				{
					selected = true;
				}
				(
					{ before(grammarAccess.getRuleCodeAccess().getGroup_1()); }
					(rule__RuleCode__Group_1__0)
					{ after(grammarAccess.getRuleCodeAccess().getGroup_1()); }
				)
			)
		)
		)
;
finally {
	if (selected)
		getUnorderedGroupHelper().returnFromSelection(grammarAccess.getRuleCodeAccess().getUnorderedGroup());
	restoreStackSize(stackSize);
}

rule__RuleCode__UnorderedGroup__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RuleCode__UnorderedGroup__Impl
	rule__RuleCode__UnorderedGroup__1?
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleCode__UnorderedGroup__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RuleCode__UnorderedGroup__Impl
;
finally {
	restoreStackSize(stackSize);
}


rule__ParserModel__ScannerAssignment_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParserModelAccess().getScannerScannerNameParserRuleCall_0_0_0()); }
		ruleScannerName
		{ after(grammarAccess.getParserModelAccess().getScannerScannerNameParserRuleCall_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParserModel__ParserAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParserModelAccess().getParserParserNameParserRuleCall_0_1_0()); }
		ruleParserName
		{ after(grammarAccess.getParserModelAccess().getParserParserNameParserRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParserModel__ImportBlockAssignment_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParserModelAccess().getImportBlockImportParserRuleCall_0_2_0()); }
		ruleImport
		{ after(grammarAccess.getParserModelAccess().getImportBlockImportParserRuleCall_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParserModel__ExportBlockAssignment_0_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParserModelAccess().getExportBlockExportParserRuleCall_0_3_0()); }
		ruleExport
		{ after(grammarAccess.getParserModelAccess().getExportBlockExportParserRuleCall_0_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParserModel__GlobalBlockAssignment_0_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParserModelAccess().getGlobalBlockGlobalParserRuleCall_0_4_0()); }
		ruleGlobal
		{ after(grammarAccess.getParserModelAccess().getGlobalBlockGlobalParserRuleCall_0_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParserModel__LocalBlockAssignment_0_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParserModelAccess().getLocalBlockLocalParserRuleCall_0_5_0()); }
		ruleLocal
		{ after(grammarAccess.getParserModelAccess().getLocalBlockLocalParserRuleCall_0_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParserModel__BeginBlockAssignment_0_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParserModelAccess().getBeginBlockBeginParserRuleCall_0_6_0()); }
		ruleBegin
		{ after(grammarAccess.getParserModelAccess().getBeginBlockBeginParserRuleCall_0_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParserModel__CloseBlockAssignment_0_7
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParserModelAccess().getCloseBlockCloseParserRuleCall_0_7_0()); }
		ruleClose
		{ after(grammarAccess.getParserModelAccess().getCloseBlockCloseParserRuleCall_0_7_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParserModel__TokensAssignment_0_8
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParserModelAccess().getTokensTokensParserRuleCall_0_8_0()); }
		ruleTokens
		{ after(grammarAccess.getParserModelAccess().getTokensTokensParserRuleCall_0_8_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParserModel__PrecedencAssignment_0_9
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParserModelAccess().getPrecedencPrecedenceParserRuleCall_0_9_0()); }
		rulePrecedence
		{ after(grammarAccess.getParserModelAccess().getPrecedencPrecedenceParserRuleCall_0_9_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParserModel__StartAssignment_0_10
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParserModelAccess().getStartStartSymbolsParserRuleCall_0_10_0()); }
		ruleStartSymbols
		{ after(grammarAccess.getParserModelAccess().getStartStartSymbolsParserRuleCall_0_10_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParserModel__RulesAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParserModelAccess().getRulesGrammarRulesParserRuleCall_1_0()); }
		ruleGrammarRules
		{ after(grammarAccess.getParserModelAccess().getRulesGrammarRulesParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ScannerName__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getScannerNameAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getScannerNameAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParserName__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParserNameAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getParserNameAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__ContentAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getImportAccess().getContentCodeBlockParserRuleCall_2_0()); }
		ruleCodeBlock
		{ after(grammarAccess.getImportAccess().getContentCodeBlockParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Export__ContentAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExportAccess().getContentCodeBlockParserRuleCall_2_0()); }
		ruleCodeBlock
		{ after(grammarAccess.getExportAccess().getContentCodeBlockParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Global__ContentAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGlobalAccess().getContentCodeBlockParserRuleCall_2_0()); }
		ruleCodeBlock
		{ after(grammarAccess.getGlobalAccess().getContentCodeBlockParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Local__ContentAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLocalAccess().getContentCodeBlockParserRuleCall_2_0()); }
		ruleCodeBlock
		{ after(grammarAccess.getLocalAccess().getContentCodeBlockParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Begin__ContentAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBeginAccess().getContentCodeBlockParserRuleCall_2_0()); }
		ruleCodeBlock
		{ after(grammarAccess.getBeginAccess().getContentCodeBlockParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Close__ContentAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCloseAccess().getContentCodeBlockParserRuleCall_2_0()); }
		ruleCodeBlock
		{ after(grammarAccess.getCloseAccess().getContentCodeBlockParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Tokens__TokensAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTokensAccess().getTokensDefinedTokenParserRuleCall_1_0()); }
		ruleDefinedToken
		{ after(grammarAccess.getTokensAccess().getTokensDefinedTokenParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DefinedToken__NameAssignment_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDefinedTokenAccess().getNameAlternatives_0_0_0()); }
		(rule__DefinedToken__NameAlternatives_0_0_0)
		{ after(grammarAccess.getDefinedTokenAccess().getNameAlternatives_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DefinedToken__NumberAssignment_0_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDefinedTokenAccess().getNumberINTTerminalRuleCall_0_1_1_0()); }
		RULE_INT
		{ after(grammarAccess.getDefinedTokenAccess().getNumberINTTerminalRuleCall_0_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DefinedToken__ExtraAssignment_0_1_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDefinedTokenAccess().getExtraTokenExtraParserRuleCall_0_1_2_1_0()); }
		ruleTokenExtra
		{ after(grammarAccess.getDefinedTokenAccess().getExtraTokenExtraParserRuleCall_0_1_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DefinedToken__ExtraAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDefinedTokenAccess().getExtraTokenExtraParserRuleCall_1_0()); }
		ruleTokenExtra
		{ after(grammarAccess.getDefinedTokenAccess().getExtraTokenExtraParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TokenExtra__CostAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTokenExtraAccess().getCostINTTerminalRuleCall_0_0()); }
		RULE_INT
		{ after(grammarAccess.getTokenExtraAccess().getCostINTTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TokenExtra__PresentationAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTokenExtraAccess().getPresentationSTRINGTerminalRuleCall_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getTokenExtraAccess().getPresentationSTRINGTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Precedence__RowsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrecedenceAccess().getRowsPrecedenceRowParserRuleCall_1_0()); }
		rulePrecedenceRow
		{ after(grammarAccess.getPrecedenceAccess().getRowsPrecedenceRowParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrecedenceRow__TypeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrecedenceRowAccess().getTypePrecedenceTypeEnumRuleCall_0_0()); }
		rulePrecedenceType
		{ after(grammarAccess.getPrecedenceRowAccess().getTypePrecedenceTypeEnumRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrecedenceRow__TokensAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrecedenceRowAccess().getTokensDefinedTokenCrossReference_1_0()); }
		(
			{ before(grammarAccess.getPrecedenceRowAccess().getTokensDefinedTokenIDTerminalRuleCall_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getPrecedenceRowAccess().getTokensDefinedTokenIDTerminalRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getPrecedenceRowAccess().getTokensDefinedTokenCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StartSymbols__StatesAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStartSymbolsAccess().getStatesStartStateParserRuleCall_1_0()); }
		ruleStartState
		{ after(grammarAccess.getStartSymbolsAccess().getStatesStartStateParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StartState__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStartStateAccess().getNameIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getStartStateAccess().getNameIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GrammarRules__RulesAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGrammarRulesAccess().getRulesGrammarRuleParserRuleCall_1_0()); }
		ruleGrammarRule
		{ after(grammarAccess.getGrammarRulesAccess().getRulesGrammarRuleParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GrammarRule__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGrammarRuleAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getGrammarRuleAccess().getNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GrammarRule__RulesAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGrammarRuleAccess().getRulesSimpleRuleParserRuleCall_2_0()); }
		ruleSimpleRule
		{ after(grammarAccess.getGrammarRuleAccess().getRulesSimpleRuleParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleRule__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSimpleRuleAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getSimpleRuleAccess().getNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleRule__BodyAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSimpleRuleAccess().getBodyRuleBodyParserRuleCall_2_0()); }
		ruleRuleBody
		{ after(grammarAccess.getSimpleRuleAccess().getBodyRuleBodyParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleRule__RulesAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSimpleRuleAccess().getRulesSimpleRuleParserRuleCall_3_1_0()); }
		ruleSimpleRule
		{ after(grammarAccess.getSimpleRuleAccess().getRulesSimpleRuleParserRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleBody__PartAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRuleBodyAccess().getPartRulePartParserRuleCall_0_0()); }
		ruleRulePart
		{ after(grammarAccess.getRuleBodyAccess().getPartRulePartParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleBody__CodeAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRuleBodyAccess().getCodeRuleCodeParserRuleCall_1_0()); }
		ruleRuleCode
		{ after(grammarAccess.getRuleBodyAccess().getCodeRuleCodeParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleContent__RegexAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRuleContentAccess().getRegexSTRINGTerminalRuleCall_0_0()); }
		RULE_STRING
		{ after(grammarAccess.getRuleContentAccess().getRegexSTRINGTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleContent__RefAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRuleContentAccess().getRefGrammerReferenceCrossReference_1_0()); }
		(
			{ before(grammarAccess.getRuleContentAccess().getRefGrammerReferenceIDTerminalRuleCall_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getRuleContentAccess().getRefGrammerReferenceIDTerminalRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getRuleContentAccess().getRefGrammerReferenceCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RulePart__ContentAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRulePartAccess().getContentRuleContentParserRuleCall_0()); }
		ruleRuleContent
		{ after(grammarAccess.getRulePartAccess().getContentRuleContentParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
