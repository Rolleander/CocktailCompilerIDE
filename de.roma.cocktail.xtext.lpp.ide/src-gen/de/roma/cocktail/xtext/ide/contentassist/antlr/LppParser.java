/*
 * generated by Xtext 2.9.1
 */
package de.roma.cocktail.xtext.ide.contentassist.antlr;

import com.google.inject.Inject;
import de.roma.cocktail.xtext.ide.contentassist.antlr.internal.InternalLppParser;
import de.roma.cocktail.xtext.services.LppGrammarAccess;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

public class LppParser extends AbstractContentAssistParser {

	@Inject
	private LppGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalLppParser createParser() {
		InternalLppParser result = new InternalLppParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getCodeBlockAccess().getAlternatives(), "rule__CodeBlock__Alternatives");
					put(grammarAccess.getCodeWallAccess().getAlternatives(), "rule__CodeWall__Alternatives");
					put(grammarAccess.getGrammarRulesAccess().getAlternatives_0(), "rule__GrammarRules__Alternatives_0");
					put(grammarAccess.getNodePartAccess().getAlternatives(), "rule__NodePart__Alternatives");
					put(grammarAccess.getNodeAccess().getNameAlternatives_1_0(), "rule__Node__NameAlternatives_1_0");
					put(grammarAccess.getRuleNameAccess().getNameAlternatives_0(), "rule__RuleName__NameAlternatives_0");
					put(grammarAccess.getNodeTypeAccess().getAlternatives(), "rule__NodeType__Alternatives");
					put(grammarAccess.getPrecedenceTypeAccess().getAlternatives(), "rule__PrecedenceType__Alternatives");
					put(grammarAccess.getParserAccess().getGroup(), "rule__Parser__Group__0");
					put(grammarAccess.getScannerNameAccess().getGroup(), "rule__ScannerName__Group__0");
					put(grammarAccess.getParserNameAccess().getGroup(), "rule__ParserName__Group__0");
					put(grammarAccess.getImportAccess().getGroup(), "rule__Import__Group__0");
					put(grammarAccess.getExportAccess().getGroup(), "rule__Export__Group__0");
					put(grammarAccess.getGlobalAccess().getGroup(), "rule__Global__Group__0");
					put(grammarAccess.getLocalAccess().getGroup(), "rule__Local__Group__0");
					put(grammarAccess.getBeginAccess().getGroup(), "rule__Begin__Group__0");
					put(grammarAccess.getCloseAccess().getGroup(), "rule__Close__Group__0");
					put(grammarAccess.getTokenExtraAccess().getGroup(), "rule__TokenExtra__Group__0");
					put(grammarAccess.getCodeBlockAccess().getGroup_1(), "rule__CodeBlock__Group_1__0");
					put(grammarAccess.getPrecedenceAccess().getGroup(), "rule__Precedence__Group__0");
					put(grammarAccess.getPrecedenceRowAccess().getGroup(), "rule__PrecedenceRow__Group__0");
					put(grammarAccess.getStartSymbolsAccess().getGroup(), "rule__StartSymbols__Group__0");
					put(grammarAccess.getGrammarRulesAccess().getGroup(), "rule__GrammarRules__Group__0");
					put(grammarAccess.getGrammarRuleAccess().getGroup(), "rule__GrammarRule__Group__0");
					put(grammarAccess.getExtensionRuleAccess().getGroup(), "rule__ExtensionRule__Group__0");
					put(grammarAccess.getRuleBodyAccess().getGroup(), "rule__RuleBody__Group__0");
					put(grammarAccess.getRuleBodyAccess().getGroup_2(), "rule__RuleBody__Group_2__0");
					put(grammarAccess.getRuleBodyAccess().getGroup_3(), "rule__RuleBody__Group_3__0");
					put(grammarAccess.getExtensionsAccess().getGroup(), "rule__Extensions__Group__0");
					put(grammarAccess.getNodeAccess().getGroup(), "rule__Node__Group__0");
					put(grammarAccess.getNodeAccess().getGroup_0(), "rule__Node__Group_0__0");
					put(grammarAccess.getNodeAttributeAccess().getGroup(), "rule__NodeAttribute__Group__0");
					put(grammarAccess.getNodeAttributeAccess().getGroup_2(), "rule__NodeAttribute__Group_2__0");
					put(grammarAccess.getParserAccess().getScannerAssignment_0_0(), "rule__Parser__ScannerAssignment_0_0");
					put(grammarAccess.getParserAccess().getParserAssignment_0_1(), "rule__Parser__ParserAssignment_0_1");
					put(grammarAccess.getParserAccess().getImportBlockAssignment_0_2(), "rule__Parser__ImportBlockAssignment_0_2");
					put(grammarAccess.getParserAccess().getExportBlockAssignment_0_3(), "rule__Parser__ExportBlockAssignment_0_3");
					put(grammarAccess.getParserAccess().getGlobalBlockAssignment_0_4(), "rule__Parser__GlobalBlockAssignment_0_4");
					put(grammarAccess.getParserAccess().getLocalBlockAssignment_0_5(), "rule__Parser__LocalBlockAssignment_0_5");
					put(grammarAccess.getParserAccess().getBeginBlockAssignment_0_6(), "rule__Parser__BeginBlockAssignment_0_6");
					put(grammarAccess.getParserAccess().getCloseBlockAssignment_0_7(), "rule__Parser__CloseBlockAssignment_0_7");
					put(grammarAccess.getParserAccess().getPrecedenceAssignment_0_8(), "rule__Parser__PrecedenceAssignment_0_8");
					put(grammarAccess.getParserAccess().getStartAssignment_0_9(), "rule__Parser__StartAssignment_0_9");
					put(grammarAccess.getParserAccess().getRulesAssignment_1(), "rule__Parser__RulesAssignment_1");
					put(grammarAccess.getScannerNameAccess().getNameAssignment_1(), "rule__ScannerName__NameAssignment_1");
					put(grammarAccess.getParserNameAccess().getNameAssignment_1(), "rule__ParserName__NameAssignment_1");
					put(grammarAccess.getImportAccess().getContentAssignment_2(), "rule__Import__ContentAssignment_2");
					put(grammarAccess.getExportAccess().getContentAssignment_2(), "rule__Export__ContentAssignment_2");
					put(grammarAccess.getGlobalAccess().getContentAssignment_2(), "rule__Global__ContentAssignment_2");
					put(grammarAccess.getLocalAccess().getContentAssignment_2(), "rule__Local__ContentAssignment_2");
					put(grammarAccess.getBeginAccess().getContentAssignment_2(), "rule__Begin__ContentAssignment_2");
					put(grammarAccess.getCloseAccess().getContentAssignment_2(), "rule__Close__ContentAssignment_2");
					put(grammarAccess.getTokenExtraAccess().getCostAssignment_0(), "rule__TokenExtra__CostAssignment_0");
					put(grammarAccess.getTokenExtraAccess().getPresentationAssignment_2(), "rule__TokenExtra__PresentationAssignment_2");
					put(grammarAccess.getCodeBlockAccess().getWallAssignment_0(), "rule__CodeBlock__WallAssignment_0");
					put(grammarAccess.getCodeBlockAccess().getBlockAssignment_1_1(), "rule__CodeBlock__BlockAssignment_1_1");
					put(grammarAccess.getPrecedenceAccess().getRowsAssignment_1(), "rule__Precedence__RowsAssignment_1");
					put(grammarAccess.getPrecedenceRowAccess().getTypeAssignment_0(), "rule__PrecedenceRow__TypeAssignment_0");
					put(grammarAccess.getPrecedenceRowAccess().getStringsAssignment_1(), "rule__PrecedenceRow__StringsAssignment_1");
					put(grammarAccess.getPrecedenceRowAccess().getNameAssignment_2(), "rule__PrecedenceRow__NameAssignment_2");
					put(grammarAccess.getStartSymbolsAccess().getStatesAssignment_1(), "rule__StartSymbols__StatesAssignment_1");
					put(grammarAccess.getStartStateAccess().getNameAssignment(), "rule__StartState__NameAssignment");
					put(grammarAccess.getGrammarRulesAccess().getNodesAssignment_1(), "rule__GrammarRules__NodesAssignment_1");
					put(grammarAccess.getGrammarRuleAccess().getNameAssignment_0(), "rule__GrammarRule__NameAssignment_0");
					put(grammarAccess.getGrammarRuleAccess().getBodyAssignment_1(), "rule__GrammarRule__BodyAssignment_1");
					put(grammarAccess.getExtensionRuleAccess().getNameAssignment_0(), "rule__ExtensionRule__NameAssignment_0");
					put(grammarAccess.getExtensionRuleAccess().getBodyAssignment_1(), "rule__ExtensionRule__BodyAssignment_1");
					put(grammarAccess.getRuleBodyAccess().getNodetypeAssignment_0(), "rule__RuleBody__NodetypeAssignment_0");
					put(grammarAccess.getRuleBodyAccess().getPartAssignment_1(), "rule__RuleBody__PartAssignment_1");
					put(grammarAccess.getRuleBodyAccess().getTokenAssignment_2_1(), "rule__RuleBody__TokenAssignment_2_1");
					put(grammarAccess.getRuleBodyAccess().getBlockAssignment_3_1(), "rule__RuleBody__BlockAssignment_3_1");
					put(grammarAccess.getRuleBodyAccess().getExtensionAssignment_4(), "rule__RuleBody__ExtensionAssignment_4");
					put(grammarAccess.getExtensionsAccess().getNodesAssignment_1(), "rule__Extensions__NodesAssignment_1");
					put(grammarAccess.getNodePartAccess().getChildAssignment_0(), "rule__NodePart__ChildAssignment_0");
					put(grammarAccess.getNodePartAccess().getAttributeAssignment_1(), "rule__NodePart__AttributeAssignment_1");
					put(grammarAccess.getNodeAccess().getSelectorAssignment_0_0(), "rule__Node__SelectorAssignment_0_0");
					put(grammarAccess.getNodeAccess().getNameAssignment_1(), "rule__Node__NameAssignment_1");
					put(grammarAccess.getNodeAttributeAccess().getAttributeAssignment_1(), "rule__NodeAttribute__AttributeAssignment_1");
					put(grammarAccess.getNodeAttributeAccess().getTypeAssignment_2_1(), "rule__NodeAttribute__TypeAssignment_2_1");
					put(grammarAccess.getRuleNameAccess().getNameAssignment(), "rule__RuleName__NameAssignment");
					put(grammarAccess.getParserAccess().getUnorderedGroup_0(), "rule__Parser__UnorderedGroup_0");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalLppParser typedParser = (InternalLppParser) parser;
			typedParser.entryRuleParser();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public LppGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(LppGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
