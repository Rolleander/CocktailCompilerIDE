/*
 * generated by Xtext 2.9.1
 */
package de.roma.cocktail.xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.UnorderedGroup;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class ParserGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ParserModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.roma.cocktail.xtext.Parser.ParserModel");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cUnorderedGroup.eContents().get(0);
		private final Assignment cScannerAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cScannerScannerNameParserRuleCall_0_0_0 = (RuleCall)cScannerAssignment_0_0.eContents().get(0);
		private final Assignment cParserAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cParserParserNameParserRuleCall_0_1_0 = (RuleCall)cParserAssignment_0_1.eContents().get(0);
		private final Assignment cImportBlockAssignment_1 = (Assignment)cUnorderedGroup.eContents().get(1);
		private final RuleCall cImportBlockImportParserRuleCall_1_0 = (RuleCall)cImportBlockAssignment_1.eContents().get(0);
		private final Assignment cExportBlockAssignment_2 = (Assignment)cUnorderedGroup.eContents().get(2);
		private final RuleCall cExportBlockExportParserRuleCall_2_0 = (RuleCall)cExportBlockAssignment_2.eContents().get(0);
		private final Assignment cGlobalBlockAssignment_3 = (Assignment)cUnorderedGroup.eContents().get(3);
		private final RuleCall cGlobalBlockGlobalParserRuleCall_3_0 = (RuleCall)cGlobalBlockAssignment_3.eContents().get(0);
		private final Assignment cLocalBlockAssignment_4 = (Assignment)cUnorderedGroup.eContents().get(4);
		private final RuleCall cLocalBlockLocalParserRuleCall_4_0 = (RuleCall)cLocalBlockAssignment_4.eContents().get(0);
		private final Assignment cBeginBlockAssignment_5 = (Assignment)cUnorderedGroup.eContents().get(5);
		private final RuleCall cBeginBlockBeginParserRuleCall_5_0 = (RuleCall)cBeginBlockAssignment_5.eContents().get(0);
		private final Assignment cCloseBlockAssignment_6 = (Assignment)cUnorderedGroup.eContents().get(6);
		private final RuleCall cCloseBlockCloseParserRuleCall_6_0 = (RuleCall)cCloseBlockAssignment_6.eContents().get(0);
		private final Assignment cTokensAssignment_7 = (Assignment)cUnorderedGroup.eContents().get(7);
		private final RuleCall cTokensTokensParserRuleCall_7_0 = (RuleCall)cTokensAssignment_7.eContents().get(0);
		private final Assignment cPrecedencAssignment_8 = (Assignment)cUnorderedGroup.eContents().get(8);
		private final RuleCall cPrecedencPrecedenceParserRuleCall_8_0 = (RuleCall)cPrecedencAssignment_8.eContents().get(0);
		private final Assignment cStartAssignment_9 = (Assignment)cUnorderedGroup.eContents().get(9);
		private final RuleCall cStartStartSymbolsParserRuleCall_9_0 = (RuleCall)cStartAssignment_9.eContents().get(0);
		private final Assignment cRulesAssignment_10 = (Assignment)cUnorderedGroup.eContents().get(10);
		private final RuleCall cRulesGrammarRulesParserRuleCall_10_0 = (RuleCall)cRulesAssignment_10.eContents().get(0);
		
		//ParserModel:
		//	scanner=ScannerName parser=ParserName & importBlock=Import? & exportBlock=Export? & globalBlock=Global?
		//	& localBlock=Local? & beginBlock=Begin? & closeBlock=Close?
		//	& tokens=Tokens?
		//	& precedenc=Precedence?
		//	& start=StartSymbols?
		//	& rules=GrammarRules?;
		@Override public ParserRule getRule() { return rule; }
		
		//scanner=ScannerName parser=ParserName & importBlock=Import? & exportBlock=Export? & globalBlock=Global? &
		//localBlock=Local? & beginBlock=Begin? & closeBlock=Close? & tokens=Tokens? & precedenc=Precedence? &
		//start=StartSymbols? & rules=GrammarRules?
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }
		
		//scanner=ScannerName parser=ParserName
		public Group getGroup_0() { return cGroup_0; }
		
		//scanner=ScannerName
		public Assignment getScannerAssignment_0_0() { return cScannerAssignment_0_0; }
		
		//ScannerName
		public RuleCall getScannerScannerNameParserRuleCall_0_0_0() { return cScannerScannerNameParserRuleCall_0_0_0; }
		
		//parser=ParserName
		public Assignment getParserAssignment_0_1() { return cParserAssignment_0_1; }
		
		//ParserName
		public RuleCall getParserParserNameParserRuleCall_0_1_0() { return cParserParserNameParserRuleCall_0_1_0; }
		
		//importBlock=Import?
		public Assignment getImportBlockAssignment_1() { return cImportBlockAssignment_1; }
		
		//Import
		public RuleCall getImportBlockImportParserRuleCall_1_0() { return cImportBlockImportParserRuleCall_1_0; }
		
		//exportBlock=Export?
		public Assignment getExportBlockAssignment_2() { return cExportBlockAssignment_2; }
		
		//Export
		public RuleCall getExportBlockExportParserRuleCall_2_0() { return cExportBlockExportParserRuleCall_2_0; }
		
		//globalBlock=Global?
		public Assignment getGlobalBlockAssignment_3() { return cGlobalBlockAssignment_3; }
		
		//Global
		public RuleCall getGlobalBlockGlobalParserRuleCall_3_0() { return cGlobalBlockGlobalParserRuleCall_3_0; }
		
		//localBlock=Local?
		public Assignment getLocalBlockAssignment_4() { return cLocalBlockAssignment_4; }
		
		//Local
		public RuleCall getLocalBlockLocalParserRuleCall_4_0() { return cLocalBlockLocalParserRuleCall_4_0; }
		
		//beginBlock=Begin?
		public Assignment getBeginBlockAssignment_5() { return cBeginBlockAssignment_5; }
		
		//Begin
		public RuleCall getBeginBlockBeginParserRuleCall_5_0() { return cBeginBlockBeginParserRuleCall_5_0; }
		
		//closeBlock=Close?
		public Assignment getCloseBlockAssignment_6() { return cCloseBlockAssignment_6; }
		
		//Close
		public RuleCall getCloseBlockCloseParserRuleCall_6_0() { return cCloseBlockCloseParserRuleCall_6_0; }
		
		//tokens=Tokens?
		public Assignment getTokensAssignment_7() { return cTokensAssignment_7; }
		
		//Tokens
		public RuleCall getTokensTokensParserRuleCall_7_0() { return cTokensTokensParserRuleCall_7_0; }
		
		//precedenc=Precedence?
		public Assignment getPrecedencAssignment_8() { return cPrecedencAssignment_8; }
		
		//Precedence
		public RuleCall getPrecedencPrecedenceParserRuleCall_8_0() { return cPrecedencPrecedenceParserRuleCall_8_0; }
		
		//start=StartSymbols?
		public Assignment getStartAssignment_9() { return cStartAssignment_9; }
		
		//StartSymbols
		public RuleCall getStartStartSymbolsParserRuleCall_9_0() { return cStartStartSymbolsParserRuleCall_9_0; }
		
		//rules=GrammarRules?
		public Assignment getRulesAssignment_10() { return cRulesAssignment_10; }
		
		//GrammarRules
		public RuleCall getRulesGrammarRulesParserRuleCall_10_0() { return cRulesGrammarRulesParserRuleCall_10_0; }
	}
	public class ScannerNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.roma.cocktail.xtext.Parser.ScannerName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSCANNERKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//ScannerName:
		//	'SCANNER' name=ID?;
		@Override public ParserRule getRule() { return rule; }
		
		//'SCANNER' name=ID?
		public Group getGroup() { return cGroup; }
		
		//'SCANNER'
		public Keyword getSCANNERKeyword_0() { return cSCANNERKeyword_0; }
		
		//name=ID?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class ParserNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.roma.cocktail.xtext.Parser.ParserName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPARSERKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//ParserName:
		//	'PARSER' name=ID?;
		@Override public ParserRule getRule() { return rule; }
		
		//'PARSER' name=ID?
		public Group getGroup() { return cGroup; }
		
		//'PARSER'
		public Keyword getPARSERKeyword_0() { return cPARSERKeyword_0; }
		
		//name=ID?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.roma.cocktail.xtext.Parser.Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIMPORTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cContentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cContentCodeBlockParserRuleCall_2_0 = (RuleCall)cContentAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Import:
		//	'IMPORT' '{' content=CodeBlock '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'IMPORT' '{' content=CodeBlock '}'
		public Group getGroup() { return cGroup; }
		
		//'IMPORT'
		public Keyword getIMPORTKeyword_0() { return cIMPORTKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//content=CodeBlock
		public Assignment getContentAssignment_2() { return cContentAssignment_2; }
		
		//CodeBlock
		public RuleCall getContentCodeBlockParserRuleCall_2_0() { return cContentCodeBlockParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class ExportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.roma.cocktail.xtext.Parser.Export");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEXPORTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cContentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cContentCodeBlockParserRuleCall_2_0 = (RuleCall)cContentAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Export:
		//	'EXPORT' '{' content=CodeBlock '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'EXPORT' '{' content=CodeBlock '}'
		public Group getGroup() { return cGroup; }
		
		//'EXPORT'
		public Keyword getEXPORTKeyword_0() { return cEXPORTKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//content=CodeBlock
		public Assignment getContentAssignment_2() { return cContentAssignment_2; }
		
		//CodeBlock
		public RuleCall getContentCodeBlockParserRuleCall_2_0() { return cContentCodeBlockParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class GlobalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.roma.cocktail.xtext.Parser.Global");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGLOBALKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cContentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cContentCodeBlockParserRuleCall_2_0 = (RuleCall)cContentAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Global:
		//	'GLOBAL' '{' content=CodeBlock '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'GLOBAL' '{' content=CodeBlock '}'
		public Group getGroup() { return cGroup; }
		
		//'GLOBAL'
		public Keyword getGLOBALKeyword_0() { return cGLOBALKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//content=CodeBlock
		public Assignment getContentAssignment_2() { return cContentAssignment_2; }
		
		//CodeBlock
		public RuleCall getContentCodeBlockParserRuleCall_2_0() { return cContentCodeBlockParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class LocalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.roma.cocktail.xtext.Parser.Local");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLOCALKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cContentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cContentCodeBlockParserRuleCall_2_0 = (RuleCall)cContentAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Local:
		//	'LOCAL' '{' content=CodeBlock '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'LOCAL' '{' content=CodeBlock '}'
		public Group getGroup() { return cGroup; }
		
		//'LOCAL'
		public Keyword getLOCALKeyword_0() { return cLOCALKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//content=CodeBlock
		public Assignment getContentAssignment_2() { return cContentAssignment_2; }
		
		//CodeBlock
		public RuleCall getContentCodeBlockParserRuleCall_2_0() { return cContentCodeBlockParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class BeginElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.roma.cocktail.xtext.Parser.Begin");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBEGINKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cContentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cContentCodeBlockParserRuleCall_2_0 = (RuleCall)cContentAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Begin:
		//	'BEGIN' '{' content=CodeBlock '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'BEGIN' '{' content=CodeBlock '}'
		public Group getGroup() { return cGroup; }
		
		//'BEGIN'
		public Keyword getBEGINKeyword_0() { return cBEGINKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//content=CodeBlock
		public Assignment getContentAssignment_2() { return cContentAssignment_2; }
		
		//CodeBlock
		public RuleCall getContentCodeBlockParserRuleCall_2_0() { return cContentCodeBlockParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class CloseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.roma.cocktail.xtext.Parser.Close");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCLOSEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cContentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cContentCodeBlockParserRuleCall_2_0 = (RuleCall)cContentAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Close:
		//	'CLOSE' '{' content=CodeBlock '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'CLOSE' '{' content=CodeBlock '}'
		public Group getGroup() { return cGroup; }
		
		//'CLOSE'
		public Keyword getCLOSEKeyword_0() { return cCLOSEKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//content=CodeBlock
		public Assignment getContentAssignment_2() { return cContentAssignment_2; }
		
		//CodeBlock
		public RuleCall getContentCodeBlockParserRuleCall_2_0() { return cContentCodeBlockParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class TokensElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.roma.cocktail.xtext.Parser.Tokens");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTOKENKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTokensAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTokensDefinedTokenParserRuleCall_1_0 = (RuleCall)cTokensAssignment_1.eContents().get(0);
		
		//Tokens:
		//	'TOKEN' tokens+=DefinedToken*;
		@Override public ParserRule getRule() { return rule; }
		
		//'TOKEN' tokens+=DefinedToken*
		public Group getGroup() { return cGroup; }
		
		//'TOKEN'
		public Keyword getTOKENKeyword_0() { return cTOKENKeyword_0; }
		
		//tokens+=DefinedToken*
		public Assignment getTokensAssignment_1() { return cTokensAssignment_1; }
		
		//DefinedToken
		public RuleCall getTokensDefinedTokenParserRuleCall_1_0() { return cTokensDefinedTokenParserRuleCall_1_0; }
	}
	public class DefinedTokenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.roma.cocktail.xtext.Parser.DefinedToken");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Alternatives cNameAlternatives_0_0_0 = (Alternatives)cNameAssignment_0_0.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0_0_0 = (RuleCall)cNameAlternatives_0_0_0.eContents().get(0);
		private final RuleCall cNameSTRINGTerminalRuleCall_0_0_0_1 = (RuleCall)cNameAlternatives_0_0_0.eContents().get(1);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cNumberAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cNumberINTTerminalRuleCall_0_1_1_0 = (RuleCall)cNumberAssignment_0_1_1.eContents().get(0);
		private final Group cGroup_0_1_2 = (Group)cGroup_0_1.eContents().get(2);
		private final Keyword cCommaKeyword_0_1_2_0 = (Keyword)cGroup_0_1_2.eContents().get(0);
		private final Assignment cExtraAssignment_0_1_2_1 = (Assignment)cGroup_0_1_2.eContents().get(1);
		private final RuleCall cExtraTokenExtraParserRuleCall_0_1_2_1_0 = (RuleCall)cExtraAssignment_0_1_2_1.eContents().get(0);
		private final Assignment cExtraAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cExtraTokenExtraParserRuleCall_1_0 = (RuleCall)cExtraAssignment_1.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//DefinedToken:
		//	name=(ID | STRING) ('=' number=INT (',' extra=TokenExtra)?) | extra=TokenExtra | WS;
		@Override public ParserRule getRule() { return rule; }
		
		//name=(ID | STRING) ('=' number=INT (',' extra=TokenExtra)?) | extra=TokenExtra | WS
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//name=(ID | STRING) ('=' number=INT (',' extra=TokenExtra)?)
		public Group getGroup_0() { return cGroup_0; }
		
		//name=(ID | STRING)
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }
		
		//(ID | STRING)
		public Alternatives getNameAlternatives_0_0_0() { return cNameAlternatives_0_0_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0_0_0() { return cNameIDTerminalRuleCall_0_0_0_0; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_0_0_0_1() { return cNameSTRINGTerminalRuleCall_0_0_0_1; }
		
		//('=' number=INT (',' extra=TokenExtra)?)
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_0_1_0() { return cEqualsSignKeyword_0_1_0; }
		
		//number=INT
		public Assignment getNumberAssignment_0_1_1() { return cNumberAssignment_0_1_1; }
		
		//INT
		public RuleCall getNumberINTTerminalRuleCall_0_1_1_0() { return cNumberINTTerminalRuleCall_0_1_1_0; }
		
		//(',' extra=TokenExtra)?
		public Group getGroup_0_1_2() { return cGroup_0_1_2; }
		
		//','
		public Keyword getCommaKeyword_0_1_2_0() { return cCommaKeyword_0_1_2_0; }
		
		//extra=TokenExtra
		public Assignment getExtraAssignment_0_1_2_1() { return cExtraAssignment_0_1_2_1; }
		
		//TokenExtra
		public RuleCall getExtraTokenExtraParserRuleCall_0_1_2_1_0() { return cExtraTokenExtraParserRuleCall_0_1_2_1_0; }
		
		//extra=TokenExtra
		public Assignment getExtraAssignment_1() { return cExtraAssignment_1; }
		
		//TokenExtra
		public RuleCall getExtraTokenExtraParserRuleCall_1_0() { return cExtraTokenExtraParserRuleCall_1_0; }
		
		//WS
		public RuleCall getWSTerminalRuleCall_2() { return cWSTerminalRuleCall_2; }
	}
	public class TokenExtraElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.roma.cocktail.xtext.Parser.TokenExtra");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCostAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCostINTTerminalRuleCall_0_0 = (RuleCall)cCostAssignment_0.eContents().get(0);
		private final Keyword cCommaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPresentationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPresentationSTRINGTerminalRuleCall_2_0 = (RuleCall)cPresentationAssignment_2.eContents().get(0);
		
		//TokenExtra:
		//	cost=INT "," presentation=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//cost=INT "," presentation=STRING
		public Group getGroup() { return cGroup; }
		
		//cost=INT
		public Assignment getCostAssignment_0() { return cCostAssignment_0; }
		
		//INT
		public RuleCall getCostINTTerminalRuleCall_0_0() { return cCostINTTerminalRuleCall_0_0; }
		
		//","
		public Keyword getCommaKeyword_1() { return cCommaKeyword_1; }
		
		//presentation=STRING
		public Assignment getPresentationAssignment_2() { return cPresentationAssignment_2; }
		
		//STRING
		public RuleCall getPresentationSTRINGTerminalRuleCall_2_0() { return cPresentationSTRINGTerminalRuleCall_2_0; }
	}
	public class CodeBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.roma.cocktail.xtext.Parser.CodeBlock");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCodeWallParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cCodeBlockParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//CodeBlock:
		//	(CodeWall | '{' CodeBlock '}')*;
		@Override public ParserRule getRule() { return rule; }
		
		//(CodeWall | '{' CodeBlock '}')*
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CodeWall
		public RuleCall getCodeWallParserRuleCall_0() { return cCodeWallParserRuleCall_0; }
		
		//'{' CodeBlock '}'
		public Group getGroup_1() { return cGroup_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }
		
		//CodeBlock
		public RuleCall getCodeBlockParserRuleCall_1_1() { return cCodeBlockParserRuleCall_1_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_2() { return cRightCurlyBracketKeyword_1_2; }
	}
	public class CodeWallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.roma.cocktail.xtext.Parser.CodeWall");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cWSTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final Keyword cPlusSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cHyphenMinusKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cLeftParenthesisKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cAsteriskKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cFullStopKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cSolidusKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cReverseSolidusKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cVerticalLineKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cQuestionMarkKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		private final Keyword cGreaterThanSignKeyword_14 = (Keyword)cAlternatives.eContents().get(14);
		private final Keyword cLessThanSignKeyword_15 = (Keyword)cAlternatives.eContents().get(15);
		private final Keyword cNumberSignKeyword_16 = (Keyword)cAlternatives.eContents().get(16);
		private final Keyword cDollarSignKeyword_17 = (Keyword)cAlternatives.eContents().get(17);
		private final Keyword cPercentSignKeyword_18 = (Keyword)cAlternatives.eContents().get(18);
		private final Keyword cSemicolonKeyword_19 = (Keyword)cAlternatives.eContents().get(19);
		private final Keyword cColonKeyword_20 = (Keyword)cAlternatives.eContents().get(20);
		private final Keyword cExclamationMarkKeyword_21 = (Keyword)cAlternatives.eContents().get(21);
		private final Keyword cEqualsSignKeyword_22 = (Keyword)cAlternatives.eContents().get(22);
		private final Keyword cCommaKeyword_23 = (Keyword)cAlternatives.eContents().get(23);
		
		//CodeWall:
		//	ID | INT | STRING | WS | '+' | '-' | '(' | ')' | '*' | '.' | '/' | '\\' | '|' | '?' | '>' | '<' | '#' | '$' | '%' |
		//	';' | ':' | '!' | '=' | ',';
		@Override public ParserRule getRule() { return rule; }
		
		////(ID|INT|STRING|WS|'+'|'-'|'('|')'|'*'|'.'|'/'|'\\'|'|'|'?'|'>'|'<'|'#'|'$'|'%'|';'|':'|'['|']'|'=')
		//ID | INT | STRING | WS | '+' | '-' | '(' | ')' | '*' | '.' | '/' | '\\' | '|' | '?' | '>' | '<' | '#' | '$' | '%' | ';'
		//| ':' | '!' | '=' | ','
		public Alternatives getAlternatives() { return cAlternatives; }
		
		////(ID|INT|STRING|WS|'+'|'-'|'('|')'|'*'|'.'|'/'|'\\'|'|'|'?'|'>'|'<'|'#'|'$'|'%'|';'|':'|'['|']'|'=')
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_2() { return cSTRINGTerminalRuleCall_2; }
		
		//WS
		public RuleCall getWSTerminalRuleCall_3() { return cWSTerminalRuleCall_3; }
		
		//'+'
		public Keyword getPlusSignKeyword_4() { return cPlusSignKeyword_4; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_5() { return cHyphenMinusKeyword_5; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_6() { return cLeftParenthesisKeyword_6; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
		
		//'*'
		public Keyword getAsteriskKeyword_8() { return cAsteriskKeyword_8; }
		
		//'.'
		public Keyword getFullStopKeyword_9() { return cFullStopKeyword_9; }
		
		//'/'
		public Keyword getSolidusKeyword_10() { return cSolidusKeyword_10; }
		
		//'\\'
		public Keyword getReverseSolidusKeyword_11() { return cReverseSolidusKeyword_11; }
		
		//'|'
		public Keyword getVerticalLineKeyword_12() { return cVerticalLineKeyword_12; }
		
		//'?'
		public Keyword getQuestionMarkKeyword_13() { return cQuestionMarkKeyword_13; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_14() { return cGreaterThanSignKeyword_14; }
		
		//'<'
		public Keyword getLessThanSignKeyword_15() { return cLessThanSignKeyword_15; }
		
		//'#'
		public Keyword getNumberSignKeyword_16() { return cNumberSignKeyword_16; }
		
		//'$'
		public Keyword getDollarSignKeyword_17() { return cDollarSignKeyword_17; }
		
		//'%'
		public Keyword getPercentSignKeyword_18() { return cPercentSignKeyword_18; }
		
		//';'
		public Keyword getSemicolonKeyword_19() { return cSemicolonKeyword_19; }
		
		//':'
		public Keyword getColonKeyword_20() { return cColonKeyword_20; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_21() { return cExclamationMarkKeyword_21; }
		
		//'='
		public Keyword getEqualsSignKeyword_22() { return cEqualsSignKeyword_22; }
		
		//','
		public Keyword getCommaKeyword_23() { return cCommaKeyword_23; }
	}
	public class PrecedenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.roma.cocktail.xtext.Parser.Precedence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPRECKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRowsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRowsPrecedenceRowParserRuleCall_1_0 = (RuleCall)cRowsAssignment_1.eContents().get(0);
		
		//Precedence:
		//	'PREC' rows+=PrecedenceRow*;
		@Override public ParserRule getRule() { return rule; }
		
		//'PREC' rows+=PrecedenceRow*
		public Group getGroup() { return cGroup; }
		
		//'PREC'
		public Keyword getPRECKeyword_0() { return cPRECKeyword_0; }
		
		//rows+=PrecedenceRow*
		public Assignment getRowsAssignment_1() { return cRowsAssignment_1; }
		
		//PrecedenceRow
		public RuleCall getRowsPrecedenceRowParserRuleCall_1_0() { return cRowsPrecedenceRowParserRuleCall_1_0; }
	}
	public class PrecedenceRowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.roma.cocktail.xtext.Parser.PrecedenceRow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypePrecedenceTypeEnumRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cTokensAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTokensDefinedTokenCrossReference_1_0 = (CrossReference)cTokensAssignment_1.eContents().get(0);
		private final RuleCall cTokensDefinedTokenIDTerminalRuleCall_1_0_1 = (RuleCall)cTokensDefinedTokenCrossReference_1_0.eContents().get(1);
		
		//PrecedenceRow:
		//	type=PrecedenceType tokens+=[DefinedToken]*;
		@Override public ParserRule getRule() { return rule; }
		
		//type=PrecedenceType tokens+=[DefinedToken]*
		public Group getGroup() { return cGroup; }
		
		//type=PrecedenceType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//PrecedenceType
		public RuleCall getTypePrecedenceTypeEnumRuleCall_0_0() { return cTypePrecedenceTypeEnumRuleCall_0_0; }
		
		//tokens+=[DefinedToken]*
		public Assignment getTokensAssignment_1() { return cTokensAssignment_1; }
		
		//[DefinedToken]
		public CrossReference getTokensDefinedTokenCrossReference_1_0() { return cTokensDefinedTokenCrossReference_1_0; }
		
		//ID
		public RuleCall getTokensDefinedTokenIDTerminalRuleCall_1_0_1() { return cTokensDefinedTokenIDTerminalRuleCall_1_0_1; }
	}
	public class StartSymbolsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.roma.cocktail.xtext.Parser.StartSymbols");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSTARTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStatesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStatesStartStateParserRuleCall_1_0 = (RuleCall)cStatesAssignment_1.eContents().get(0);
		
		//StartSymbols:
		//	'START' states+=StartState*;
		@Override public ParserRule getRule() { return rule; }
		
		//'START' states+=StartState*
		public Group getGroup() { return cGroup; }
		
		//'START'
		public Keyword getSTARTKeyword_0() { return cSTARTKeyword_0; }
		
		//states+=StartState*
		public Assignment getStatesAssignment_1() { return cStatesAssignment_1; }
		
		//StartState
		public RuleCall getStatesStartStateParserRuleCall_1_0() { return cStatesStartStateParserRuleCall_1_0; }
	}
	public class StartStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.roma.cocktail.xtext.Parser.StartState");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//StartState:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class GrammarRulesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.roma.cocktail.xtext.Parser.GrammarRules");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cRULEKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cRULESKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cRulesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRulesGrammarRuleParserRuleCall_1_0 = (RuleCall)cRulesAssignment_1.eContents().get(0);
		
		//GrammarRules:
		//	('RULE' | 'RULES') rules+=GrammarRule*;
		@Override public ParserRule getRule() { return rule; }
		
		//('RULE' | 'RULES') rules+=GrammarRule*
		public Group getGroup() { return cGroup; }
		
		//('RULE' | 'RULES')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'RULE'
		public Keyword getRULEKeyword_0_0() { return cRULEKeyword_0_0; }
		
		//'RULES'
		public Keyword getRULESKeyword_0_1() { return cRULESKeyword_0_1; }
		
		//rules+=GrammarRule*
		public Assignment getRulesAssignment_1() { return cRulesAssignment_1; }
		
		//GrammarRule
		public RuleCall getRulesGrammarRuleParserRuleCall_1_0() { return cRulesGrammarRuleParserRuleCall_1_0; }
	}
	public class GrammerReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.roma.cocktail.xtext.Parser.GrammerReference");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cGrammarRuleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDefinedTokenParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//GrammerReference:
		//	GrammarRule | DefinedToken;
		@Override public ParserRule getRule() { return rule; }
		
		//GrammarRule | DefinedToken
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//GrammarRule
		public RuleCall getGrammarRuleParserRuleCall_0() { return cGrammarRuleParserRuleCall_0; }
		
		//DefinedToken
		public RuleCall getDefinedTokenParserRuleCall_1() { return cDefinedTokenParserRuleCall_1; }
	}
	public class GrammarRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.roma.cocktail.xtext.Parser.GrammarRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodyRuleBodyParserRuleCall_2_0 = (RuleCall)cBodyAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cVerticalLineKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cBodyAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cBodyRuleBodyParserRuleCall_3_1_0 = (RuleCall)cBodyAssignment_3_1.eContents().get(0);
		private final Keyword cFullStopKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//GrammarRule:
		//	name=ID ':' body+=RuleBody ('|' body+=RuleBody)* '.';
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' body+=RuleBody ('|' body+=RuleBody)* '.'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//body+=RuleBody
		public Assignment getBodyAssignment_2() { return cBodyAssignment_2; }
		
		//RuleBody
		public RuleCall getBodyRuleBodyParserRuleCall_2_0() { return cBodyRuleBodyParserRuleCall_2_0; }
		
		//('|' body+=RuleBody)*
		public Group getGroup_3() { return cGroup_3; }
		
		//'|'
		public Keyword getVerticalLineKeyword_3_0() { return cVerticalLineKeyword_3_0; }
		
		//body+=RuleBody
		public Assignment getBodyAssignment_3_1() { return cBodyAssignment_3_1; }
		
		//RuleBody
		public RuleCall getBodyRuleBodyParserRuleCall_3_1_0() { return cBodyRuleBodyParserRuleCall_3_1_0; }
		
		//'.'
		public Keyword getFullStopKeyword_4() { return cFullStopKeyword_4; }
	}
	public class RuleBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.roma.cocktail.xtext.Parser.RuleBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPartAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPartRulePartParserRuleCall_0_0 = (RuleCall)cPartAssignment_0.eContents().get(0);
		private final Assignment cCodeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCodeRuleCodeParserRuleCall_1_0 = (RuleCall)cCodeAssignment_1.eContents().get(0);
		
		//RuleBody:
		//	part=RulePart code=RuleCode;
		@Override public ParserRule getRule() { return rule; }
		
		//part=RulePart code=RuleCode
		public Group getGroup() { return cGroup; }
		
		//part=RulePart
		public Assignment getPartAssignment_0() { return cPartAssignment_0; }
		
		//RulePart
		public RuleCall getPartRulePartParserRuleCall_0_0() { return cPartRulePartParserRuleCall_0_0; }
		
		//code=RuleCode
		public Assignment getCodeAssignment_1() { return cCodeAssignment_1; }
		
		//RuleCode
		public RuleCall getCodeRuleCodeParserRuleCall_1_0() { return cCodeRuleCodeParserRuleCall_1_0; }
	}
	public class RuleCodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.roma.cocktail.xtext.Parser.RuleCode");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cUnorderedGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cCodeBlockParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cUnorderedGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cCodeBlockParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//RuleCode:
		//	('{' CodeBlock '}')? & ('[' CodeBlock ']')?;
		@Override public ParserRule getRule() { return rule; }
		
		//('{' CodeBlock '}')? & ('[' CodeBlock ']')?
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }
		
		//('{' CodeBlock '}')?
		public Group getGroup_0() { return cGroup_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0_0() { return cLeftCurlyBracketKeyword_0_0; }
		
		//CodeBlock
		public RuleCall getCodeBlockParserRuleCall_0_1() { return cCodeBlockParserRuleCall_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_0_2() { return cRightCurlyBracketKeyword_0_2; }
		
		//('[' CodeBlock ']')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }
		
		//CodeBlock
		public RuleCall getCodeBlockParserRuleCall_1_1() { return cCodeBlockParserRuleCall_1_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }
	}
	public class RuleContentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.roma.cocktail.xtext.Parser.RuleContent");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cRegexAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cRegexSTRINGTerminalRuleCall_0_0 = (RuleCall)cRegexAssignment_0.eContents().get(0);
		private final Assignment cRefAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final CrossReference cRefGrammerReferenceCrossReference_1_0 = (CrossReference)cRefAssignment_1.eContents().get(0);
		private final RuleCall cRefGrammerReferenceIDTerminalRuleCall_1_0_1 = (RuleCall)cRefGrammerReferenceCrossReference_1_0.eContents().get(1);
		
		//RuleContent:
		//	regex=STRING | ref=[GrammerReference];
		@Override public ParserRule getRule() { return rule; }
		
		//regex=STRING | ref=[GrammerReference]
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//regex=STRING
		public Assignment getRegexAssignment_0() { return cRegexAssignment_0; }
		
		//STRING
		public RuleCall getRegexSTRINGTerminalRuleCall_0_0() { return cRegexSTRINGTerminalRuleCall_0_0; }
		
		//ref=[GrammerReference]
		public Assignment getRefAssignment_1() { return cRefAssignment_1; }
		
		//[GrammerReference]
		public CrossReference getRefGrammerReferenceCrossReference_1_0() { return cRefGrammerReferenceCrossReference_1_0; }
		
		//ID
		public RuleCall getRefGrammerReferenceIDTerminalRuleCall_1_0_1() { return cRefGrammerReferenceIDTerminalRuleCall_1_0_1; }
	}
	public class RulePartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.roma.cocktail.xtext.Parser.RulePart");
		private final Assignment cContentAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cContentRuleContentParserRuleCall_0 = (RuleCall)cContentAssignment.eContents().get(0);
		
		//RulePart:
		//	content+=RuleContent*;
		@Override public ParserRule getRule() { return rule; }
		
		//content+=RuleContent*
		public Assignment getContentAssignment() { return cContentAssignment; }
		
		//RuleContent
		public RuleCall getContentRuleContentParserRuleCall_0() { return cContentRuleContentParserRuleCall_0; }
	}
	
	public class PrecedenceTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.roma.cocktail.xtext.Parser.PrecedenceType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNONEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNONENONEKeyword_0_0 = (Keyword)cNONEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLEFTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLEFTLEFTKeyword_1_0 = (Keyword)cLEFTEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cRIGHTEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cRIGHTRIGHTKeyword_2_0 = (Keyword)cRIGHTEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum PrecedenceType:
		//	NONE | LEFT | RIGHT;
		public EnumRule getRule() { return rule; }
		
		//NONE | LEFT | RIGHT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NONE
		public EnumLiteralDeclaration getNONEEnumLiteralDeclaration_0() { return cNONEEnumLiteralDeclaration_0; }
		
		//"NONE"
		public Keyword getNONENONEKeyword_0_0() { return cNONENONEKeyword_0_0; }
		
		//LEFT
		public EnumLiteralDeclaration getLEFTEnumLiteralDeclaration_1() { return cLEFTEnumLiteralDeclaration_1; }
		
		//"LEFT"
		public Keyword getLEFTLEFTKeyword_1_0() { return cLEFTLEFTKeyword_1_0; }
		
		//RIGHT
		public EnumLiteralDeclaration getRIGHTEnumLiteralDeclaration_2() { return cRIGHTEnumLiteralDeclaration_2; }
		
		//"RIGHT"
		public Keyword getRIGHTRIGHTKeyword_2_0() { return cRIGHTRIGHTKeyword_2_0; }
	}
	
	private final ParserModelElements pParserModel;
	private final ScannerNameElements pScannerName;
	private final ParserNameElements pParserName;
	private final ImportElements pImport;
	private final ExportElements pExport;
	private final GlobalElements pGlobal;
	private final LocalElements pLocal;
	private final BeginElements pBegin;
	private final CloseElements pClose;
	private final TokensElements pTokens;
	private final DefinedTokenElements pDefinedToken;
	private final TokenExtraElements pTokenExtra;
	private final CodeBlockElements pCodeBlock;
	private final CodeWallElements pCodeWall;
	private final PrecedenceElements pPrecedence;
	private final PrecedenceRowElements pPrecedenceRow;
	private final PrecedenceTypeElements ePrecedenceType;
	private final StartSymbolsElements pStartSymbols;
	private final StartStateElements pStartState;
	private final GrammarRulesElements pGrammarRules;
	private final GrammerReferenceElements pGrammerReference;
	private final GrammarRuleElements pGrammarRule;
	private final RuleBodyElements pRuleBody;
	private final RuleCodeElements pRuleCode;
	private final RuleContentElements pRuleContent;
	private final RulePartElements pRulePart;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ParserGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pParserModel = new ParserModelElements();
		this.pScannerName = new ScannerNameElements();
		this.pParserName = new ParserNameElements();
		this.pImport = new ImportElements();
		this.pExport = new ExportElements();
		this.pGlobal = new GlobalElements();
		this.pLocal = new LocalElements();
		this.pBegin = new BeginElements();
		this.pClose = new CloseElements();
		this.pTokens = new TokensElements();
		this.pDefinedToken = new DefinedTokenElements();
		this.pTokenExtra = new TokenExtraElements();
		this.pCodeBlock = new CodeBlockElements();
		this.pCodeWall = new CodeWallElements();
		this.pPrecedence = new PrecedenceElements();
		this.pPrecedenceRow = new PrecedenceRowElements();
		this.ePrecedenceType = new PrecedenceTypeElements();
		this.pStartSymbols = new StartSymbolsElements();
		this.pStartState = new StartStateElements();
		this.pGrammarRules = new GrammarRulesElements();
		this.pGrammerReference = new GrammerReferenceElements();
		this.pGrammarRule = new GrammarRuleElements();
		this.pRuleBody = new RuleBodyElements();
		this.pRuleCode = new RuleCodeElements();
		this.pRuleContent = new RuleContentElements();
		this.pRulePart = new RulePartElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.roma.cocktail.xtext.Parser".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//ParserModel:
	//	scanner=ScannerName parser=ParserName & importBlock=Import? & exportBlock=Export? & globalBlock=Global?
	//	& localBlock=Local? & beginBlock=Begin? & closeBlock=Close?
	//	& tokens=Tokens?
	//	& precedenc=Precedence?
	//	& start=StartSymbols?
	//	& rules=GrammarRules?;
	public ParserModelElements getParserModelAccess() {
		return pParserModel;
	}
	
	public ParserRule getParserModelRule() {
		return getParserModelAccess().getRule();
	}
	
	//ScannerName:
	//	'SCANNER' name=ID?;
	public ScannerNameElements getScannerNameAccess() {
		return pScannerName;
	}
	
	public ParserRule getScannerNameRule() {
		return getScannerNameAccess().getRule();
	}
	
	//ParserName:
	//	'PARSER' name=ID?;
	public ParserNameElements getParserNameAccess() {
		return pParserName;
	}
	
	public ParserRule getParserNameRule() {
		return getParserNameAccess().getRule();
	}
	
	//Import:
	//	'IMPORT' '{' content=CodeBlock '}';
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}
	
	//Export:
	//	'EXPORT' '{' content=CodeBlock '}';
	public ExportElements getExportAccess() {
		return pExport;
	}
	
	public ParserRule getExportRule() {
		return getExportAccess().getRule();
	}
	
	//Global:
	//	'GLOBAL' '{' content=CodeBlock '}';
	public GlobalElements getGlobalAccess() {
		return pGlobal;
	}
	
	public ParserRule getGlobalRule() {
		return getGlobalAccess().getRule();
	}
	
	//Local:
	//	'LOCAL' '{' content=CodeBlock '}';
	public LocalElements getLocalAccess() {
		return pLocal;
	}
	
	public ParserRule getLocalRule() {
		return getLocalAccess().getRule();
	}
	
	//Begin:
	//	'BEGIN' '{' content=CodeBlock '}';
	public BeginElements getBeginAccess() {
		return pBegin;
	}
	
	public ParserRule getBeginRule() {
		return getBeginAccess().getRule();
	}
	
	//Close:
	//	'CLOSE' '{' content=CodeBlock '}';
	public CloseElements getCloseAccess() {
		return pClose;
	}
	
	public ParserRule getCloseRule() {
		return getCloseAccess().getRule();
	}
	
	//Tokens:
	//	'TOKEN' tokens+=DefinedToken*;
	public TokensElements getTokensAccess() {
		return pTokens;
	}
	
	public ParserRule getTokensRule() {
		return getTokensAccess().getRule();
	}
	
	//DefinedToken:
	//	name=(ID | STRING) ('=' number=INT (',' extra=TokenExtra)?) | extra=TokenExtra | WS;
	public DefinedTokenElements getDefinedTokenAccess() {
		return pDefinedToken;
	}
	
	public ParserRule getDefinedTokenRule() {
		return getDefinedTokenAccess().getRule();
	}
	
	//TokenExtra:
	//	cost=INT "," presentation=STRING;
	public TokenExtraElements getTokenExtraAccess() {
		return pTokenExtra;
	}
	
	public ParserRule getTokenExtraRule() {
		return getTokenExtraAccess().getRule();
	}
	
	//CodeBlock:
	//	(CodeWall | '{' CodeBlock '}')*;
	public CodeBlockElements getCodeBlockAccess() {
		return pCodeBlock;
	}
	
	public ParserRule getCodeBlockRule() {
		return getCodeBlockAccess().getRule();
	}
	
	//CodeWall:
	//	ID | INT | STRING | WS | '+' | '-' | '(' | ')' | '*' | '.' | '/' | '\\' | '|' | '?' | '>' | '<' | '#' | '$' | '%' |
	//	';' | ':' | '!' | '=' | ',';
	public CodeWallElements getCodeWallAccess() {
		return pCodeWall;
	}
	
	public ParserRule getCodeWallRule() {
		return getCodeWallAccess().getRule();
	}
	
	//Precedence:
	//	'PREC' rows+=PrecedenceRow*;
	public PrecedenceElements getPrecedenceAccess() {
		return pPrecedence;
	}
	
	public ParserRule getPrecedenceRule() {
		return getPrecedenceAccess().getRule();
	}
	
	//PrecedenceRow:
	//	type=PrecedenceType tokens+=[DefinedToken]*;
	public PrecedenceRowElements getPrecedenceRowAccess() {
		return pPrecedenceRow;
	}
	
	public ParserRule getPrecedenceRowRule() {
		return getPrecedenceRowAccess().getRule();
	}
	
	//enum PrecedenceType:
	//	NONE | LEFT | RIGHT;
	public PrecedenceTypeElements getPrecedenceTypeAccess() {
		return ePrecedenceType;
	}
	
	public EnumRule getPrecedenceTypeRule() {
		return getPrecedenceTypeAccess().getRule();
	}
	
	//StartSymbols:
	//	'START' states+=StartState*;
	public StartSymbolsElements getStartSymbolsAccess() {
		return pStartSymbols;
	}
	
	public ParserRule getStartSymbolsRule() {
		return getStartSymbolsAccess().getRule();
	}
	
	//StartState:
	//	name=ID;
	public StartStateElements getStartStateAccess() {
		return pStartState;
	}
	
	public ParserRule getStartStateRule() {
		return getStartStateAccess().getRule();
	}
	
	//GrammarRules:
	//	('RULE' | 'RULES') rules+=GrammarRule*;
	public GrammarRulesElements getGrammarRulesAccess() {
		return pGrammarRules;
	}
	
	public ParserRule getGrammarRulesRule() {
		return getGrammarRulesAccess().getRule();
	}
	
	//GrammerReference:
	//	GrammarRule | DefinedToken;
	public GrammerReferenceElements getGrammerReferenceAccess() {
		return pGrammerReference;
	}
	
	public ParserRule getGrammerReferenceRule() {
		return getGrammerReferenceAccess().getRule();
	}
	
	//GrammarRule:
	//	name=ID ':' body+=RuleBody ('|' body+=RuleBody)* '.';
	public GrammarRuleElements getGrammarRuleAccess() {
		return pGrammarRule;
	}
	
	public ParserRule getGrammarRuleRule() {
		return getGrammarRuleAccess().getRule();
	}
	
	//RuleBody:
	//	part=RulePart code=RuleCode;
	public RuleBodyElements getRuleBodyAccess() {
		return pRuleBody;
	}
	
	public ParserRule getRuleBodyRule() {
		return getRuleBodyAccess().getRule();
	}
	
	//RuleCode:
	//	('{' CodeBlock '}')? & ('[' CodeBlock ']')?;
	public RuleCodeElements getRuleCodeAccess() {
		return pRuleCode;
	}
	
	public ParserRule getRuleCodeRule() {
		return getRuleCodeAccess().getRule();
	}
	
	//RuleContent:
	//	regex=STRING | ref=[GrammerReference];
	public RuleContentElements getRuleContentAccess() {
		return pRuleContent;
	}
	
	public ParserRule getRuleContentRule() {
		return getRuleContentAccess().getRule();
	}
	
	//RulePart:
	//	content+=RuleContent*;
	public RulePartElements getRulePartAccess() {
		return pRulePart;
	}
	
	public ParserRule getRulePartRule() {
		return getRulePartAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
