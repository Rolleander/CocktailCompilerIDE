/*
 * generated by Xtext 2.9.1
 */
package de.roma.cocktail.xtext.ide.contentassist.antlr;

import com.google.inject.Inject;
import de.roma.cocktail.xtext.ide.contentassist.antlr.internal.InternalAstParser;
import de.roma.cocktail.xtext.services.AstGrammarAccess;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

public class AstParser extends AbstractContentAssistParser {

	@Inject
	private AstGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalAstParser createParser() {
		InternalAstParser result = new InternalAstParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getModuleNameAccess().getAlternatives(), "rule__ModuleName__Alternatives");
					put(grammarAccess.getTreeAccess().getSubUnitNameAlternatives_3_0_0(), "rule__Tree__SubUnitNameAlternatives_3_0_0");
					put(grammarAccess.getDeclareNodeAccess().getTypeAlternatives_1_0(), "rule__DeclareNode__TypeAlternatives_1_0");
					put(grammarAccess.getNodePartAccess().getAlternatives(), "rule__NodePart__Alternatives");
					put(grammarAccess.getNodeAttributeAccess().getAlternatives_3(), "rule__NodeAttribute__Alternatives_3");
					put(grammarAccess.getNodeNameAccess().getNameAlternatives_0(), "rule__NodeName__NameAlternatives_0");
					put(grammarAccess.getNodeTypeAccess().getAlternatives(), "rule__NodeType__Alternatives");
					put(grammarAccess.getCodeBlockAccess().getAlternatives(), "rule__CodeBlock__Alternatives");
					put(grammarAccess.getCodeBlockAccess().getWallAlternatives_0_0(), "rule__CodeBlock__WallAlternatives_0_0");
					put(grammarAccess.getCodeWallAccess().getAlternatives(), "rule__CodeWall__Alternatives");
					put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
					put(grammarAccess.getModulesAccess().getGroup(), "rule__Modules__Group__0");
					put(grammarAccess.getSpecificationAccess().getGroup(), "rule__Specification__Group__0");
					put(grammarAccess.getTreeAccess().getGroup(), "rule__Tree__Group__0");
					put(grammarAccess.getTreeAccess().getGroup_2(), "rule__Tree__Group_2__0");
					put(grammarAccess.getTreeAccess().getGroup_3(), "rule__Tree__Group_3__0");
					put(grammarAccess.getImportAccess().getGroup(), "rule__Import__Group__0");
					put(grammarAccess.getExportAccess().getGroup(), "rule__Export__Group__0");
					put(grammarAccess.getGlobalAccess().getGroup(), "rule__Global__Group__0");
					put(grammarAccess.getLocalAccess().getGroup(), "rule__Local__Group__0");
					put(grammarAccess.getBeginAccess().getGroup(), "rule__Begin__Group__0");
					put(grammarAccess.getCloseAccess().getGroup(), "rule__Close__Group__0");
					put(grammarAccess.getPropertiesAccess().getGroup(), "rule__Properties__Group__0");
					put(grammarAccess.getDeclareAccess().getGroup(), "rule__Declare__Group__0");
					put(grammarAccess.getDeclareNodeAccess().getGroup(), "rule__DeclareNode__Group__0");
					put(grammarAccess.getRuleAccess().getGroup(), "rule__Rule__Group__0");
					put(grammarAccess.getRootNodeAccess().getGroup(), "rule__RootNode__Group__0");
					put(grammarAccess.getBaseTypesAccess().getGroup(), "rule__BaseTypes__Group__0");
					put(grammarAccess.getExtensionsAccess().getGroup(), "rule__Extensions__Group__0");
					put(grammarAccess.getNodePartAccess().getGroup_0(), "rule__NodePart__Group_0__0");
					put(grammarAccess.getChildNodeAccess().getGroup(), "rule__ChildNode__Group__0");
					put(grammarAccess.getChildNodeAccess().getGroup_0(), "rule__ChildNode__Group_0__0");
					put(grammarAccess.getNodeAttributeAccess().getGroup(), "rule__NodeAttribute__Group__0");
					put(grammarAccess.getNodeAttributeAccess().getGroup_2(), "rule__NodeAttribute__Group_2__0");
					put(grammarAccess.getNodeAttributeAccess().getGroup_3_1(), "rule__NodeAttribute__Group_3_1__0");
					put(grammarAccess.getCodeBlockAccess().getGroup_1(), "rule__CodeBlock__Group_1__0");
					put(grammarAccess.getModelAccess().getSepcificationAssignment_0(), "rule__Model__SepcificationAssignment_0");
					put(grammarAccess.getModelAccess().getModulesAssignment_1(), "rule__Model__ModulesAssignment_1");
					put(grammarAccess.getModuleNameAccess().getNameAssignment_0(), "rule__ModuleName__NameAssignment_0");
					put(grammarAccess.getModulesAccess().getModuleNameAssignment_1(), "rule__Modules__ModuleNameAssignment_1");
					put(grammarAccess.getModulesAccess().getSpecificationAssignment_2(), "rule__Modules__SpecificationAssignment_2");
					put(grammarAccess.getModulesAccess().getModuleNameEndAssignment_4(), "rule__Modules__ModuleNameEndAssignment_4");
					put(grammarAccess.getSpecificationAccess().getTreeAssignment_0(), "rule__Specification__TreeAssignment_0");
					put(grammarAccess.getSpecificationAccess().getCodeAssignment_1(), "rule__Specification__CodeAssignment_1");
					put(grammarAccess.getSpecificationAccess().getPropertiesAssignment_2(), "rule__Specification__PropertiesAssignment_2");
					put(grammarAccess.getSpecificationAccess().getDeclareAssignment_3(), "rule__Specification__DeclareAssignment_3");
					put(grammarAccess.getSpecificationAccess().getRulesAssignment_4(), "rule__Specification__RulesAssignment_4");
					put(grammarAccess.getCodesAccess().getImpAssignment_0(), "rule__Codes__ImpAssignment_0");
					put(grammarAccess.getCodesAccess().getExpAssignment_1(), "rule__Codes__ExpAssignment_1");
					put(grammarAccess.getCodesAccess().getGloAssignment_2(), "rule__Codes__GloAssignment_2");
					put(grammarAccess.getCodesAccess().getLocAssignment_3(), "rule__Codes__LocAssignment_3");
					put(grammarAccess.getCodesAccess().getBegAssignment_4(), "rule__Codes__BegAssignment_4");
					put(grammarAccess.getCodesAccess().getCloAssignment_5(), "rule__Codes__CloAssignment_5");
					put(grammarAccess.getTreeAccess().getNameAssignment_1(), "rule__Tree__NameAssignment_1");
					put(grammarAccess.getTreeAccess().getPrefixAssignment_2_1(), "rule__Tree__PrefixAssignment_2_1");
					put(grammarAccess.getTreeAccess().getSubUnitNameAssignment_3_0(), "rule__Tree__SubUnitNameAssignment_3_0");
					put(grammarAccess.getTreeAccess().getSubUnitsAssignment_3_1(), "rule__Tree__SubUnitsAssignment_3_1");
					put(grammarAccess.getImportAccess().getCodeAssignment_2(), "rule__Import__CodeAssignment_2");
					put(grammarAccess.getExportAccess().getCodeAssignment_2(), "rule__Export__CodeAssignment_2");
					put(grammarAccess.getGlobalAccess().getCodeAssignment_2(), "rule__Global__CodeAssignment_2");
					put(grammarAccess.getLocalAccess().getCodeAssignment_2(), "rule__Local__CodeAssignment_2");
					put(grammarAccess.getBeginAccess().getCodeAssignment_2(), "rule__Begin__CodeAssignment_2");
					put(grammarAccess.getCloseAccess().getCodeAssignment_2(), "rule__Close__CodeAssignment_2");
					put(grammarAccess.getPropertiesAccess().getPropertyAssignment_1(), "rule__Properties__PropertyAssignment_1");
					put(grammarAccess.getPropertyListAccess().getPropsAssignment_0(), "rule__PropertyList__PropsAssignment_0");
					put(grammarAccess.getPropertyListAccess().getPropsAssignment_1(), "rule__PropertyList__PropsAssignment_1");
					put(grammarAccess.getPropertyListAccess().getPropsAssignment_2(), "rule__PropertyList__PropsAssignment_2");
					put(grammarAccess.getPropertyListAccess().getPropsAssignment_3(), "rule__PropertyList__PropsAssignment_3");
					put(grammarAccess.getPropertyListAccess().getPropsAssignment_4(), "rule__PropertyList__PropsAssignment_4");
					put(grammarAccess.getPropertyListAccess().getPropsAssignment_5(), "rule__PropertyList__PropsAssignment_5");
					put(grammarAccess.getPropertyListAccess().getPropsAssignment_6(), "rule__PropertyList__PropsAssignment_6");
					put(grammarAccess.getPropertyListAccess().getPropsAssignment_7(), "rule__PropertyList__PropsAssignment_7");
					put(grammarAccess.getNodePropertyListAccess().getPropsAssignment_0(), "rule__NodePropertyList__PropsAssignment_0");
					put(grammarAccess.getNodePropertyListAccess().getPropsAssignment_1(), "rule__NodePropertyList__PropsAssignment_1");
					put(grammarAccess.getNodePropertyListAccess().getPropsAssignment_2(), "rule__NodePropertyList__PropsAssignment_2");
					put(grammarAccess.getNodePropertyListAccess().getPropsAssignment_3(), "rule__NodePropertyList__PropsAssignment_3");
					put(grammarAccess.getNodePropertyListAccess().getPropsAssignment_4(), "rule__NodePropertyList__PropsAssignment_4");
					put(grammarAccess.getNodePropertyListAccess().getPropsAssignment_5(), "rule__NodePropertyList__PropsAssignment_5");
					put(grammarAccess.getNodePropertyListAccess().getPropsAssignment_6(), "rule__NodePropertyList__PropsAssignment_6");
					put(grammarAccess.getNodePropertyListAccess().getPropsAssignment_7(), "rule__NodePropertyList__PropsAssignment_7");
					put(grammarAccess.getNodePropertyListAccess().getPropsAssignment_8(), "rule__NodePropertyList__PropsAssignment_8");
					put(grammarAccess.getNodePropertyListAccess().getPropsAssignment_9(), "rule__NodePropertyList__PropsAssignment_9");
					put(grammarAccess.getNodePropertyListAccess().getPropsAssignment_10(), "rule__NodePropertyList__PropsAssignment_10");
					put(grammarAccess.getNodePropertyListAccess().getPropsAssignment_11(), "rule__NodePropertyList__PropsAssignment_11");
					put(grammarAccess.getNodePropertyListAccess().getPropsAssignment_12(), "rule__NodePropertyList__PropsAssignment_12");
					put(grammarAccess.getDeclareAccess().getNodesAssignment_1(), "rule__Declare__NodesAssignment_1");
					put(grammarAccess.getDeclareNodeAccess().getNamesAssignment_0(), "rule__DeclareNode__NamesAssignment_0");
					put(grammarAccess.getDeclareNodeAccess().getTypeAssignment_1(), "rule__DeclareNode__TypeAssignment_1");
					put(grammarAccess.getDeclareNodeAccess().getPartAssignment_2(), "rule__DeclareNode__PartAssignment_2");
					put(grammarAccess.getRuleAccess().getNodesAssignment_1(), "rule__Rule__NodesAssignment_1");
					put(grammarAccess.getRootNodeAccess().getNameAssignment_0(), "rule__RootNode__NameAssignment_0");
					put(grammarAccess.getRootNodeAccess().getBaseTypesAssignment_1(), "rule__RootNode__BaseTypesAssignment_1");
					put(grammarAccess.getRootNodeAccess().getTypeAssignment_2(), "rule__RootNode__TypeAssignment_2");
					put(grammarAccess.getRootNodeAccess().getPartAssignment_3(), "rule__RootNode__PartAssignment_3");
					put(grammarAccess.getRootNodeAccess().getExtensionAssignment_4(), "rule__RootNode__ExtensionAssignment_4");
					put(grammarAccess.getBaseTypesAccess().getNamesAssignment_1(), "rule__BaseTypes__NamesAssignment_1");
					put(grammarAccess.getExtensionsAccess().getNodesAssignment_1(), "rule__Extensions__NodesAssignment_1");
					put(grammarAccess.getNodePartAccess().getChildAssignment_0_0(), "rule__NodePart__ChildAssignment_0_0");
					put(grammarAccess.getNodePartAccess().getPropertiesAssignment_0_1(), "rule__NodePart__PropertiesAssignment_0_1");
					put(grammarAccess.getNodePartAccess().getAttributeAssignment_1(), "rule__NodePart__AttributeAssignment_1");
					put(grammarAccess.getChildNodeAccess().getSelectorAssignment_0_0(), "rule__ChildNode__SelectorAssignment_0_0");
					put(grammarAccess.getChildNodeAccess().getTypeAssignment_1(), "rule__ChildNode__TypeAssignment_1");
					put(grammarAccess.getNodeAttributeAccess().getAttributeAssignment_1(), "rule__NodeAttribute__AttributeAssignment_1");
					put(grammarAccess.getNodeAttributeAccess().getTypeAssignment_2_1(), "rule__NodeAttribute__TypeAssignment_2_1");
					put(grammarAccess.getNodeAttributeAccess().getPropertiesAssignment_3_0(), "rule__NodeAttribute__PropertiesAssignment_3_0");
					put(grammarAccess.getNodeAttributeAccess().getExpressionAssignment_3_1_1(), "rule__NodeAttribute__ExpressionAssignment_3_1_1");
					put(grammarAccess.getNodeNameAccess().getNameAssignment(), "rule__NodeName__NameAssignment");
					put(grammarAccess.getCodeBlockAccess().getWallAssignment_0(), "rule__CodeBlock__WallAssignment_0");
					put(grammarAccess.getCodeBlockAccess().getBlockAssignment_1_1(), "rule__CodeBlock__BlockAssignment_1_1");
					put(grammarAccess.getTargetCodeExpressionAccess().getCodeAssignment(), "rule__TargetCodeExpression__CodeAssignment");
					put(grammarAccess.getCodesAccess().getUnorderedGroup(), "rule__Codes__UnorderedGroup");
					put(grammarAccess.getPropertyListAccess().getUnorderedGroup(), "rule__PropertyList__UnorderedGroup");
					put(grammarAccess.getNodePropertyListAccess().getUnorderedGroup(), "rule__NodePropertyList__UnorderedGroup");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalAstParser typedParser = (InternalAstParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public AstGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(AstGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
