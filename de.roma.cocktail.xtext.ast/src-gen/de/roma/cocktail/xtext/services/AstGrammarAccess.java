/*
 * generated by Xtext 2.9.1
 */
package de.roma.cocktail.xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.UnorderedGroup;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class AstGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.roma.cocktail.xtext.Ast.Model");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Assignment cModuleAssignment_0 = (Assignment)cUnorderedGroup.eContents().get(0);
		private final RuleCall cModuleModuleParserRuleCall_0_0 = (RuleCall)cModuleAssignment_0.eContents().get(0);
		private final Assignment cTreeAssignment_1 = (Assignment)cUnorderedGroup.eContents().get(1);
		private final RuleCall cTreeTreeParserRuleCall_1_0 = (RuleCall)cTreeAssignment_1.eContents().get(0);
		private final Assignment cImpAssignment_2 = (Assignment)cUnorderedGroup.eContents().get(2);
		private final RuleCall cImpImportParserRuleCall_2_0 = (RuleCall)cImpAssignment_2.eContents().get(0);
		private final Assignment cExpAssignment_3 = (Assignment)cUnorderedGroup.eContents().get(3);
		private final RuleCall cExpExportParserRuleCall_3_0 = (RuleCall)cExpAssignment_3.eContents().get(0);
		private final Assignment cGloAssignment_4 = (Assignment)cUnorderedGroup.eContents().get(4);
		private final RuleCall cGloGlobalParserRuleCall_4_0 = (RuleCall)cGloAssignment_4.eContents().get(0);
		private final Assignment cLocAssignment_5 = (Assignment)cUnorderedGroup.eContents().get(5);
		private final RuleCall cLocLocalParserRuleCall_5_0 = (RuleCall)cLocAssignment_5.eContents().get(0);
		private final Assignment cBegAssignment_6 = (Assignment)cUnorderedGroup.eContents().get(6);
		private final RuleCall cBegBeginParserRuleCall_6_0 = (RuleCall)cBegAssignment_6.eContents().get(0);
		private final Assignment cCloAssignment_7 = (Assignment)cUnorderedGroup.eContents().get(7);
		private final RuleCall cCloCloseParserRuleCall_7_0 = (RuleCall)cCloAssignment_7.eContents().get(0);
		private final Assignment cProAssignment_8 = (Assignment)cUnorderedGroup.eContents().get(8);
		private final RuleCall cProPropertiesParserRuleCall_8_0 = (RuleCall)cProAssignment_8.eContents().get(0);
		private final Assignment cRulAssignment_9 = (Assignment)cUnorderedGroup.eContents().get(9);
		private final RuleCall cRulRuleParserRuleCall_9_0 = (RuleCall)cRulAssignment_9.eContents().get(0);
		private final Assignment cDecAssignment_10 = (Assignment)cUnorderedGroup.eContents().get(10);
		private final RuleCall cDecDeclareParserRuleCall_10_0 = (RuleCall)cDecAssignment_10.eContents().get(0);
		
		//Model:
		//	module=Module
		//	& tree=Tree?
		//	& imp=Import?
		//	& exp=Export?
		//	& glo=Global?
		//	& loc=Local?
		//	& beg=Begin?
		//	& clo=Close?
		//	& pro=Properties?
		//	& rul=Rule
		//	& dec=Declare?;
		@Override public ParserRule getRule() { return rule; }
		
		//module=Module & tree=Tree? & imp=Import? & exp=Export? & glo=Global? & loc=Local? & beg=Begin? & clo=Close? &
		//pro=Properties? & rul=Rule & dec=Declare?
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }
		
		//module=Module
		public Assignment getModuleAssignment_0() { return cModuleAssignment_0; }
		
		//Module
		public RuleCall getModuleModuleParserRuleCall_0_0() { return cModuleModuleParserRuleCall_0_0; }
		
		//tree=Tree?
		public Assignment getTreeAssignment_1() { return cTreeAssignment_1; }
		
		//Tree
		public RuleCall getTreeTreeParserRuleCall_1_0() { return cTreeTreeParserRuleCall_1_0; }
		
		//imp=Import?
		public Assignment getImpAssignment_2() { return cImpAssignment_2; }
		
		//Import
		public RuleCall getImpImportParserRuleCall_2_0() { return cImpImportParserRuleCall_2_0; }
		
		//exp=Export?
		public Assignment getExpAssignment_3() { return cExpAssignment_3; }
		
		//Export
		public RuleCall getExpExportParserRuleCall_3_0() { return cExpExportParserRuleCall_3_0; }
		
		//glo=Global?
		public Assignment getGloAssignment_4() { return cGloAssignment_4; }
		
		//Global
		public RuleCall getGloGlobalParserRuleCall_4_0() { return cGloGlobalParserRuleCall_4_0; }
		
		//loc=Local?
		public Assignment getLocAssignment_5() { return cLocAssignment_5; }
		
		//Local
		public RuleCall getLocLocalParserRuleCall_5_0() { return cLocLocalParserRuleCall_5_0; }
		
		//beg=Begin?
		public Assignment getBegAssignment_6() { return cBegAssignment_6; }
		
		//Begin
		public RuleCall getBegBeginParserRuleCall_6_0() { return cBegBeginParserRuleCall_6_0; }
		
		//clo=Close?
		public Assignment getCloAssignment_7() { return cCloAssignment_7; }
		
		//Close
		public RuleCall getCloCloseParserRuleCall_7_0() { return cCloCloseParserRuleCall_7_0; }
		
		//pro=Properties?
		public Assignment getProAssignment_8() { return cProAssignment_8; }
		
		//Properties
		public RuleCall getProPropertiesParserRuleCall_8_0() { return cProPropertiesParserRuleCall_8_0; }
		
		//rul=Rule
		public Assignment getRulAssignment_9() { return cRulAssignment_9; }
		
		//Rule
		public RuleCall getRulRuleParserRuleCall_9_0() { return cRulRuleParserRuleCall_9_0; }
		
		//dec=Declare?
		public Assignment getDecAssignment_10() { return cDecAssignment_10; }
		
		//Declare
		public RuleCall getDecDeclareParserRuleCall_10_0() { return cDecDeclareParserRuleCall_10_0; }
	}
	public class ModuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.roma.cocktail.xtext.Ast.Module");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMODULEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Module:
		//	'MODULE' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'MODULE' name=ID
		public Group getGroup() { return cGroup; }
		
		//'MODULE'
		public Keyword getMODULEKeyword_0() { return cMODULEKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class TreeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.roma.cocktail.xtext.Ast.Tree");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTREEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Tree:
		//	'TREE' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'TREE' name=ID
		public Group getGroup() { return cGroup; }
		
		//'TREE'
		public Keyword getTREEKeyword_0() { return cTREEKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.roma.cocktail.xtext.Ast.Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIMPORTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCodeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCodeCodeBlockParserRuleCall_2_0 = (RuleCall)cCodeAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Import:
		//	'IMPORT' '{' code=CodeBlock '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'IMPORT' '{' code=CodeBlock '}'
		public Group getGroup() { return cGroup; }
		
		//'IMPORT'
		public Keyword getIMPORTKeyword_0() { return cIMPORTKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//code=CodeBlock
		public Assignment getCodeAssignment_2() { return cCodeAssignment_2; }
		
		//CodeBlock
		public RuleCall getCodeCodeBlockParserRuleCall_2_0() { return cCodeCodeBlockParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class ExportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.roma.cocktail.xtext.Ast.Export");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEXPORTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCodeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCodeCodeBlockParserRuleCall_2_0 = (RuleCall)cCodeAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Export:
		//	'EXPORT' '{' code=CodeBlock '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'EXPORT' '{' code=CodeBlock '}'
		public Group getGroup() { return cGroup; }
		
		//'EXPORT'
		public Keyword getEXPORTKeyword_0() { return cEXPORTKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//code=CodeBlock
		public Assignment getCodeAssignment_2() { return cCodeAssignment_2; }
		
		//CodeBlock
		public RuleCall getCodeCodeBlockParserRuleCall_2_0() { return cCodeCodeBlockParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class GlobalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.roma.cocktail.xtext.Ast.Global");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGLOBALKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCodeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCodeCodeBlockParserRuleCall_2_0 = (RuleCall)cCodeAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Global:
		//	'GLOBAL' '{' code=CodeBlock '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'GLOBAL' '{' code=CodeBlock '}'
		public Group getGroup() { return cGroup; }
		
		//'GLOBAL'
		public Keyword getGLOBALKeyword_0() { return cGLOBALKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//code=CodeBlock
		public Assignment getCodeAssignment_2() { return cCodeAssignment_2; }
		
		//CodeBlock
		public RuleCall getCodeCodeBlockParserRuleCall_2_0() { return cCodeCodeBlockParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class LocalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.roma.cocktail.xtext.Ast.Local");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLOCALKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCodeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCodeCodeBlockParserRuleCall_2_0 = (RuleCall)cCodeAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Local:
		//	'LOCAL' '{' code=CodeBlock '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'LOCAL' '{' code=CodeBlock '}'
		public Group getGroup() { return cGroup; }
		
		//'LOCAL'
		public Keyword getLOCALKeyword_0() { return cLOCALKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//code=CodeBlock
		public Assignment getCodeAssignment_2() { return cCodeAssignment_2; }
		
		//CodeBlock
		public RuleCall getCodeCodeBlockParserRuleCall_2_0() { return cCodeCodeBlockParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class BeginElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.roma.cocktail.xtext.Ast.Begin");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBEGINKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCodeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCodeCodeBlockParserRuleCall_2_0 = (RuleCall)cCodeAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Begin:
		//	'BEGIN' '{' code=CodeBlock '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'BEGIN' '{' code=CodeBlock '}'
		public Group getGroup() { return cGroup; }
		
		//'BEGIN'
		public Keyword getBEGINKeyword_0() { return cBEGINKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//code=CodeBlock
		public Assignment getCodeAssignment_2() { return cCodeAssignment_2; }
		
		//CodeBlock
		public RuleCall getCodeCodeBlockParserRuleCall_2_0() { return cCodeCodeBlockParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class CloseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.roma.cocktail.xtext.Ast.Close");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCLOSEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCodeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCodeCodeBlockParserRuleCall_2_0 = (RuleCall)cCodeAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Close:
		//	'CLOSE' '{' code=CodeBlock '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'CLOSE' '{' code=CodeBlock '}'
		public Group getGroup() { return cGroup; }
		
		//'CLOSE'
		public Keyword getCLOSEKeyword_0() { return cCLOSEKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//code=CodeBlock
		public Assignment getCodeAssignment_2() { return cCodeAssignment_2; }
		
		//CodeBlock
		public RuleCall getCodeCodeBlockParserRuleCall_2_0() { return cCodeCodeBlockParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class PropertiesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.roma.cocktail.xtext.Ast.Properties");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPROPERTYKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPropertyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPropertyPropertyListParserRuleCall_1_0 = (RuleCall)cPropertyAssignment_1.eContents().get(0);
		
		//Properties:
		//	'PROPERTY' property=PropertyList;
		@Override public ParserRule getRule() { return rule; }
		
		//'PROPERTY' property=PropertyList
		public Group getGroup() { return cGroup; }
		
		//'PROPERTY'
		public Keyword getPROPERTYKeyword_0() { return cPROPERTYKeyword_0; }
		
		//property=PropertyList
		public Assignment getPropertyAssignment_1() { return cPropertyAssignment_1; }
		
		//PropertyList
		public RuleCall getPropertyPropertyListParserRuleCall_1_0() { return cPropertyPropertyListParserRuleCall_1_0; }
	}
	public class PropertyListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.roma.cocktail.xtext.Ast.PropertyList");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Assignment cPropsAssignment_0 = (Assignment)cUnorderedGroup.eContents().get(0);
		private final Keyword cPropsINPUTKeyword_0_0 = (Keyword)cPropsAssignment_0.eContents().get(0);
		private final Assignment cPropsAssignment_1 = (Assignment)cUnorderedGroup.eContents().get(1);
		private final Keyword cPropsOUTPUTKeyword_1_0 = (Keyword)cPropsAssignment_1.eContents().get(0);
		private final Assignment cPropsAssignment_2 = (Assignment)cUnorderedGroup.eContents().get(2);
		private final Keyword cPropsSYNTHESIZEDKeyword_2_0 = (Keyword)cPropsAssignment_2.eContents().get(0);
		private final Assignment cPropsAssignment_3 = (Assignment)cUnorderedGroup.eContents().get(3);
		private final Keyword cPropsINHERITEDKeyword_3_0 = (Keyword)cPropsAssignment_3.eContents().get(0);
		private final Assignment cPropsAssignment_4 = (Assignment)cUnorderedGroup.eContents().get(4);
		private final Keyword cPropsTHREADKeyword_4_0 = (Keyword)cPropsAssignment_4.eContents().get(0);
		private final Assignment cPropsAssignment_5 = (Assignment)cUnorderedGroup.eContents().get(5);
		private final Keyword cPropsREVERSEKeyword_5_0 = (Keyword)cPropsAssignment_5.eContents().get(0);
		private final Assignment cPropsAssignment_6 = (Assignment)cUnorderedGroup.eContents().get(6);
		private final Keyword cPropsIGNOREKeyword_6_0 = (Keyword)cPropsAssignment_6.eContents().get(0);
		private final Assignment cPropsAssignment_7 = (Assignment)cUnorderedGroup.eContents().get(7);
		private final Keyword cPropsVIRTUALKeyword_7_0 = (Keyword)cPropsAssignment_7.eContents().get(0);
		
		//PropertyList:
		//	props+='INPUT'? & props+='OUTPUT'? & props+='SYNTHESIZED'? & props+='INHERITED'? & props+='THREAD'? &
		//	props+='REVERSE'? & props+='IGNORE'? & props+='VIRTUAL'?;
		@Override public ParserRule getRule() { return rule; }
		
		//props+='INPUT'? & props+='OUTPUT'? & props+='SYNTHESIZED'? & props+='INHERITED'? & props+='THREAD'? & props+='REVERSE'?
		//& props+='IGNORE'? & props+='VIRTUAL'?
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }
		
		//props+='INPUT'?
		public Assignment getPropsAssignment_0() { return cPropsAssignment_0; }
		
		//'INPUT'
		public Keyword getPropsINPUTKeyword_0_0() { return cPropsINPUTKeyword_0_0; }
		
		//props+='OUTPUT'?
		public Assignment getPropsAssignment_1() { return cPropsAssignment_1; }
		
		//'OUTPUT'
		public Keyword getPropsOUTPUTKeyword_1_0() { return cPropsOUTPUTKeyword_1_0; }
		
		//props+='SYNTHESIZED'?
		public Assignment getPropsAssignment_2() { return cPropsAssignment_2; }
		
		//'SYNTHESIZED'
		public Keyword getPropsSYNTHESIZEDKeyword_2_0() { return cPropsSYNTHESIZEDKeyword_2_0; }
		
		//props+='INHERITED'?
		public Assignment getPropsAssignment_3() { return cPropsAssignment_3; }
		
		//'INHERITED'
		public Keyword getPropsINHERITEDKeyword_3_0() { return cPropsINHERITEDKeyword_3_0; }
		
		//props+='THREAD'?
		public Assignment getPropsAssignment_4() { return cPropsAssignment_4; }
		
		//'THREAD'
		public Keyword getPropsTHREADKeyword_4_0() { return cPropsTHREADKeyword_4_0; }
		
		//props+='REVERSE'?
		public Assignment getPropsAssignment_5() { return cPropsAssignment_5; }
		
		//'REVERSE'
		public Keyword getPropsREVERSEKeyword_5_0() { return cPropsREVERSEKeyword_5_0; }
		
		//props+='IGNORE'?
		public Assignment getPropsAssignment_6() { return cPropsAssignment_6; }
		
		//'IGNORE'
		public Keyword getPropsIGNOREKeyword_6_0() { return cPropsIGNOREKeyword_6_0; }
		
		//props+='VIRTUAL'?
		public Assignment getPropsAssignment_7() { return cPropsAssignment_7; }
		
		//'VIRTUAL'
		public Keyword getPropsVIRTUALKeyword_7_0() { return cPropsVIRTUALKeyword_7_0; }
	}
	public class DeclareElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.roma.cocktail.xtext.Ast.Declare");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDECLAREKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNodesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNodesDeclareNodeParserRuleCall_1_0 = (RuleCall)cNodesAssignment_1.eContents().get(0);
		
		//Declare:
		//	'DECLARE' nodes+=DeclareNode*;
		@Override public ParserRule getRule() { return rule; }
		
		//'DECLARE' nodes+=DeclareNode*
		public Group getGroup() { return cGroup; }
		
		//'DECLARE'
		public Keyword getDECLAREKeyword_0() { return cDECLAREKeyword_0; }
		
		//nodes+=DeclareNode*
		public Assignment getNodesAssignment_1() { return cNodesAssignment_1; }
		
		//DeclareNode
		public RuleCall getNodesDeclareNodeParserRuleCall_1_0() { return cNodesDeclareNodeParserRuleCall_1_0; }
	}
	public class DeclareNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.roma.cocktail.xtext.Ast.DeclareNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNamesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNamesNodeNameParserRuleCall_0_0 = (RuleCall)cNamesAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cTypeAlternatives_1_0 = (Alternatives)cTypeAssignment_1.eContents().get(0);
		private final Keyword cTypeEqualsSignKeyword_1_0_0 = (Keyword)cTypeAlternatives_1_0.eContents().get(0);
		private final Keyword cTypeColonKeyword_1_0_1 = (Keyword)cTypeAlternatives_1_0.eContents().get(1);
		private final Assignment cPartAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPartNodePartParserRuleCall_2_0 = (RuleCall)cPartAssignment_2.eContents().get(0);
		private final Keyword cFullStopKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DeclareNode:
		//	names+=NodeName+ type=("=" | ":") part+=NodePart* ".";
		@Override public ParserRule getRule() { return rule; }
		
		//names+=NodeName+ type=("=" | ":") part+=NodePart* "."
		public Group getGroup() { return cGroup; }
		
		//names+=NodeName+
		public Assignment getNamesAssignment_0() { return cNamesAssignment_0; }
		
		//NodeName
		public RuleCall getNamesNodeNameParserRuleCall_0_0() { return cNamesNodeNameParserRuleCall_0_0; }
		
		//type=("=" | ":")
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//("=" | ":")
		public Alternatives getTypeAlternatives_1_0() { return cTypeAlternatives_1_0; }
		
		//"="
		public Keyword getTypeEqualsSignKeyword_1_0_0() { return cTypeEqualsSignKeyword_1_0_0; }
		
		//":"
		public Keyword getTypeColonKeyword_1_0_1() { return cTypeColonKeyword_1_0_1; }
		
		//part+=NodePart*
		public Assignment getPartAssignment_2() { return cPartAssignment_2; }
		
		//NodePart
		public RuleCall getPartNodePartParserRuleCall_2_0() { return cPartNodePartParserRuleCall_2_0; }
		
		//"."
		public Keyword getFullStopKeyword_3() { return cFullStopKeyword_3; }
	}
	public class RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.roma.cocktail.xtext.Ast.Rule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRULEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNodesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNodesRootNodeParserRuleCall_1_0 = (RuleCall)cNodesAssignment_1.eContents().get(0);
		
		//Rule:
		//	'RULE' nodes+=RootNode*;
		@Override public ParserRule getRule() { return rule; }
		
		//'RULE' nodes+=RootNode*
		public Group getGroup() { return cGroup; }
		
		//'RULE'
		public Keyword getRULEKeyword_0() { return cRULEKeyword_0; }
		
		//nodes+=RootNode*
		public Assignment getNodesAssignment_1() { return cNodesAssignment_1; }
		
		//RootNode
		public RuleCall getNodesRootNodeParserRuleCall_1_0() { return cNodesRootNodeParserRuleCall_1_0; }
	}
	public class RootNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.roma.cocktail.xtext.Ast.RootNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameNodeNameParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cBaseTypesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBaseTypesBaseTypesParserRuleCall_1_0 = (RuleCall)cBaseTypesAssignment_1.eContents().get(0);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeNodeTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Assignment cPartAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPartNodePartParserRuleCall_3_0 = (RuleCall)cPartAssignment_3.eContents().get(0);
		private final Assignment cExtensionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExtensionExtensionsParserRuleCall_4_0 = (RuleCall)cExtensionAssignment_4.eContents().get(0);
		private final Keyword cFullStopKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//RootNode:
		//	name=NodeName baseTypes=BaseTypes? type=NodeType? part+=NodePart* extension=Extensions? '.';
		@Override public ParserRule getRule() { return rule; }
		
		//name=NodeName baseTypes=BaseTypes? type=NodeType? part+=NodePart* extension=Extensions? '.'
		public Group getGroup() { return cGroup; }
		
		//name=NodeName
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//NodeName
		public RuleCall getNameNodeNameParserRuleCall_0_0() { return cNameNodeNameParserRuleCall_0_0; }
		
		//baseTypes=BaseTypes?
		public Assignment getBaseTypesAssignment_1() { return cBaseTypesAssignment_1; }
		
		//BaseTypes
		public RuleCall getBaseTypesBaseTypesParserRuleCall_1_0() { return cBaseTypesBaseTypesParserRuleCall_1_0; }
		
		//type=NodeType?
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//NodeType
		public RuleCall getTypeNodeTypeParserRuleCall_2_0() { return cTypeNodeTypeParserRuleCall_2_0; }
		
		//part+=NodePart*
		public Assignment getPartAssignment_3() { return cPartAssignment_3; }
		
		//NodePart
		public RuleCall getPartNodePartParserRuleCall_3_0() { return cPartNodePartParserRuleCall_3_0; }
		
		//extension=Extensions?
		public Assignment getExtensionAssignment_4() { return cExtensionAssignment_4; }
		
		//Extensions
		public RuleCall getExtensionExtensionsParserRuleCall_4_0() { return cExtensionExtensionsParserRuleCall_4_0; }
		
		//'.'
		public Keyword getFullStopKeyword_5() { return cFullStopKeyword_5; }
	}
	public class BaseTypesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.roma.cocktail.xtext.Ast.BaseTypes");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLessThanSignHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNamesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cNamesNodeNameCrossReference_1_0 = (CrossReference)cNamesAssignment_1.eContents().get(0);
		private final RuleCall cNamesNodeNameIDTerminalRuleCall_1_0_1 = (RuleCall)cNamesNodeNameCrossReference_1_0.eContents().get(1);
		
		//BaseTypes:
		//	"<-" names+=[NodeName]*;
		@Override public ParserRule getRule() { return rule; }
		
		//"<-" names+=[NodeName]*
		public Group getGroup() { return cGroup; }
		
		//"<-"
		public Keyword getLessThanSignHyphenMinusKeyword_0() { return cLessThanSignHyphenMinusKeyword_0; }
		
		//names+=[NodeName]*
		public Assignment getNamesAssignment_1() { return cNamesAssignment_1; }
		
		//[NodeName]
		public CrossReference getNamesNodeNameCrossReference_1_0() { return cNamesNodeNameCrossReference_1_0; }
		
		//ID
		public RuleCall getNamesNodeNameIDTerminalRuleCall_1_0_1() { return cNamesNodeNameIDTerminalRuleCall_1_0_1; }
	}
	public class ExtensionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.roma.cocktail.xtext.Ast.Extensions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNodesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNodesRootNodeParserRuleCall_1_0 = (RuleCall)cNodesAssignment_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Extensions:
		//	"<" nodes=RootNode* ">";
		@Override public ParserRule getRule() { return rule; }
		
		//"<" nodes=RootNode* ">"
		public Group getGroup() { return cGroup; }
		
		//"<"
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }
		
		//nodes=RootNode*
		public Assignment getNodesAssignment_1() { return cNodesAssignment_1; }
		
		//RootNode
		public RuleCall getNodesRootNodeParserRuleCall_1_0() { return cNodesRootNodeParserRuleCall_1_0; }
		
		//">"
		public Keyword getGreaterThanSignKeyword_2() { return cGreaterThanSignKeyword_2; }
	}
	public class NodePartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.roma.cocktail.xtext.Ast.NodePart");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cChildAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cChildChildNodeParserRuleCall_0_0 = (RuleCall)cChildAssignment_0.eContents().get(0);
		private final Assignment cAttributeAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cAttributeNodeAttributeParserRuleCall_1_0 = (RuleCall)cAttributeAssignment_1.eContents().get(0);
		
		//NodePart:
		//	child=ChildNode | attribute=NodeAttribute;
		@Override public ParserRule getRule() { return rule; }
		
		//child=ChildNode | attribute=NodeAttribute
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//child=ChildNode
		public Assignment getChildAssignment_0() { return cChildAssignment_0; }
		
		//ChildNode
		public RuleCall getChildChildNodeParserRuleCall_0_0() { return cChildChildNodeParserRuleCall_0_0; }
		
		//attribute=NodeAttribute
		public Assignment getAttributeAssignment_1() { return cAttributeAssignment_1; }
		
		//NodeAttribute
		public RuleCall getAttributeNodeAttributeParserRuleCall_1_0() { return cAttributeNodeAttributeParserRuleCall_1_0; }
	}
	public class ChildNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.roma.cocktail.xtext.Ast.ChildNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cSelectorAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cSelectorIDTerminalRuleCall_0_0_0 = (RuleCall)cSelectorAssignment_0_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeIDTerminalRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		
		//ChildNode:
		//	(selector=ID ':')? type=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//(selector=ID ':')? type=ID
		public Group getGroup() { return cGroup; }
		
		//(selector=ID ':')?
		public Group getGroup_0() { return cGroup_0; }
		
		//selector=ID
		public Assignment getSelectorAssignment_0_0() { return cSelectorAssignment_0_0; }
		
		//ID
		public RuleCall getSelectorIDTerminalRuleCall_0_0_0() { return cSelectorIDTerminalRuleCall_0_0_0; }
		
		//':'
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }
		
		//type=ID
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//ID
		public RuleCall getTypeIDTerminalRuleCall_1_0() { return cTypeIDTerminalRuleCall_1_0; }
	}
	public class NodeAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.roma.cocktail.xtext.Ast.NodeAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAttributeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAttributeIDTerminalRuleCall_1_0 = (RuleCall)cAttributeAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTypeIDTerminalRuleCall_2_1_0 = (RuleCall)cTypeAssignment_2_1.eContents().get(0);
		private final Assignment cPropertyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPropertyPropertyListParserRuleCall_3_0 = (RuleCall)cPropertyAssignment_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//NodeAttribute:
		//	'[' attribute=ID (':' type=ID)? property=PropertyList ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' attribute=ID (':' type=ID)? property=PropertyList ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//attribute=ID
		public Assignment getAttributeAssignment_1() { return cAttributeAssignment_1; }
		
		//ID
		public RuleCall getAttributeIDTerminalRuleCall_1_0() { return cAttributeIDTerminalRuleCall_1_0; }
		
		//(':' type=ID)?
		public Group getGroup_2() { return cGroup_2; }
		
		//':'
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }
		
		//type=ID
		public Assignment getTypeAssignment_2_1() { return cTypeAssignment_2_1; }
		
		//ID
		public RuleCall getTypeIDTerminalRuleCall_2_1_0() { return cTypeIDTerminalRuleCall_2_1_0; }
		
		//property=PropertyList
		public Assignment getPropertyAssignment_3() { return cPropertyAssignment_3; }
		
		//PropertyList
		public RuleCall getPropertyPropertyListParserRuleCall_3_0() { return cPropertyPropertyListParserRuleCall_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}
	public class NodeNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.roma.cocktail.xtext.Ast.NodeName");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cNameAlternatives_0 = (Alternatives)cNameAssignment.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAlternatives_0.eContents().get(0);
		private final RuleCall cNameSTRINGTerminalRuleCall_0_1 = (RuleCall)cNameAlternatives_0.eContents().get(1);
		
		//NodeName:
		//	name=(ID | STRING);
		@Override public ParserRule getRule() { return rule; }
		
		//name=(ID | STRING)
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//(ID | STRING)
		public Alternatives getNameAlternatives_0() { return cNameAlternatives_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_0_1() { return cNameSTRINGTerminalRuleCall_0_1; }
	}
	public class NodeTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.roma.cocktail.xtext.Ast.NodeType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cColonEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//NodeType:
		//	"=" | ":" | ":=";
		@Override public ParserRule getRule() { return rule; }
		
		//"=" | ":" | ":="
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"="
		public Keyword getEqualsSignKeyword_0() { return cEqualsSignKeyword_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//":="
		public Keyword getColonEqualsSignKeyword_2() { return cColonEqualsSignKeyword_2; }
	}
	public class CodeBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.roma.cocktail.xtext.Ast.CodeBlock");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCodeWallParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cCodeBlockParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//CodeBlock:
		//	(CodeWall | '{' CodeBlock '}')*;
		@Override public ParserRule getRule() { return rule; }
		
		//(CodeWall | '{' CodeBlock '}')*
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CodeWall
		public RuleCall getCodeWallParserRuleCall_0() { return cCodeWallParserRuleCall_0; }
		
		//'{' CodeBlock '}'
		public Group getGroup_1() { return cGroup_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }
		
		//CodeBlock
		public RuleCall getCodeBlockParserRuleCall_1_1() { return cCodeBlockParserRuleCall_1_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_2() { return cRightCurlyBracketKeyword_1_2; }
	}
	public class CodeWallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.roma.cocktail.xtext.Ast.CodeWall");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cWSTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final Keyword cPlusSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cHyphenMinusKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cLeftParenthesisKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cAsteriskKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cFullStopKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cSolidusKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cReverseSolidusKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cVerticalLineKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cQuestionMarkKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		private final Keyword cGreaterThanSignKeyword_14 = (Keyword)cAlternatives.eContents().get(14);
		private final Keyword cLessThanSignKeyword_15 = (Keyword)cAlternatives.eContents().get(15);
		private final Keyword cNumberSignKeyword_16 = (Keyword)cAlternatives.eContents().get(16);
		private final Keyword cDollarSignKeyword_17 = (Keyword)cAlternatives.eContents().get(17);
		private final Keyword cPercentSignKeyword_18 = (Keyword)cAlternatives.eContents().get(18);
		private final Keyword cSemicolonKeyword_19 = (Keyword)cAlternatives.eContents().get(19);
		private final Keyword cColonKeyword_20 = (Keyword)cAlternatives.eContents().get(20);
		private final Keyword cExclamationMarkKeyword_21 = (Keyword)cAlternatives.eContents().get(21);
		private final Keyword cEqualsSignKeyword_22 = (Keyword)cAlternatives.eContents().get(22);
		private final Keyword cCommaKeyword_23 = (Keyword)cAlternatives.eContents().get(23);
		
		//CodeWall:
		//	ID | INT | STRING | WS | '+' | '-' | '(' | ')' | '*' | '.' | '/' | '\\' | '|' | '?' | '>' | '<' | '#' | '$' | '%' |
		//	';'
		//	| ':' | '!' | '=' | ',';
		@Override public ParserRule getRule() { return rule; }
		
		////(ID|INT|STRING|WS|'+'|'-'|'('|')'|'*'|'.'|'/'|'\\'|'|'|'?'|'>'|'<'|'#'|'$'|'%'|';'|':'|'['|']'|'=')
		//ID | INT | STRING | WS | '+' | '-' | '(' | ')' | '*' | '.' | '/' | '\\' | '|' | '?' | '>' | '<' | '#' | '$' | '%' | ';'
		//| ':' | '!' | '=' | ','
		public Alternatives getAlternatives() { return cAlternatives; }
		
		////(ID|INT|STRING|WS|'+'|'-'|'('|')'|'*'|'.'|'/'|'\\'|'|'|'?'|'>'|'<'|'#'|'$'|'%'|';'|':'|'['|']'|'=')
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_2() { return cSTRINGTerminalRuleCall_2; }
		
		//WS
		public RuleCall getWSTerminalRuleCall_3() { return cWSTerminalRuleCall_3; }
		
		//'+'
		public Keyword getPlusSignKeyword_4() { return cPlusSignKeyword_4; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_5() { return cHyphenMinusKeyword_5; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_6() { return cLeftParenthesisKeyword_6; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
		
		//'*'
		public Keyword getAsteriskKeyword_8() { return cAsteriskKeyword_8; }
		
		//'.'
		public Keyword getFullStopKeyword_9() { return cFullStopKeyword_9; }
		
		//'/'
		public Keyword getSolidusKeyword_10() { return cSolidusKeyword_10; }
		
		//'\\'
		public Keyword getReverseSolidusKeyword_11() { return cReverseSolidusKeyword_11; }
		
		//'|'
		public Keyword getVerticalLineKeyword_12() { return cVerticalLineKeyword_12; }
		
		//'?'
		public Keyword getQuestionMarkKeyword_13() { return cQuestionMarkKeyword_13; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_14() { return cGreaterThanSignKeyword_14; }
		
		//'<'
		public Keyword getLessThanSignKeyword_15() { return cLessThanSignKeyword_15; }
		
		//'#'
		public Keyword getNumberSignKeyword_16() { return cNumberSignKeyword_16; }
		
		//'$'
		public Keyword getDollarSignKeyword_17() { return cDollarSignKeyword_17; }
		
		//'%'
		public Keyword getPercentSignKeyword_18() { return cPercentSignKeyword_18; }
		
		//';'
		public Keyword getSemicolonKeyword_19() { return cSemicolonKeyword_19; }
		
		//':'
		public Keyword getColonKeyword_20() { return cColonKeyword_20; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_21() { return cExclamationMarkKeyword_21; }
		
		//'='
		public Keyword getEqualsSignKeyword_22() { return cEqualsSignKeyword_22; }
		
		//','
		public Keyword getCommaKeyword_23() { return cCommaKeyword_23; }
	}
	
	
	private final ModelElements pModel;
	private final ModuleElements pModule;
	private final TreeElements pTree;
	private final ImportElements pImport;
	private final ExportElements pExport;
	private final GlobalElements pGlobal;
	private final LocalElements pLocal;
	private final BeginElements pBegin;
	private final CloseElements pClose;
	private final PropertiesElements pProperties;
	private final PropertyListElements pPropertyList;
	private final DeclareElements pDeclare;
	private final DeclareNodeElements pDeclareNode;
	private final RuleElements pRule;
	private final RootNodeElements pRootNode;
	private final BaseTypesElements pBaseTypes;
	private final ExtensionsElements pExtensions;
	private final NodePartElements pNodePart;
	private final ChildNodeElements pChildNode;
	private final NodeAttributeElements pNodeAttribute;
	private final NodeNameElements pNodeName;
	private final NodeTypeElements pNodeType;
	private final CodeBlockElements pCodeBlock;
	private final CodeWallElements pCodeWall;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public AstGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pModule = new ModuleElements();
		this.pTree = new TreeElements();
		this.pImport = new ImportElements();
		this.pExport = new ExportElements();
		this.pGlobal = new GlobalElements();
		this.pLocal = new LocalElements();
		this.pBegin = new BeginElements();
		this.pClose = new CloseElements();
		this.pProperties = new PropertiesElements();
		this.pPropertyList = new PropertyListElements();
		this.pDeclare = new DeclareElements();
		this.pDeclareNode = new DeclareNodeElements();
		this.pRule = new RuleElements();
		this.pRootNode = new RootNodeElements();
		this.pBaseTypes = new BaseTypesElements();
		this.pExtensions = new ExtensionsElements();
		this.pNodePart = new NodePartElements();
		this.pChildNode = new ChildNodeElements();
		this.pNodeAttribute = new NodeAttributeElements();
		this.pNodeName = new NodeNameElements();
		this.pNodeType = new NodeTypeElements();
		this.pCodeBlock = new CodeBlockElements();
		this.pCodeWall = new CodeWallElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.roma.cocktail.xtext.Ast".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	module=Module
	//	& tree=Tree?
	//	& imp=Import?
	//	& exp=Export?
	//	& glo=Global?
	//	& loc=Local?
	//	& beg=Begin?
	//	& clo=Close?
	//	& pro=Properties?
	//	& rul=Rule
	//	& dec=Declare?;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Module:
	//	'MODULE' name=ID;
	public ModuleElements getModuleAccess() {
		return pModule;
	}
	
	public ParserRule getModuleRule() {
		return getModuleAccess().getRule();
	}
	
	//Tree:
	//	'TREE' name=ID;
	public TreeElements getTreeAccess() {
		return pTree;
	}
	
	public ParserRule getTreeRule() {
		return getTreeAccess().getRule();
	}
	
	//Import:
	//	'IMPORT' '{' code=CodeBlock '}';
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}
	
	//Export:
	//	'EXPORT' '{' code=CodeBlock '}';
	public ExportElements getExportAccess() {
		return pExport;
	}
	
	public ParserRule getExportRule() {
		return getExportAccess().getRule();
	}
	
	//Global:
	//	'GLOBAL' '{' code=CodeBlock '}';
	public GlobalElements getGlobalAccess() {
		return pGlobal;
	}
	
	public ParserRule getGlobalRule() {
		return getGlobalAccess().getRule();
	}
	
	//Local:
	//	'LOCAL' '{' code=CodeBlock '}';
	public LocalElements getLocalAccess() {
		return pLocal;
	}
	
	public ParserRule getLocalRule() {
		return getLocalAccess().getRule();
	}
	
	//Begin:
	//	'BEGIN' '{' code=CodeBlock '}';
	public BeginElements getBeginAccess() {
		return pBegin;
	}
	
	public ParserRule getBeginRule() {
		return getBeginAccess().getRule();
	}
	
	//Close:
	//	'CLOSE' '{' code=CodeBlock '}';
	public CloseElements getCloseAccess() {
		return pClose;
	}
	
	public ParserRule getCloseRule() {
		return getCloseAccess().getRule();
	}
	
	//Properties:
	//	'PROPERTY' property=PropertyList;
	public PropertiesElements getPropertiesAccess() {
		return pProperties;
	}
	
	public ParserRule getPropertiesRule() {
		return getPropertiesAccess().getRule();
	}
	
	//PropertyList:
	//	props+='INPUT'? & props+='OUTPUT'? & props+='SYNTHESIZED'? & props+='INHERITED'? & props+='THREAD'? &
	//	props+='REVERSE'? & props+='IGNORE'? & props+='VIRTUAL'?;
	public PropertyListElements getPropertyListAccess() {
		return pPropertyList;
	}
	
	public ParserRule getPropertyListRule() {
		return getPropertyListAccess().getRule();
	}
	
	//Declare:
	//	'DECLARE' nodes+=DeclareNode*;
	public DeclareElements getDeclareAccess() {
		return pDeclare;
	}
	
	public ParserRule getDeclareRule() {
		return getDeclareAccess().getRule();
	}
	
	//DeclareNode:
	//	names+=NodeName+ type=("=" | ":") part+=NodePart* ".";
	public DeclareNodeElements getDeclareNodeAccess() {
		return pDeclareNode;
	}
	
	public ParserRule getDeclareNodeRule() {
		return getDeclareNodeAccess().getRule();
	}
	
	//Rule:
	//	'RULE' nodes+=RootNode*;
	public RuleElements getRuleAccess() {
		return pRule;
	}
	
	public ParserRule getRuleRule() {
		return getRuleAccess().getRule();
	}
	
	//RootNode:
	//	name=NodeName baseTypes=BaseTypes? type=NodeType? part+=NodePart* extension=Extensions? '.';
	public RootNodeElements getRootNodeAccess() {
		return pRootNode;
	}
	
	public ParserRule getRootNodeRule() {
		return getRootNodeAccess().getRule();
	}
	
	//BaseTypes:
	//	"<-" names+=[NodeName]*;
	public BaseTypesElements getBaseTypesAccess() {
		return pBaseTypes;
	}
	
	public ParserRule getBaseTypesRule() {
		return getBaseTypesAccess().getRule();
	}
	
	//Extensions:
	//	"<" nodes=RootNode* ">";
	public ExtensionsElements getExtensionsAccess() {
		return pExtensions;
	}
	
	public ParserRule getExtensionsRule() {
		return getExtensionsAccess().getRule();
	}
	
	//NodePart:
	//	child=ChildNode | attribute=NodeAttribute;
	public NodePartElements getNodePartAccess() {
		return pNodePart;
	}
	
	public ParserRule getNodePartRule() {
		return getNodePartAccess().getRule();
	}
	
	//ChildNode:
	//	(selector=ID ':')? type=ID;
	public ChildNodeElements getChildNodeAccess() {
		return pChildNode;
	}
	
	public ParserRule getChildNodeRule() {
		return getChildNodeAccess().getRule();
	}
	
	//NodeAttribute:
	//	'[' attribute=ID (':' type=ID)? property=PropertyList ']';
	public NodeAttributeElements getNodeAttributeAccess() {
		return pNodeAttribute;
	}
	
	public ParserRule getNodeAttributeRule() {
		return getNodeAttributeAccess().getRule();
	}
	
	//NodeName:
	//	name=(ID | STRING);
	public NodeNameElements getNodeNameAccess() {
		return pNodeName;
	}
	
	public ParserRule getNodeNameRule() {
		return getNodeNameAccess().getRule();
	}
	
	//NodeType:
	//	"=" | ":" | ":=";
	public NodeTypeElements getNodeTypeAccess() {
		return pNodeType;
	}
	
	public ParserRule getNodeTypeRule() {
		return getNodeTypeAccess().getRule();
	}
	
	//CodeBlock:
	//	(CodeWall | '{' CodeBlock '}')*;
	public CodeBlockElements getCodeBlockAccess() {
		return pCodeBlock;
	}
	
	public ParserRule getCodeBlockRule() {
		return getCodeBlockAccess().getRule();
	}
	
	//CodeWall:
	//	ID | INT | STRING | WS | '+' | '-' | '(' | ')' | '*' | '.' | '/' | '\\' | '|' | '?' | '>' | '<' | '#' | '$' | '%' |
	//	';'
	//	| ':' | '!' | '=' | ',';
	public CodeWallElements getCodeWallAccess() {
		return pCodeWall;
	}
	
	public ParserRule getCodeWallRule() {
		return getCodeWallAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
