/**
 * generated by Xtext 2.9.1
 */
package de.roma.cocktail.xtext.ast.impl;

import de.roma.cocktail.xtext.ast.AstPackage;
import de.roma.cocktail.xtext.ast.BaseTypes;
import de.roma.cocktail.xtext.ast.Extensions;
import de.roma.cocktail.xtext.ast.NodeName;
import de.roma.cocktail.xtext.ast.NodePart;
import de.roma.cocktail.xtext.ast.RootNode;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Root Node</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@link de.roma.cocktail.xtext.ast.impl.RootNodeImpl#getName <em>Name</em>}</li>
 *   <li>{@link de.roma.cocktail.xtext.ast.impl.RootNodeImpl#getBaseTypes <em>Base Types</em>}</li>
 *   <li>{@link de.roma.cocktail.xtext.ast.impl.RootNodeImpl#getType <em>Type</em>}</li>
 *   <li>{@link de.roma.cocktail.xtext.ast.impl.RootNodeImpl#getPart <em>Part</em>}</li>
 *   <li>{@link de.roma.cocktail.xtext.ast.impl.RootNodeImpl#getExtension <em>Extension</em>}</li>
 * </ul>
 * </p>
 *
 * @generated
 */
public class RootNodeImpl extends MinimalEObjectImpl.Container implements RootNode
{
  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected NodeName name;

  /**
   * The cached value of the '{@link #getBaseTypes() <em>Base Types</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBaseTypes()
   * @generated
   * @ordered
   */
  protected BaseTypes baseTypes;

  /**
   * The default value of the '{@link #getType() <em>Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected static final String TYPE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getType() <em>Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected String type = TYPE_EDEFAULT;

  /**
   * The cached value of the '{@link #getPart() <em>Part</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPart()
   * @generated
   * @ordered
   */
  protected EList<NodePart> part;

  /**
   * The cached value of the '{@link #getExtension() <em>Extension</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExtension()
   * @generated
   * @ordered
   */
  protected Extensions extension;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RootNodeImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AstPackage.Literals.ROOT_NODE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NodeName getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetName(NodeName newName, NotificationChain msgs)
  {
    NodeName oldName = name;
    name = newName;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AstPackage.ROOT_NODE__NAME, oldName, newName);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setName(NodeName newName)
  {
    if (newName != name)
    {
      NotificationChain msgs = null;
      if (name != null)
        msgs = ((InternalEObject)name).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AstPackage.ROOT_NODE__NAME, null, msgs);
      if (newName != null)
        msgs = ((InternalEObject)newName).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AstPackage.ROOT_NODE__NAME, null, msgs);
      msgs = basicSetName(newName, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AstPackage.ROOT_NODE__NAME, newName, newName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BaseTypes getBaseTypes()
  {
    return baseTypes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetBaseTypes(BaseTypes newBaseTypes, NotificationChain msgs)
  {
    BaseTypes oldBaseTypes = baseTypes;
    baseTypes = newBaseTypes;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AstPackage.ROOT_NODE__BASE_TYPES, oldBaseTypes, newBaseTypes);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setBaseTypes(BaseTypes newBaseTypes)
  {
    if (newBaseTypes != baseTypes)
    {
      NotificationChain msgs = null;
      if (baseTypes != null)
        msgs = ((InternalEObject)baseTypes).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AstPackage.ROOT_NODE__BASE_TYPES, null, msgs);
      if (newBaseTypes != null)
        msgs = ((InternalEObject)newBaseTypes).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AstPackage.ROOT_NODE__BASE_TYPES, null, msgs);
      msgs = basicSetBaseTypes(newBaseTypes, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AstPackage.ROOT_NODE__BASE_TYPES, newBaseTypes, newBaseTypes));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getType()
  {
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setType(String newType)
  {
    String oldType = type;
    type = newType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AstPackage.ROOT_NODE__TYPE, oldType, type));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<NodePart> getPart()
  {
    if (part == null)
    {
      part = new EObjectContainmentEList<NodePart>(NodePart.class, this, AstPackage.ROOT_NODE__PART);
    }
    return part;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Extensions getExtension()
  {
    return extension;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExtension(Extensions newExtension, NotificationChain msgs)
  {
    Extensions oldExtension = extension;
    extension = newExtension;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AstPackage.ROOT_NODE__EXTENSION, oldExtension, newExtension);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setExtension(Extensions newExtension)
  {
    if (newExtension != extension)
    {
      NotificationChain msgs = null;
      if (extension != null)
        msgs = ((InternalEObject)extension).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AstPackage.ROOT_NODE__EXTENSION, null, msgs);
      if (newExtension != null)
        msgs = ((InternalEObject)newExtension).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AstPackage.ROOT_NODE__EXTENSION, null, msgs);
      msgs = basicSetExtension(newExtension, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AstPackage.ROOT_NODE__EXTENSION, newExtension, newExtension));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case AstPackage.ROOT_NODE__NAME:
        return basicSetName(null, msgs);
      case AstPackage.ROOT_NODE__BASE_TYPES:
        return basicSetBaseTypes(null, msgs);
      case AstPackage.ROOT_NODE__PART:
        return ((InternalEList<?>)getPart()).basicRemove(otherEnd, msgs);
      case AstPackage.ROOT_NODE__EXTENSION:
        return basicSetExtension(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AstPackage.ROOT_NODE__NAME:
        return getName();
      case AstPackage.ROOT_NODE__BASE_TYPES:
        return getBaseTypes();
      case AstPackage.ROOT_NODE__TYPE:
        return getType();
      case AstPackage.ROOT_NODE__PART:
        return getPart();
      case AstPackage.ROOT_NODE__EXTENSION:
        return getExtension();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AstPackage.ROOT_NODE__NAME:
        setName((NodeName)newValue);
        return;
      case AstPackage.ROOT_NODE__BASE_TYPES:
        setBaseTypes((BaseTypes)newValue);
        return;
      case AstPackage.ROOT_NODE__TYPE:
        setType((String)newValue);
        return;
      case AstPackage.ROOT_NODE__PART:
        getPart().clear();
        getPart().addAll((Collection<? extends NodePart>)newValue);
        return;
      case AstPackage.ROOT_NODE__EXTENSION:
        setExtension((Extensions)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AstPackage.ROOT_NODE__NAME:
        setName((NodeName)null);
        return;
      case AstPackage.ROOT_NODE__BASE_TYPES:
        setBaseTypes((BaseTypes)null);
        return;
      case AstPackage.ROOT_NODE__TYPE:
        setType(TYPE_EDEFAULT);
        return;
      case AstPackage.ROOT_NODE__PART:
        getPart().clear();
        return;
      case AstPackage.ROOT_NODE__EXTENSION:
        setExtension((Extensions)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AstPackage.ROOT_NODE__NAME:
        return name != null;
      case AstPackage.ROOT_NODE__BASE_TYPES:
        return baseTypes != null;
      case AstPackage.ROOT_NODE__TYPE:
        return TYPE_EDEFAULT == null ? type != null : !TYPE_EDEFAULT.equals(type);
      case AstPackage.ROOT_NODE__PART:
        return part != null && !part.isEmpty();
      case AstPackage.ROOT_NODE__EXTENSION:
        return extension != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (type: ");
    result.append(type);
    result.append(')');
    return result.toString();
  }

} //RootNodeImpl
