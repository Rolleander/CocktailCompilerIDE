/**
 * generated by Xtext 2.9.1
 */
package de.roma.cocktail.xtext.ast.impl;

import de.roma.cocktail.xtext.ast.AstPackage;
import de.roma.cocktail.xtext.ast.Codes;
import de.roma.cocktail.xtext.ast.Declare;
import de.roma.cocktail.xtext.ast.Properties;
import de.roma.cocktail.xtext.ast.Rule;
import de.roma.cocktail.xtext.ast.Specification;
import de.roma.cocktail.xtext.ast.Tree;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Specification</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@link de.roma.cocktail.xtext.ast.impl.SpecificationImpl#getTree <em>Tree</em>}</li>
 *   <li>{@link de.roma.cocktail.xtext.ast.impl.SpecificationImpl#getCode <em>Code</em>}</li>
 *   <li>{@link de.roma.cocktail.xtext.ast.impl.SpecificationImpl#getProperties <em>Properties</em>}</li>
 *   <li>{@link de.roma.cocktail.xtext.ast.impl.SpecificationImpl#getDeclare <em>Declare</em>}</li>
 *   <li>{@link de.roma.cocktail.xtext.ast.impl.SpecificationImpl#getRules <em>Rules</em>}</li>
 * </ul>
 * </p>
 *
 * @generated
 */
public class SpecificationImpl extends MinimalEObjectImpl.Container implements Specification
{
  /**
   * The cached value of the '{@link #getTree() <em>Tree</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTree()
   * @generated
   * @ordered
   */
  protected Tree tree;

  /**
   * The cached value of the '{@link #getCode() <em>Code</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCode()
   * @generated
   * @ordered
   */
  protected Codes code;

  /**
   * The cached value of the '{@link #getProperties() <em>Properties</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProperties()
   * @generated
   * @ordered
   */
  protected Properties properties;

  /**
   * The cached value of the '{@link #getDeclare() <em>Declare</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDeclare()
   * @generated
   * @ordered
   */
  protected Declare declare;

  /**
   * The cached value of the '{@link #getRules() <em>Rules</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRules()
   * @generated
   * @ordered
   */
  protected Rule rules;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SpecificationImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AstPackage.Literals.SPECIFICATION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Tree getTree()
  {
    return tree;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTree(Tree newTree, NotificationChain msgs)
  {
    Tree oldTree = tree;
    tree = newTree;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AstPackage.SPECIFICATION__TREE, oldTree, newTree);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTree(Tree newTree)
  {
    if (newTree != tree)
    {
      NotificationChain msgs = null;
      if (tree != null)
        msgs = ((InternalEObject)tree).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AstPackage.SPECIFICATION__TREE, null, msgs);
      if (newTree != null)
        msgs = ((InternalEObject)newTree).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AstPackage.SPECIFICATION__TREE, null, msgs);
      msgs = basicSetTree(newTree, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AstPackage.SPECIFICATION__TREE, newTree, newTree));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Codes getCode()
  {
    return code;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCode(Codes newCode, NotificationChain msgs)
  {
    Codes oldCode = code;
    code = newCode;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AstPackage.SPECIFICATION__CODE, oldCode, newCode);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setCode(Codes newCode)
  {
    if (newCode != code)
    {
      NotificationChain msgs = null;
      if (code != null)
        msgs = ((InternalEObject)code).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AstPackage.SPECIFICATION__CODE, null, msgs);
      if (newCode != null)
        msgs = ((InternalEObject)newCode).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AstPackage.SPECIFICATION__CODE, null, msgs);
      msgs = basicSetCode(newCode, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AstPackage.SPECIFICATION__CODE, newCode, newCode));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Properties getProperties()
  {
    return properties;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetProperties(Properties newProperties, NotificationChain msgs)
  {
    Properties oldProperties = properties;
    properties = newProperties;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AstPackage.SPECIFICATION__PROPERTIES, oldProperties, newProperties);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setProperties(Properties newProperties)
  {
    if (newProperties != properties)
    {
      NotificationChain msgs = null;
      if (properties != null)
        msgs = ((InternalEObject)properties).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AstPackage.SPECIFICATION__PROPERTIES, null, msgs);
      if (newProperties != null)
        msgs = ((InternalEObject)newProperties).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AstPackage.SPECIFICATION__PROPERTIES, null, msgs);
      msgs = basicSetProperties(newProperties, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AstPackage.SPECIFICATION__PROPERTIES, newProperties, newProperties));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Declare getDeclare()
  {
    return declare;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetDeclare(Declare newDeclare, NotificationChain msgs)
  {
    Declare oldDeclare = declare;
    declare = newDeclare;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AstPackage.SPECIFICATION__DECLARE, oldDeclare, newDeclare);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setDeclare(Declare newDeclare)
  {
    if (newDeclare != declare)
    {
      NotificationChain msgs = null;
      if (declare != null)
        msgs = ((InternalEObject)declare).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AstPackage.SPECIFICATION__DECLARE, null, msgs);
      if (newDeclare != null)
        msgs = ((InternalEObject)newDeclare).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AstPackage.SPECIFICATION__DECLARE, null, msgs);
      msgs = basicSetDeclare(newDeclare, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AstPackage.SPECIFICATION__DECLARE, newDeclare, newDeclare));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Rule getRules()
  {
    return rules;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRules(Rule newRules, NotificationChain msgs)
  {
    Rule oldRules = rules;
    rules = newRules;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AstPackage.SPECIFICATION__RULES, oldRules, newRules);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setRules(Rule newRules)
  {
    if (newRules != rules)
    {
      NotificationChain msgs = null;
      if (rules != null)
        msgs = ((InternalEObject)rules).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AstPackage.SPECIFICATION__RULES, null, msgs);
      if (newRules != null)
        msgs = ((InternalEObject)newRules).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AstPackage.SPECIFICATION__RULES, null, msgs);
      msgs = basicSetRules(newRules, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AstPackage.SPECIFICATION__RULES, newRules, newRules));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case AstPackage.SPECIFICATION__TREE:
        return basicSetTree(null, msgs);
      case AstPackage.SPECIFICATION__CODE:
        return basicSetCode(null, msgs);
      case AstPackage.SPECIFICATION__PROPERTIES:
        return basicSetProperties(null, msgs);
      case AstPackage.SPECIFICATION__DECLARE:
        return basicSetDeclare(null, msgs);
      case AstPackage.SPECIFICATION__RULES:
        return basicSetRules(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AstPackage.SPECIFICATION__TREE:
        return getTree();
      case AstPackage.SPECIFICATION__CODE:
        return getCode();
      case AstPackage.SPECIFICATION__PROPERTIES:
        return getProperties();
      case AstPackage.SPECIFICATION__DECLARE:
        return getDeclare();
      case AstPackage.SPECIFICATION__RULES:
        return getRules();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AstPackage.SPECIFICATION__TREE:
        setTree((Tree)newValue);
        return;
      case AstPackage.SPECIFICATION__CODE:
        setCode((Codes)newValue);
        return;
      case AstPackage.SPECIFICATION__PROPERTIES:
        setProperties((Properties)newValue);
        return;
      case AstPackage.SPECIFICATION__DECLARE:
        setDeclare((Declare)newValue);
        return;
      case AstPackage.SPECIFICATION__RULES:
        setRules((Rule)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AstPackage.SPECIFICATION__TREE:
        setTree((Tree)null);
        return;
      case AstPackage.SPECIFICATION__CODE:
        setCode((Codes)null);
        return;
      case AstPackage.SPECIFICATION__PROPERTIES:
        setProperties((Properties)null);
        return;
      case AstPackage.SPECIFICATION__DECLARE:
        setDeclare((Declare)null);
        return;
      case AstPackage.SPECIFICATION__RULES:
        setRules((Rule)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AstPackage.SPECIFICATION__TREE:
        return tree != null;
      case AstPackage.SPECIFICATION__CODE:
        return code != null;
      case AstPackage.SPECIFICATION__PROPERTIES:
        return properties != null;
      case AstPackage.SPECIFICATION__DECLARE:
        return declare != null;
      case AstPackage.SPECIFICATION__RULES:
        return rules != null;
    }
    return super.eIsSet(featureID);
  }

} //SpecificationImpl
