/**
 * generated by Xtext 2.9.1
 */
package de.roma.cocktail.xtext.ast.impl;

import de.roma.cocktail.xtext.ast.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class AstFactoryImpl extends EFactoryImpl implements AstFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static AstFactory init()
  {
    try
    {
      AstFactory theAstFactory = (AstFactory)EPackage.Registry.INSTANCE.getEFactory(AstPackage.eNS_URI);
      if (theAstFactory != null)
      {
        return theAstFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new AstFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AstFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case AstPackage.MODEL: return createModel();
      case AstPackage.MODULE_NAME: return createModuleName();
      case AstPackage.MODULES: return createModules();
      case AstPackage.SPECIFICATION: return createSpecification();
      case AstPackage.CODES: return createCodes();
      case AstPackage.TREE: return createTree();
      case AstPackage.IMPORT: return createImport();
      case AstPackage.EXPORT: return createExport();
      case AstPackage.GLOBAL: return createGlobal();
      case AstPackage.LOCAL: return createLocal();
      case AstPackage.BEGIN: return createBegin();
      case AstPackage.CLOSE: return createClose();
      case AstPackage.PROPERTIES: return createProperties();
      case AstPackage.PROPERTY_LIST: return createPropertyList();
      case AstPackage.NODE_PROPERTY_LIST: return createNodePropertyList();
      case AstPackage.DECLARE: return createDeclare();
      case AstPackage.DECLARE_NODE: return createDeclareNode();
      case AstPackage.RULE: return createRule();
      case AstPackage.ROOT_NODE: return createRootNode();
      case AstPackage.BASE_TYPES: return createBaseTypes();
      case AstPackage.EXTENSIONS: return createExtensions();
      case AstPackage.NODE_PART: return createNodePart();
      case AstPackage.CHILD_NODE: return createChildNode();
      case AstPackage.NODE_ATTRIBUTE: return createNodeAttribute();
      case AstPackage.NODE_NAME: return createNodeName();
      case AstPackage.CODE_BLOCK: return createCodeBlock();
      case AstPackage.TARGET_CODE_EXPRESSION: return createTargetCodeExpression();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ModuleName createModuleName()
  {
    ModuleNameImpl moduleName = new ModuleNameImpl();
    return moduleName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Modules createModules()
  {
    ModulesImpl modules = new ModulesImpl();
    return modules;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Specification createSpecification()
  {
    SpecificationImpl specification = new SpecificationImpl();
    return specification;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Codes createCodes()
  {
    CodesImpl codes = new CodesImpl();
    return codes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Tree createTree()
  {
    TreeImpl tree = new TreeImpl();
    return tree;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Import createImport()
  {
    ImportImpl import_ = new ImportImpl();
    return import_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Export createExport()
  {
    ExportImpl export = new ExportImpl();
    return export;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Global createGlobal()
  {
    GlobalImpl global = new GlobalImpl();
    return global;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Local createLocal()
  {
    LocalImpl local = new LocalImpl();
    return local;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Begin createBegin()
  {
    BeginImpl begin = new BeginImpl();
    return begin;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Close createClose()
  {
    CloseImpl close = new CloseImpl();
    return close;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Properties createProperties()
  {
    PropertiesImpl properties = new PropertiesImpl();
    return properties;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PropertyList createPropertyList()
  {
    PropertyListImpl propertyList = new PropertyListImpl();
    return propertyList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NodePropertyList createNodePropertyList()
  {
    NodePropertyListImpl nodePropertyList = new NodePropertyListImpl();
    return nodePropertyList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Declare createDeclare()
  {
    DeclareImpl declare = new DeclareImpl();
    return declare;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DeclareNode createDeclareNode()
  {
    DeclareNodeImpl declareNode = new DeclareNodeImpl();
    return declareNode;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Rule createRule()
  {
    RuleImpl rule = new RuleImpl();
    return rule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RootNode createRootNode()
  {
    RootNodeImpl rootNode = new RootNodeImpl();
    return rootNode;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BaseTypes createBaseTypes()
  {
    BaseTypesImpl baseTypes = new BaseTypesImpl();
    return baseTypes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Extensions createExtensions()
  {
    ExtensionsImpl extensions = new ExtensionsImpl();
    return extensions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NodePart createNodePart()
  {
    NodePartImpl nodePart = new NodePartImpl();
    return nodePart;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ChildNode createChildNode()
  {
    ChildNodeImpl childNode = new ChildNodeImpl();
    return childNode;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NodeAttribute createNodeAttribute()
  {
    NodeAttributeImpl nodeAttribute = new NodeAttributeImpl();
    return nodeAttribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NodeName createNodeName()
  {
    NodeNameImpl nodeName = new NodeNameImpl();
    return nodeName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CodeBlock createCodeBlock()
  {
    CodeBlockImpl codeBlock = new CodeBlockImpl();
    return codeBlock;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TargetCodeExpression createTargetCodeExpression()
  {
    TargetCodeExpressionImpl targetCodeExpression = new TargetCodeExpressionImpl();
    return targetCodeExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AstPackage getAstPackage()
  {
    return (AstPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static AstPackage getPackage()
  {
    return AstPackage.eINSTANCE;
  }

} //AstFactoryImpl
