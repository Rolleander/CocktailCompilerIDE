/**
 * generated by Xtext 2.9.1
 */
package de.roma.cocktail.xtext.ast.impl;

import de.roma.cocktail.xtext.ast.AstPackage;
import de.roma.cocktail.xtext.ast.Model;
import de.roma.cocktail.xtext.ast.Modules;
import de.roma.cocktail.xtext.ast.Specification;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Model</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@link de.roma.cocktail.xtext.ast.impl.ModelImpl#getSepcification <em>Sepcification</em>}</li>
 *   <li>{@link de.roma.cocktail.xtext.ast.impl.ModelImpl#getModules <em>Modules</em>}</li>
 * </ul>
 * </p>
 *
 * @generated
 */
public class ModelImpl extends MinimalEObjectImpl.Container implements Model
{
  /**
   * The cached value of the '{@link #getSepcification() <em>Sepcification</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSepcification()
   * @generated
   * @ordered
   */
  protected Specification sepcification;

  /**
   * The cached value of the '{@link #getModules() <em>Modules</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getModules()
   * @generated
   * @ordered
   */
  protected EList<Modules> modules;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ModelImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AstPackage.Literals.MODEL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Specification getSepcification()
  {
    return sepcification;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSepcification(Specification newSepcification, NotificationChain msgs)
  {
    Specification oldSepcification = sepcification;
    sepcification = newSepcification;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AstPackage.MODEL__SEPCIFICATION, oldSepcification, newSepcification);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSepcification(Specification newSepcification)
  {
    if (newSepcification != sepcification)
    {
      NotificationChain msgs = null;
      if (sepcification != null)
        msgs = ((InternalEObject)sepcification).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AstPackage.MODEL__SEPCIFICATION, null, msgs);
      if (newSepcification != null)
        msgs = ((InternalEObject)newSepcification).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AstPackage.MODEL__SEPCIFICATION, null, msgs);
      msgs = basicSetSepcification(newSepcification, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AstPackage.MODEL__SEPCIFICATION, newSepcification, newSepcification));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Modules> getModules()
  {
    if (modules == null)
    {
      modules = new EObjectContainmentEList<Modules>(Modules.class, this, AstPackage.MODEL__MODULES);
    }
    return modules;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case AstPackage.MODEL__SEPCIFICATION:
        return basicSetSepcification(null, msgs);
      case AstPackage.MODEL__MODULES:
        return ((InternalEList<?>)getModules()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AstPackage.MODEL__SEPCIFICATION:
        return getSepcification();
      case AstPackage.MODEL__MODULES:
        return getModules();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AstPackage.MODEL__SEPCIFICATION:
        setSepcification((Specification)newValue);
        return;
      case AstPackage.MODEL__MODULES:
        getModules().clear();
        getModules().addAll((Collection<? extends Modules>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AstPackage.MODEL__SEPCIFICATION:
        setSepcification((Specification)null);
        return;
      case AstPackage.MODEL__MODULES:
        getModules().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AstPackage.MODEL__SEPCIFICATION:
        return sepcification != null;
      case AstPackage.MODEL__MODULES:
        return modules != null && !modules.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //ModelImpl
