/*
 * generated by Xtext 2.9.1
 */
package de.roma.cocktail.xtext.serializer;

import com.google.inject.Inject;
import de.roma.cocktail.xtext.services.AstGrammarAccess;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class AstSyntacticSequencer extends AbstractSyntacticSequencer {

	protected AstGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Properties_PROPERTYKeyword_0_0_a;
	protected AbstractElementAlias match_Properties_PROPERTYKeyword_0_0_p;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (AstGrammarAccess) access;
		match_Properties_PROPERTYKeyword_0_0_a = new TokenAlias(true, true, grammarAccess.getPropertiesAccess().getPROPERTYKeyword_0_0());
		match_Properties_PROPERTYKeyword_0_0_p = new TokenAlias(true, false, grammarAccess.getPropertiesAccess().getPROPERTYKeyword_0_0());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Properties_PROPERTYKeyword_0_0_a.equals(syntax))
				emit_Properties_PROPERTYKeyword_0_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Properties_PROPERTYKeyword_0_0_p.equals(syntax))
				emit_Properties_PROPERTYKeyword_0_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     'PROPERTY'*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 *     (rule start) (ambiguity) props+='IGNORE'
	 *     (rule start) (ambiguity) props+='INHERITED'
	 *     (rule start) (ambiguity) props+='OUTPUT'
	 *     (rule start) (ambiguity) props+='REVERSE'
	 *     (rule start) (ambiguity) props+='SYNTHESIZED'
	 *     (rule start) (ambiguity) props+='THREAD'
	 *     (rule start) (ambiguity) props+='VIRTUAL'
	 *     props+='IGNORE' (ambiguity) (rule end)
	 *     props+='IGNORE' (ambiguity) props+='IGNORE'
	 *     props+='IGNORE' (ambiguity) props+='INHERITED'
	 *     props+='IGNORE' (ambiguity) props+='OUTPUT'
	 *     props+='IGNORE' (ambiguity) props+='REVERSE'
	 *     props+='IGNORE' (ambiguity) props+='SYNTHESIZED'
	 *     props+='IGNORE' (ambiguity) props+='THREAD'
	 *     props+='IGNORE' (ambiguity) props+='VIRTUAL'
	 *     props+='INHERITED' (ambiguity) (rule end)
	 *     props+='INHERITED' (ambiguity) props+='IGNORE'
	 *     props+='INHERITED' (ambiguity) props+='INHERITED'
	 *     props+='INHERITED' (ambiguity) props+='OUTPUT'
	 *     props+='INHERITED' (ambiguity) props+='REVERSE'
	 *     props+='INHERITED' (ambiguity) props+='SYNTHESIZED'
	 *     props+='INHERITED' (ambiguity) props+='THREAD'
	 *     props+='INHERITED' (ambiguity) props+='VIRTUAL'
	 *     props+='INPUT' (ambiguity) (rule end)
	 *     props+='INPUT' (ambiguity) props+='IGNORE'
	 *     props+='INPUT' (ambiguity) props+='INHERITED'
	 *     props+='INPUT' (ambiguity) props+='OUTPUT'
	 *     props+='INPUT' (ambiguity) props+='REVERSE'
	 *     props+='INPUT' (ambiguity) props+='SYNTHESIZED'
	 *     props+='INPUT' (ambiguity) props+='THREAD'
	 *     props+='INPUT' (ambiguity) props+='VIRTUAL'
	 *     props+='OUTPUT' (ambiguity) (rule end)
	 *     props+='OUTPUT' (ambiguity) props+='IGNORE'
	 *     props+='OUTPUT' (ambiguity) props+='INHERITED'
	 *     props+='OUTPUT' (ambiguity) props+='OUTPUT'
	 *     props+='OUTPUT' (ambiguity) props+='REVERSE'
	 *     props+='OUTPUT' (ambiguity) props+='SYNTHESIZED'
	 *     props+='OUTPUT' (ambiguity) props+='THREAD'
	 *     props+='OUTPUT' (ambiguity) props+='VIRTUAL'
	 *     props+='REVERSE' (ambiguity) (rule end)
	 *     props+='REVERSE' (ambiguity) props+='IGNORE'
	 *     props+='REVERSE' (ambiguity) props+='INHERITED'
	 *     props+='REVERSE' (ambiguity) props+='OUTPUT'
	 *     props+='REVERSE' (ambiguity) props+='REVERSE'
	 *     props+='REVERSE' (ambiguity) props+='SYNTHESIZED'
	 *     props+='REVERSE' (ambiguity) props+='THREAD'
	 *     props+='REVERSE' (ambiguity) props+='VIRTUAL'
	 *     props+='SYNTHESIZED' (ambiguity) (rule end)
	 *     props+='SYNTHESIZED' (ambiguity) props+='IGNORE'
	 *     props+='SYNTHESIZED' (ambiguity) props+='INHERITED'
	 *     props+='SYNTHESIZED' (ambiguity) props+='OUTPUT'
	 *     props+='SYNTHESIZED' (ambiguity) props+='REVERSE'
	 *     props+='SYNTHESIZED' (ambiguity) props+='SYNTHESIZED'
	 *     props+='SYNTHESIZED' (ambiguity) props+='THREAD'
	 *     props+='SYNTHESIZED' (ambiguity) props+='VIRTUAL'
	 *     props+='THREAD' (ambiguity) (rule end)
	 *     props+='THREAD' (ambiguity) props+='IGNORE'
	 *     props+='THREAD' (ambiguity) props+='INHERITED'
	 *     props+='THREAD' (ambiguity) props+='OUTPUT'
	 *     props+='THREAD' (ambiguity) props+='REVERSE'
	 *     props+='THREAD' (ambiguity) props+='SYNTHESIZED'
	 *     props+='THREAD' (ambiguity) props+='THREAD'
	 *     props+='THREAD' (ambiguity) props+='VIRTUAL'
	 *     props+='VIRTUAL' (ambiguity) (rule end)
	 *     props+='VIRTUAL' (ambiguity) props+='IGNORE'
	 *     props+='VIRTUAL' (ambiguity) props+='INHERITED'
	 *     props+='VIRTUAL' (ambiguity) props+='OUTPUT'
	 *     props+='VIRTUAL' (ambiguity) props+='REVERSE'
	 *     props+='VIRTUAL' (ambiguity) props+='SYNTHESIZED'
	 *     props+='VIRTUAL' (ambiguity) props+='THREAD'
	 *     props+='VIRTUAL' (ambiguity) props+='VIRTUAL'
	 */
	protected void emit_Properties_PROPERTYKeyword_0_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'PROPERTY'+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 *     (rule start) (ambiguity) props+='INPUT'
	 *     props+='IGNORE' (ambiguity) props+='INPUT'
	 *     props+='INHERITED' (ambiguity) props+='INPUT'
	 *     props+='INPUT' (ambiguity) props+='INPUT'
	 *     props+='OUTPUT' (ambiguity) props+='INPUT'
	 *     props+='REVERSE' (ambiguity) props+='INPUT'
	 *     props+='SYNTHESIZED' (ambiguity) props+='INPUT'
	 *     props+='THREAD' (ambiguity) props+='INPUT'
	 *     props+='VIRTUAL' (ambiguity) props+='INPUT'
	 */
	protected void emit_Properties_PROPERTYKeyword_0_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
