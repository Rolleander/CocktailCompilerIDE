/*
 * generated by Xtext 2.9.1
 */
package de.roma.cocktail.xtext.serializer;

import com.google.inject.Inject;
import de.roma.cocktail.xtext.ast.AstPackage;
import de.roma.cocktail.xtext.ast.Begin;
import de.roma.cocktail.xtext.ast.Close;
import de.roma.cocktail.xtext.ast.Export;
import de.roma.cocktail.xtext.ast.Global;
import de.roma.cocktail.xtext.ast.Import;
import de.roma.cocktail.xtext.ast.Local;
import de.roma.cocktail.xtext.ast.Model;
import de.roma.cocktail.xtext.ast.Module;
import de.roma.cocktail.xtext.ast.Properties;
import de.roma.cocktail.xtext.ast.Tree;
import de.roma.cocktail.xtext.services.AstGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class AstSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private AstGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == AstPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case AstPackage.BEGIN:
				sequence_Begin(context, (Begin) semanticObject); 
				return; 
			case AstPackage.CLOSE:
				sequence_Close(context, (Close) semanticObject); 
				return; 
			case AstPackage.EXPORT:
				sequence_Export(context, (Export) semanticObject); 
				return; 
			case AstPackage.GLOBAL:
				sequence_Global(context, (Global) semanticObject); 
				return; 
			case AstPackage.IMPORT:
				sequence_Import(context, (Import) semanticObject); 
				return; 
			case AstPackage.LOCAL:
				sequence_Local(context, (Local) semanticObject); 
				return; 
			case AstPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case AstPackage.MODULE:
				sequence_Module(context, (Module) semanticObject); 
				return; 
			case AstPackage.PROPERTIES:
				sequence_Properties(context, (Properties) semanticObject); 
				return; 
			case AstPackage.TREE:
				sequence_Tree(context, (Tree) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Begin returns Begin
	 *
	 * Constraint:
	 *     code=CodeBlock
	 */
	protected void sequence_Begin(ISerializationContext context, Begin semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AstPackage.Literals.BEGIN__CODE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AstPackage.Literals.BEGIN__CODE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBeginAccess().getCodeCodeBlockParserRuleCall_2_0(), semanticObject.getCode());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Close returns Close
	 *
	 * Constraint:
	 *     code=CodeBlock
	 */
	protected void sequence_Close(ISerializationContext context, Close semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AstPackage.Literals.CLOSE__CODE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AstPackage.Literals.CLOSE__CODE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCloseAccess().getCodeCodeBlockParserRuleCall_2_0(), semanticObject.getCode());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Export returns Export
	 *
	 * Constraint:
	 *     code=CodeBlock
	 */
	protected void sequence_Export(ISerializationContext context, Export semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AstPackage.Literals.EXPORT__CODE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AstPackage.Literals.EXPORT__CODE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExportAccess().getCodeCodeBlockParserRuleCall_2_0(), semanticObject.getCode());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Global returns Global
	 *
	 * Constraint:
	 *     code=CodeBlock
	 */
	protected void sequence_Global(ISerializationContext context, Global semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AstPackage.Literals.GLOBAL__CODE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AstPackage.Literals.GLOBAL__CODE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGlobalAccess().getCodeCodeBlockParserRuleCall_2_0(), semanticObject.getCode());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Import returns Import
	 *
	 * Constraint:
	 *     code=CodeBlock
	 */
	protected void sequence_Import(ISerializationContext context, Import semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AstPackage.Literals.IMPORT__CODE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AstPackage.Literals.IMPORT__CODE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getImportAccess().getCodeCodeBlockParserRuleCall_2_0(), semanticObject.getCode());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Local returns Local
	 *
	 * Constraint:
	 *     code=CodeBlock
	 */
	protected void sequence_Local(ISerializationContext context, Local semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AstPackage.Literals.LOCAL__CODE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AstPackage.Literals.LOCAL__CODE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLocalAccess().getCodeCodeBlockParserRuleCall_2_0(), semanticObject.getCode());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     (
	 *         module=Module | 
	 *         tree=Tree | 
	 *         imp=Import | 
	 *         exp=Export | 
	 *         glo=Global | 
	 *         loc=Local | 
	 *         beg=Begin | 
	 *         clo=Close | 
	 *         pro=Properties
	 *     )+
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Module returns Module
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Module(ISerializationContext context, Module semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AstPackage.Literals.MODULE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AstPackage.Literals.MODULE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getModuleAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Properties returns Properties
	 *
	 * Constraint:
	 *     (
	 *         props+='INPUT' | 
	 *         props+='OUTPUT' | 
	 *         props+='SYNTHESIZED' | 
	 *         props+='INHERITED' | 
	 *         props+='THREAD' | 
	 *         props+='REVERSE' | 
	 *         props+='IGNORE' | 
	 *         props+='VIRTUAL'
	 *     )*
	 */
	protected void sequence_Properties(ISerializationContext context, Properties semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Tree returns Tree
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Tree(ISerializationContext context, Tree semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AstPackage.Literals.TREE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AstPackage.Literals.TREE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTreeAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
}
