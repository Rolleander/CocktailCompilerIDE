/*
 * generated by Xtext 2.9.1
 */
package de.roma.cocktail.xtext.serializer;

import com.google.inject.Inject;
import de.roma.cocktail.xtext.ast.AstPackage;
import de.roma.cocktail.xtext.ast.BaseTypes;
import de.roma.cocktail.xtext.ast.Begin;
import de.roma.cocktail.xtext.ast.ChildNode;
import de.roma.cocktail.xtext.ast.Close;
import de.roma.cocktail.xtext.ast.CodeBlock;
import de.roma.cocktail.xtext.ast.Codes;
import de.roma.cocktail.xtext.ast.Declare;
import de.roma.cocktail.xtext.ast.DeclareNode;
import de.roma.cocktail.xtext.ast.Export;
import de.roma.cocktail.xtext.ast.Extensions;
import de.roma.cocktail.xtext.ast.Global;
import de.roma.cocktail.xtext.ast.Import;
import de.roma.cocktail.xtext.ast.Local;
import de.roma.cocktail.xtext.ast.Model;
import de.roma.cocktail.xtext.ast.ModuleName;
import de.roma.cocktail.xtext.ast.Modules;
import de.roma.cocktail.xtext.ast.NodeAttribute;
import de.roma.cocktail.xtext.ast.NodeName;
import de.roma.cocktail.xtext.ast.NodePart;
import de.roma.cocktail.xtext.ast.NodePropertyList;
import de.roma.cocktail.xtext.ast.Properties;
import de.roma.cocktail.xtext.ast.PropertyList;
import de.roma.cocktail.xtext.ast.RootNode;
import de.roma.cocktail.xtext.ast.Rule;
import de.roma.cocktail.xtext.ast.Specification;
import de.roma.cocktail.xtext.ast.TargetCodeExpression;
import de.roma.cocktail.xtext.ast.Tree;
import de.roma.cocktail.xtext.services.AstGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class AstSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private AstGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == AstPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case AstPackage.BASE_TYPES:
				sequence_BaseTypes(context, (BaseTypes) semanticObject); 
				return; 
			case AstPackage.BEGIN:
				sequence_Begin(context, (Begin) semanticObject); 
				return; 
			case AstPackage.CHILD_NODE:
				sequence_ChildNode(context, (ChildNode) semanticObject); 
				return; 
			case AstPackage.CLOSE:
				sequence_Close(context, (Close) semanticObject); 
				return; 
			case AstPackage.CODE_BLOCK:
				sequence_CodeBlock(context, (CodeBlock) semanticObject); 
				return; 
			case AstPackage.CODES:
				sequence_Codes(context, (Codes) semanticObject); 
				return; 
			case AstPackage.DECLARE:
				sequence_Declare(context, (Declare) semanticObject); 
				return; 
			case AstPackage.DECLARE_NODE:
				sequence_DeclareNode(context, (DeclareNode) semanticObject); 
				return; 
			case AstPackage.EXPORT:
				sequence_Export(context, (Export) semanticObject); 
				return; 
			case AstPackage.EXTENSIONS:
				sequence_Extensions(context, (Extensions) semanticObject); 
				return; 
			case AstPackage.GLOBAL:
				sequence_Global(context, (Global) semanticObject); 
				return; 
			case AstPackage.IMPORT:
				sequence_Import(context, (Import) semanticObject); 
				return; 
			case AstPackage.LOCAL:
				sequence_Local(context, (Local) semanticObject); 
				return; 
			case AstPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case AstPackage.MODULE_NAME:
				sequence_ModuleName(context, (ModuleName) semanticObject); 
				return; 
			case AstPackage.MODULES:
				sequence_Modules(context, (Modules) semanticObject); 
				return; 
			case AstPackage.NODE_ATTRIBUTE:
				sequence_NodeAttribute(context, (NodeAttribute) semanticObject); 
				return; 
			case AstPackage.NODE_NAME:
				sequence_NodeName(context, (NodeName) semanticObject); 
				return; 
			case AstPackage.NODE_PART:
				sequence_NodePart(context, (NodePart) semanticObject); 
				return; 
			case AstPackage.NODE_PROPERTY_LIST:
				sequence_NodePropertyList(context, (NodePropertyList) semanticObject); 
				return; 
			case AstPackage.PROPERTIES:
				sequence_Properties(context, (Properties) semanticObject); 
				return; 
			case AstPackage.PROPERTY_LIST:
				sequence_PropertyList(context, (PropertyList) semanticObject); 
				return; 
			case AstPackage.ROOT_NODE:
				sequence_RootNode(context, (RootNode) semanticObject); 
				return; 
			case AstPackage.RULE:
				sequence_Rule(context, (Rule) semanticObject); 
				return; 
			case AstPackage.SPECIFICATION:
				sequence_Specification(context, (Specification) semanticObject); 
				return; 
			case AstPackage.TARGET_CODE_EXPRESSION:
				sequence_TargetCodeExpression(context, (TargetCodeExpression) semanticObject); 
				return; 
			case AstPackage.TREE:
				sequence_Tree(context, (Tree) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     BaseTypes returns BaseTypes
	 *
	 * Constraint:
	 *     names+=[NodeName|ID]+
	 */
	protected void sequence_BaseTypes(ISerializationContext context, BaseTypes semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Begin returns Begin
	 *
	 * Constraint:
	 *     code=CodeBlock
	 */
	protected void sequence_Begin(ISerializationContext context, Begin semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AstPackage.Literals.BEGIN__CODE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AstPackage.Literals.BEGIN__CODE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBeginAccess().getCodeCodeBlockParserRuleCall_2_0(), semanticObject.getCode());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ChildNode returns ChildNode
	 *
	 * Constraint:
	 *     (selector=ID? type=ID)
	 */
	protected void sequence_ChildNode(ISerializationContext context, ChildNode semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Close returns Close
	 *
	 * Constraint:
	 *     code=CodeBlock
	 */
	protected void sequence_Close(ISerializationContext context, Close semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AstPackage.Literals.CLOSE__CODE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AstPackage.Literals.CLOSE__CODE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCloseAccess().getCodeCodeBlockParserRuleCall_2_0(), semanticObject.getCode());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     CodeBlock returns CodeBlock
	 *
	 * Constraint:
	 *     (wall+=CodeWall | wall+='[' | wall+=']' | block+=CodeBlock)+
	 */
	protected void sequence_CodeBlock(ISerializationContext context, CodeBlock semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Codes returns Codes
	 *
	 * Constraint:
	 *     (
	 *         imp=Import | 
	 *         exp=Export | 
	 *         glo=Global | 
	 *         loc=Local | 
	 *         beg=Begin | 
	 *         clo=Close
	 *     )+
	 */
	protected void sequence_Codes(ISerializationContext context, Codes semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DeclareNode returns DeclareNode
	 *
	 * Constraint:
	 *     (names+=NodeName+ (type='=' | type=':') part+=NodePart*)
	 */
	protected void sequence_DeclareNode(ISerializationContext context, DeclareNode semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Declare returns Declare
	 *
	 * Constraint:
	 *     nodes+=DeclareNode+
	 */
	protected void sequence_Declare(ISerializationContext context, Declare semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Export returns Export
	 *
	 * Constraint:
	 *     code=CodeBlock
	 */
	protected void sequence_Export(ISerializationContext context, Export semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AstPackage.Literals.EXPORT__CODE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AstPackage.Literals.EXPORT__CODE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExportAccess().getCodeCodeBlockParserRuleCall_2_0(), semanticObject.getCode());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Extensions returns Extensions
	 *
	 * Constraint:
	 *     nodes+=RootNode+
	 */
	protected void sequence_Extensions(ISerializationContext context, Extensions semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Global returns Global
	 *
	 * Constraint:
	 *     code=CodeBlock
	 */
	protected void sequence_Global(ISerializationContext context, Global semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AstPackage.Literals.GLOBAL__CODE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AstPackage.Literals.GLOBAL__CODE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGlobalAccess().getCodeCodeBlockParserRuleCall_2_0(), semanticObject.getCode());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Import returns Import
	 *
	 * Constraint:
	 *     code=CodeBlock
	 */
	protected void sequence_Import(ISerializationContext context, Import semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AstPackage.Literals.IMPORT__CODE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AstPackage.Literals.IMPORT__CODE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getImportAccess().getCodeCodeBlockParserRuleCall_2_0(), semanticObject.getCode());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Local returns Local
	 *
	 * Constraint:
	 *     code=CodeBlock
	 */
	protected void sequence_Local(ISerializationContext context, Local semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AstPackage.Literals.LOCAL__CODE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AstPackage.Literals.LOCAL__CODE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLocalAccess().getCodeCodeBlockParserRuleCall_2_0(), semanticObject.getCode());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     ((sepcification=Specification modules+=Modules+) | modules+=Modules+)?
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ModuleName returns ModuleName
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_ModuleName(ISerializationContext context, ModuleName semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AstPackage.Literals.MODULE_NAME__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AstPackage.Literals.MODULE_NAME__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getModuleNameAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Modules returns Modules
	 *
	 * Constraint:
	 *     (moduleName=ModuleName specification=Specification moduleNameEnd=[ModuleName|ID])
	 */
	protected void sequence_Modules(ISerializationContext context, Modules semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AstPackage.Literals.MODULES__MODULE_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AstPackage.Literals.MODULES__MODULE_NAME));
			if (transientValues.isValueTransient(semanticObject, AstPackage.Literals.MODULES__SPECIFICATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AstPackage.Literals.MODULES__SPECIFICATION));
			if (transientValues.isValueTransient(semanticObject, AstPackage.Literals.MODULES__MODULE_NAME_END) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AstPackage.Literals.MODULES__MODULE_NAME_END));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getModulesAccess().getModuleNameModuleNameParserRuleCall_1_0(), semanticObject.getModuleName());
		feeder.accept(grammarAccess.getModulesAccess().getSpecificationSpecificationParserRuleCall_2_0(), semanticObject.getSpecification());
		feeder.accept(grammarAccess.getModulesAccess().getModuleNameEndModuleNameIDTerminalRuleCall_4_0_1(), semanticObject.getModuleNameEnd());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NodeAttribute returns NodeAttribute
	 *
	 * Constraint:
	 *     (attribute=ID type=ID? (properties=NodePropertyList | expression=TargetCodeExpression)?)
	 */
	protected void sequence_NodeAttribute(ISerializationContext context, NodeAttribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NodeName returns NodeName
	 *
	 * Constraint:
	 *     (name=ID | name=STRING)
	 */
	protected void sequence_NodeName(ISerializationContext context, NodeName semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NodePart returns NodePart
	 *
	 * Constraint:
	 *     ((child=ChildNode properties=NodePropertyList) | attribute=NodeAttribute)
	 */
	protected void sequence_NodePart(ISerializationContext context, NodePart semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NodePropertyList returns NodePropertyList
	 *
	 * Constraint:
	 *     (
	 *         props+='INPUT' | 
	 *         props+='OUTPUT' | 
	 *         props+='SYNTHESIZED' | 
	 *         props+='INHERITED' | 
	 *         props+='THREAD' | 
	 *         props+='REVERSE' | 
	 *         props+='IGNORE' | 
	 *         props+='VIRTUAL' | 
	 *         props+='IN' | 
	 *         props+='OUT' | 
	 *         props+='SYN' | 
	 *         props+='INH' | 
	 *         props+='REV'
	 *     )+
	 */
	protected void sequence_NodePropertyList(ISerializationContext context, NodePropertyList semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Properties returns Properties
	 *
	 * Constraint:
	 *     property=PropertyList
	 */
	protected void sequence_Properties(ISerializationContext context, Properties semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AstPackage.Literals.PROPERTIES__PROPERTY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AstPackage.Literals.PROPERTIES__PROPERTY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPropertiesAccess().getPropertyPropertyListParserRuleCall_1_0(), semanticObject.getProperty());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PropertyList returns PropertyList
	 *
	 * Constraint:
	 *     (
	 *         props+='INPUT' | 
	 *         props+='OUTPUT' | 
	 *         props+='SYNTHESIZED' | 
	 *         props+='INHERITED' | 
	 *         props+='THREAD' | 
	 *         props+='REVERSE' | 
	 *         props+='IGNORE' | 
	 *         props+='VIRTUAL'
	 *     )+
	 */
	protected void sequence_PropertyList(ISerializationContext context, PropertyList semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RootNode returns RootNode
	 *
	 * Constraint:
	 *     (name=NodeName baseTypes=BaseTypes? type=NodeType? part+=NodePart* extension=Extensions?)
	 */
	protected void sequence_RootNode(ISerializationContext context, RootNode semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Rule returns Rule
	 *
	 * Constraint:
	 *     nodes+=RootNode+
	 */
	protected void sequence_Rule(ISerializationContext context, Rule semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Specification returns Specification
	 *
	 * Constraint:
	 *     (tree=Tree code=Codes properties=Properties? declare=Declare? rules=Rule?)
	 */
	protected void sequence_Specification(ISerializationContext context, Specification semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TargetCodeExpression returns TargetCodeExpression
	 *
	 * Constraint:
	 *     code+=CodeWall+
	 */
	protected void sequence_TargetCodeExpression(ISerializationContext context, TargetCodeExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Tree returns Tree
	 *
	 * Constraint:
	 *     (name=ID prefix=ID? ((subUnitName='SUBUNIT' | subUnitName='VIEW') subUnits+=ID+)?)
	 */
	protected void sequence_Tree(ISerializationContext context, Tree semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
