/*
 * generated by Xtext
 */
package org.xtext.cocktail.serializer;

import com.google.inject.Inject;
import com.google.inject.Provider;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.serializer.acceptor.ISemanticSequenceAcceptor;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.diagnostic.ISemanticSequencerDiagnosticProvider;
import org.eclipse.xtext.serializer.diagnostic.ISerializationDiagnostic.Acceptor;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.GenericSequencer;
import org.eclipse.xtext.serializer.sequencer.ISemanticNodeProvider.INodesForEObjectProvider;
import org.eclipse.xtext.serializer.sequencer.ISemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.cocktail.scanner.ActionStatement;
import org.xtext.cocktail.scanner.Default;
import org.xtext.cocktail.scanner.Define;
import org.xtext.cocktail.scanner.DefineRule;
import org.xtext.cocktail.scanner.Eof;
import org.xtext.cocktail.scanner.Export;
import org.xtext.cocktail.scanner.Global;
import org.xtext.cocktail.scanner.Local;
import org.xtext.cocktail.scanner.Model;
import org.xtext.cocktail.scanner.Rule;
import org.xtext.cocktail.scanner.RuleStart;
import org.xtext.cocktail.scanner.Scanner;
import org.xtext.cocktail.scanner.ScannerPackage;
import org.xtext.cocktail.scanner.SingleRule;
import org.xtext.cocktail.scanner.StartState;
import org.xtext.cocktail.scanner.StartStates;
import org.xtext.cocktail.services.ScannerGrammarAccess;

@SuppressWarnings("all")
public class ScannerSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private ScannerGrammarAccess grammarAccess;
	
	@Override
	public void createSequence(EObject context, EObject semanticObject) {
		if(semanticObject.eClass().getEPackage() == ScannerPackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case ScannerPackage.ACTION_STATEMENT:
				sequence_ActionStatement(context, (ActionStatement) semanticObject); 
				return; 
			case ScannerPackage.DEFAULT:
				sequence_Default(context, (Default) semanticObject); 
				return; 
			case ScannerPackage.DEFINE:
				sequence_Define(context, (Define) semanticObject); 
				return; 
			case ScannerPackage.DEFINE_RULE:
				sequence_DefineRule(context, (DefineRule) semanticObject); 
				return; 
			case ScannerPackage.EOF:
				sequence_Eof(context, (Eof) semanticObject); 
				return; 
			case ScannerPackage.EXPORT:
				sequence_Export(context, (Export) semanticObject); 
				return; 
			case ScannerPackage.GLOBAL:
				sequence_Global(context, (Global) semanticObject); 
				return; 
			case ScannerPackage.LOCAL:
				sequence_Local(context, (Local) semanticObject); 
				return; 
			case ScannerPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case ScannerPackage.RULE:
				sequence_Rule(context, (Rule) semanticObject); 
				return; 
			case ScannerPackage.RULE_START:
				if(context == grammarAccess.getRuleStartRule()) {
					sequence_RuleStart(context, (RuleStart) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getSingleRuleRule()) {
					sequence_RuleStart_SingleRule(context, (RuleStart) semanticObject); 
					return; 
				}
				else break;
			case ScannerPackage.SCANNER:
				sequence_Scanner(context, (Scanner) semanticObject); 
				return; 
			case ScannerPackage.SINGLE_RULE:
				sequence_SingleRule(context, (SingleRule) semanticObject); 
				return; 
			case ScannerPackage.START_STATE:
				sequence_StartState(context, (StartState) semanticObject); 
				return; 
			case ScannerPackage.START_STATES:
				sequence_StartStates(context, (StartStates) semanticObject); 
				return; 
			}
		if (errorAcceptor != null) errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Constraint:
	 *     (st+=[Scanner|ID] | st+=[Scanner|ID] | st+=[Scanner|ID])?
	 */
	protected void sequence_ActionStatement(EObject context, ActionStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     content=ID
	 */
	protected void sequence_Default(EObject context, Default semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, ScannerPackage.Literals.DEFAULT__CONTENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ScannerPackage.Literals.DEFAULT__CONTENT));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getDefaultAccess().getContentIDTerminalRuleCall_1_0(), semanticObject.getContent());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID rule=ID)
	 */
	protected void sequence_DefineRule(EObject context, DefineRule semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, ScannerPackage.Literals.DEFINE_RULE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ScannerPackage.Literals.DEFINE_RULE__NAME));
			if(transientValues.isValueTransient(semanticObject, ScannerPackage.Literals.DEFINE_RULE__RULE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ScannerPackage.Literals.DEFINE_RULE__RULE));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getDefineRuleAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getDefineRuleAccess().getRuleIDTerminalRuleCall_2_0(), semanticObject.getRule());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     defines+=DefineRule+
	 */
	protected void sequence_Define(EObject context, Define semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     content=ID
	 */
	protected void sequence_Eof(EObject context, Eof semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, ScannerPackage.Literals.EOF__CONTENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ScannerPackage.Literals.EOF__CONTENT));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getEofAccess().getContentIDTerminalRuleCall_1_0(), semanticObject.getContent());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     content=ID
	 */
	protected void sequence_Export(EObject context, Export semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, ScannerPackage.Literals.EXPORT__CONTENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ScannerPackage.Literals.EXPORT__CONTENT));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getExportAccess().getContentIDTerminalRuleCall_1_0(), semanticObject.getContent());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     content=ID
	 */
	protected void sequence_Global(EObject context, Global semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, ScannerPackage.Literals.GLOBAL__CONTENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ScannerPackage.Literals.GLOBAL__CONTENT));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getGlobalAccess().getContentIDTerminalRuleCall_1_0(), semanticObject.getContent());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     content=ID
	 */
	protected void sequence_Local(EObject context, Local semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, ScannerPackage.Literals.LOCAL__CONTENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ScannerPackage.Literals.LOCAL__CONTENT));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getLocalAccess().getContentIDTerminalRuleCall_1_0(), semanticObject.getContent());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         scanner+=Scanner? 
	 *         scanner+=Export? 
	 *         scanner+=Global? 
	 *         scanner+=Local? 
	 *         scanner+=Default? 
	 *         scanner+=Eof? 
	 *         scanner+=Define 
	 *         scanner+=StartStates? 
	 *         scanner+=Rule
	 *     )
	 */
	protected void sequence_Model(EObject context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (state+=[StartState|ID] state+=[StartState|ID]*)?
	 */
	protected void sequence_RuleStart(EObject context, RuleStart semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (state+=[StartState|ID] state+=[StartState|ID]* rule+=STRING content+=ID)
	 */
	protected void sequence_RuleStart_SingleRule(EObject context, RuleStart semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     content=SingleRule*
	 */
	protected void sequence_Rule(EObject context, Rule semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Scanner(EObject context, Scanner semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, ScannerPackage.Literals.SCANNER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ScannerPackage.Literals.SCANNER__NAME));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getScannerAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (rule+=STRING content+=ID)
	 */
	protected void sequence_SingleRule(EObject context, SingleRule semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_StartState(EObject context, StartState semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, ScannerPackage.Literals.START_STATE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ScannerPackage.Literals.START_STATE__NAME));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getStartStateAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (incstates+=StartState incstates+=StartState* (exstates+=StartState exstates+=StartState*)?)
	 */
	protected void sequence_StartStates(EObject context, StartStates semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
}
