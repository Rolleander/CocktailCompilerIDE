/*
 * generated by Xtext
 */
package org.xtext.cocktail.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xtext.cocktail.services.ScannerGrammarAccess;

@SuppressWarnings("all")
public class ScannerSyntacticSequencer extends AbstractSyntacticSequencer {

	protected ScannerGrammarAccess grammarAccess;
	protected AbstractElementAlias match_StartStates___CommaKeyword_2_0_IDTerminalRuleCall_2_1__a;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (ScannerGrammarAccess) access;
		match_StartStates___CommaKeyword_2_0_IDTerminalRuleCall_2_1__a = new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getStartStatesAccess().getCommaKeyword_2_0()), new TokenAlias(false, false, grammarAccess.getStartStatesAccess().getIDTerminalRuleCall_2_1()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if(ruleCall.getRule() == grammarAccess.getIDRule())
			return getIDToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * terminal ID  		: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	 */
	protected String getIDToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if(match_StartStates___CommaKeyword_2_0_IDTerminalRuleCall_2_1__a.equals(syntax))
				emit_StartStates___CommaKeyword_2_0_IDTerminalRuleCall_2_1__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     (',' ID)*
	 *
	 * This ambiguous syntax occurs at:
	 *     states+=ID (ambiguity) (rule end)
	 */
	protected void emit_StartStates___CommaKeyword_2_0_IDTerminalRuleCall_2_1__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
