/*
 * generated by Xtext
 */
package org.xtext.cocktail.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class ScannerGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cScannerAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cScannerTitleParserRuleCall_0_0 = (RuleCall)cScannerAssignment_0.eContents().get(0);
		private final Assignment cScannerAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cScannerExportParserRuleCall_1_0 = (RuleCall)cScannerAssignment_1.eContents().get(0);
		private final Assignment cScannerAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cScannerGlobalParserRuleCall_2_0 = (RuleCall)cScannerAssignment_2.eContents().get(0);
		private final Assignment cScannerAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cScannerLocalParserRuleCall_3_0 = (RuleCall)cScannerAssignment_3.eContents().get(0);
		private final Assignment cScannerAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cScannerDefaultParserRuleCall_4_0 = (RuleCall)cScannerAssignment_4.eContents().get(0);
		private final Assignment cScannerAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cScannerEofParserRuleCall_5_0 = (RuleCall)cScannerAssignment_5.eContents().get(0);
		private final Assignment cScannerAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cScannerDefineParserRuleCall_6_0 = (RuleCall)cScannerAssignment_6.eContents().get(0);
		private final Assignment cScannerAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cScannerStartStatesParserRuleCall_7_0 = (RuleCall)cScannerAssignment_7.eContents().get(0);
		private final Assignment cScannerAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cScannerRuleParserRuleCall_8_0 = (RuleCall)cScannerAssignment_8.eContents().get(0);
		
		//Model:
		//	scanner+=Title scanner+=Export scanner+=Global scanner+=Local scanner+=Default scanner+=Eof scanner+=Define
		//	scanner+=StartStates scanner+=Rule;
		@Override public ParserRule getRule() { return rule; }

		//scanner+=Title scanner+=Export scanner+=Global scanner+=Local scanner+=Default scanner+=Eof scanner+=Define
		//scanner+=StartStates scanner+=Rule
		public Group getGroup() { return cGroup; }

		//scanner+=Title
		public Assignment getScannerAssignment_0() { return cScannerAssignment_0; }

		//Title
		public RuleCall getScannerTitleParserRuleCall_0_0() { return cScannerTitleParserRuleCall_0_0; }

		//scanner+=Export
		public Assignment getScannerAssignment_1() { return cScannerAssignment_1; }

		//Export
		public RuleCall getScannerExportParserRuleCall_1_0() { return cScannerExportParserRuleCall_1_0; }

		//scanner+=Global
		public Assignment getScannerAssignment_2() { return cScannerAssignment_2; }

		//Global
		public RuleCall getScannerGlobalParserRuleCall_2_0() { return cScannerGlobalParserRuleCall_2_0; }

		//scanner+=Local
		public Assignment getScannerAssignment_3() { return cScannerAssignment_3; }

		//Local
		public RuleCall getScannerLocalParserRuleCall_3_0() { return cScannerLocalParserRuleCall_3_0; }

		//scanner+=Default
		public Assignment getScannerAssignment_4() { return cScannerAssignment_4; }

		//Default
		public RuleCall getScannerDefaultParserRuleCall_4_0() { return cScannerDefaultParserRuleCall_4_0; }

		//scanner+=Eof
		public Assignment getScannerAssignment_5() { return cScannerAssignment_5; }

		//Eof
		public RuleCall getScannerEofParserRuleCall_5_0() { return cScannerEofParserRuleCall_5_0; }

		//scanner+=Define
		public Assignment getScannerAssignment_6() { return cScannerAssignment_6; }

		//Define
		public RuleCall getScannerDefineParserRuleCall_6_0() { return cScannerDefineParserRuleCall_6_0; }

		//scanner+=StartStates
		public Assignment getScannerAssignment_7() { return cScannerAssignment_7; }

		//StartStates
		public RuleCall getScannerStartStatesParserRuleCall_7_0() { return cScannerStartStatesParserRuleCall_7_0; }

		//scanner+=Rule
		public Assignment getScannerAssignment_8() { return cScannerAssignment_8; }

		//Rule
		public RuleCall getScannerRuleParserRuleCall_8_0() { return cScannerRuleParserRuleCall_8_0; }
	}

	public class TitleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Title");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSCANNERKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Title:
		//	"SCANNER" name=ID;
		@Override public ParserRule getRule() { return rule; }

		//"SCANNER" name=ID
		public Group getGroup() { return cGroup; }

		//"SCANNER"
		public Keyword getSCANNERKeyword_0() { return cSCANNERKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class ExportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Export");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEXPORTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cContentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cContentIDTerminalRuleCall_1_0 = (RuleCall)cContentAssignment_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Export:
		//	"EXPORT {" content=ID "}";
		@Override public ParserRule getRule() { return rule; }

		//"EXPORT {" content=ID "}"
		public Group getGroup() { return cGroup; }

		//"EXPORT {"
		public Keyword getEXPORTKeyword_0() { return cEXPORTKeyword_0; }

		//content=ID
		public Assignment getContentAssignment_1() { return cContentAssignment_1; }

		//ID
		public RuleCall getContentIDTerminalRuleCall_1_0() { return cContentIDTerminalRuleCall_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}

	public class GlobalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Global");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGLOBALKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cContentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cContentIDTerminalRuleCall_1_0 = (RuleCall)cContentAssignment_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Global:
		//	"GLOBAL {" content=ID "}";
		@Override public ParserRule getRule() { return rule; }

		//"GLOBAL {" content=ID "}"
		public Group getGroup() { return cGroup; }

		//"GLOBAL {"
		public Keyword getGLOBALKeyword_0() { return cGLOBALKeyword_0; }

		//content=ID
		public Assignment getContentAssignment_1() { return cContentAssignment_1; }

		//ID
		public RuleCall getContentIDTerminalRuleCall_1_0() { return cContentIDTerminalRuleCall_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}

	public class LocalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Local");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLOCALKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cContentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cContentIDTerminalRuleCall_1_0 = (RuleCall)cContentAssignment_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Local:
		//	"LOCAL {" content=ID "}";
		@Override public ParserRule getRule() { return rule; }

		//"LOCAL {" content=ID "}"
		public Group getGroup() { return cGroup; }

		//"LOCAL {"
		public Keyword getLOCALKeyword_0() { return cLOCALKeyword_0; }

		//content=ID
		public Assignment getContentAssignment_1() { return cContentAssignment_1; }

		//ID
		public RuleCall getContentIDTerminalRuleCall_1_0() { return cContentIDTerminalRuleCall_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}

	public class DefaultElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Default");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDEFAULTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cContentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cContentIDTerminalRuleCall_1_0 = (RuleCall)cContentAssignment_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Default:
		//	"DEFAULT {" content=ID "}";
		@Override public ParserRule getRule() { return rule; }

		//"DEFAULT {" content=ID "}"
		public Group getGroup() { return cGroup; }

		//"DEFAULT {"
		public Keyword getDEFAULTKeyword_0() { return cDEFAULTKeyword_0; }

		//content=ID
		public Assignment getContentAssignment_1() { return cContentAssignment_1; }

		//ID
		public RuleCall getContentIDTerminalRuleCall_1_0() { return cContentIDTerminalRuleCall_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}

	public class EofElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Eof");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEOFKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cContentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cContentIDTerminalRuleCall_1_0 = (RuleCall)cContentAssignment_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Eof:
		//	"EOF {" content=ID "}";
		@Override public ParserRule getRule() { return rule; }

		//"EOF {" content=ID "}"
		public Group getGroup() { return cGroup; }

		//"EOF {"
		public Keyword getEOFKeyword_0() { return cEOFKeyword_0; }

		//content=ID
		public Assignment getContentAssignment_1() { return cContentAssignment_1; }

		//ID
		public RuleCall getContentIDTerminalRuleCall_1_0() { return cContentIDTerminalRuleCall_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}

	public class DefineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Define");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDEFINEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDefinesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDefinesDefineRuleParserRuleCall_1_0 = (RuleCall)cDefinesAssignment_1.eContents().get(0);
		
		//Define:
		//	"DEFINE" defines+=DefineRule+;
		@Override public ParserRule getRule() { return rule; }

		//"DEFINE" defines+=DefineRule+
		public Group getGroup() { return cGroup; }

		//"DEFINE"
		public Keyword getDEFINEKeyword_0() { return cDEFINEKeyword_0; }

		//defines+=DefineRule+
		public Assignment getDefinesAssignment_1() { return cDefinesAssignment_1; }

		//DefineRule
		public RuleCall getDefinesDefineRuleParserRuleCall_1_0() { return cDefinesDefineRuleParserRuleCall_1_0; }
	}

	public class DefineRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DefineRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDefineNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDefineNameIDTerminalRuleCall_0_0 = (RuleCall)cDefineNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDefineRuleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDefineRuleIDTerminalRuleCall_2_0 = (RuleCall)cDefineRuleAssignment_2.eContents().get(0);
		
		//DefineRule:
		//	defineName=ID "=" defineRule=ID;
		@Override public ParserRule getRule() { return rule; }

		//defineName=ID "=" defineRule=ID
		public Group getGroup() { return cGroup; }

		//defineName=ID
		public Assignment getDefineNameAssignment_0() { return cDefineNameAssignment_0; }

		//ID
		public RuleCall getDefineNameIDTerminalRuleCall_0_0() { return cDefineNameIDTerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//defineRule=ID
		public Assignment getDefineRuleAssignment_2() { return cDefineRuleAssignment_2; }

		//ID
		public RuleCall getDefineRuleIDTerminalRuleCall_2_0() { return cDefineRuleIDTerminalRuleCall_2_0; }
	}

	public class StartStatesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StartStates");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSTARTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStatesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStatesStartStateParserRuleCall_1_0 = (RuleCall)cStatesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cStatesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cStatesStartStateParserRuleCall_2_1_0 = (RuleCall)cStatesAssignment_2_1.eContents().get(0);
		
		//StartStates:
		//	"START" states+=StartState ("," states+=StartState)*;
		@Override public ParserRule getRule() { return rule; }

		//"START" states+=StartState ("," states+=StartState)*
		public Group getGroup() { return cGroup; }

		//"START"
		public Keyword getSTARTKeyword_0() { return cSTARTKeyword_0; }

		//states+=StartState
		public Assignment getStatesAssignment_1() { return cStatesAssignment_1; }

		//StartState
		public RuleCall getStatesStartStateParserRuleCall_1_0() { return cStatesStartStateParserRuleCall_1_0; }

		//("," states+=StartState)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//states+=StartState
		public Assignment getStatesAssignment_2_1() { return cStatesAssignment_2_1; }

		//StartState
		public RuleCall getStatesStartStateParserRuleCall_2_1_0() { return cStatesStartStateParserRuleCall_2_1_0; }
	}

	public class StartStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StartState");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//StartState:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Rule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRULEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cContentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cContentSingleRuleParserRuleCall_1_0 = (RuleCall)cContentAssignment_1.eContents().get(0);
		
		//Rule:
		//	"RULE" content=SingleRule*;
		@Override public ParserRule getRule() { return rule; }

		//"RULE" content=SingleRule*
		public Group getGroup() { return cGroup; }

		//"RULE"
		public Keyword getRULEKeyword_0() { return cRULEKeyword_0; }

		//content=SingleRule*
		public Assignment getContentAssignment_1() { return cContentAssignment_1; }

		//SingleRule
		public RuleCall getContentSingleRuleParserRuleCall_1_0() { return cContentSingleRuleParserRuleCall_1_0; }
	}

	public class SingleRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SingleRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cStateAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final CrossReference cStateStartStateCrossReference_1_0_0 = (CrossReference)cStateAssignment_1_0.eContents().get(0);
		private final RuleCall cStateStartStateIDTerminalRuleCall_1_0_0_1 = (RuleCall)cStateStartStateCrossReference_1_0_0.eContents().get(1);
		private final Keyword cSTDKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Keyword cNumberSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRegexAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRegexANY_OTHERTerminalRuleCall_3_0 = (RuleCall)cRegexAssignment_3.eContents().get(0);
		private final Keyword cColonSpaceLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cSTRINGTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		////Rule: #Statename# oder #STD# regex :  { rule-content }
		//SingleRule:
		//	"#" (state+=[StartState] | "STD") "#" regex+=ANY_OTHER+ ": {" STRING "}";
		@Override public ParserRule getRule() { return rule; }

		//"#" (state+=[StartState] | "STD") "#" regex+=ANY_OTHER+ ": {" STRING "}"
		public Group getGroup() { return cGroup; }

		//"#"
		public Keyword getNumberSignKeyword_0() { return cNumberSignKeyword_0; }

		//state+=[StartState] | "STD"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//state+=[StartState]
		public Assignment getStateAssignment_1_0() { return cStateAssignment_1_0; }

		//[StartState]
		public CrossReference getStateStartStateCrossReference_1_0_0() { return cStateStartStateCrossReference_1_0_0; }

		//ID
		public RuleCall getStateStartStateIDTerminalRuleCall_1_0_0_1() { return cStateStartStateIDTerminalRuleCall_1_0_0_1; }

		//"STD"
		public Keyword getSTDKeyword_1_1() { return cSTDKeyword_1_1; }

		//"#"
		public Keyword getNumberSignKeyword_2() { return cNumberSignKeyword_2; }

		//regex+=ANY_OTHER+
		public Assignment getRegexAssignment_3() { return cRegexAssignment_3; }

		//ANY_OTHER
		public RuleCall getRegexANY_OTHERTerminalRuleCall_3_0() { return cRegexANY_OTHERTerminalRuleCall_3_0; }

		//": {"
		public Keyword getColonSpaceLeftCurlyBracketKeyword_4() { return cColonSpaceLeftCurlyBracketKeyword_4; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_5() { return cSTRINGTerminalRuleCall_5; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class RegularExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RegularExpression");
		private final RuleCall cOrExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//// Fremdcode importiert
		////# von https://www.eclipse.org/forums/index.php/t/600708/
		//RegularExpression:
		//	OrExpression;
		@Override public ParserRule getRule() { return rule; }

		//OrExpression
		public RuleCall getOrExpressionParserRuleCall() { return cOrExpressionParserRuleCall; }
	}

	public class OrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSequenceExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightSequenceExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//OrExpression:
		//	SequenceExpression ({OrExpression.left=current} "+" right=SequenceExpression)*;
		@Override public ParserRule getRule() { return rule; }

		//SequenceExpression ({OrExpression.left=current} "+" right=SequenceExpression)*
		public Group getGroup() { return cGroup; }

		//SequenceExpression
		public RuleCall getSequenceExpressionParserRuleCall_0() { return cSequenceExpressionParserRuleCall_0; }

		//({OrExpression.left=current} "+" right=SequenceExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{OrExpression.left=current}
		public Action getOrExpressionLeftAction_1_0() { return cOrExpressionLeftAction_1_0; }

		//"+"
		public Keyword getPlusSignKeyword_1_1() { return cPlusSignKeyword_1_1; }

		//right=SequenceExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//SequenceExpression
		public RuleCall getRightSequenceExpressionParserRuleCall_1_2_0() { return cRightSequenceExpressionParserRuleCall_1_2_0; }
	}

	public class SequenceExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SequenceExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cHighBindExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cSequenceExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightHighBindExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//// note the abscence of a syntactic separating symbol -> juxtaposition!
		//SequenceExpression:
		//	HighBindExpression ({SequenceExpression.left=current} right=HighBindExpression)*;
		@Override public ParserRule getRule() { return rule; }

		//HighBindExpression ({SequenceExpression.left=current} right=HighBindExpression)*
		public Group getGroup() { return cGroup; }

		//HighBindExpression
		public RuleCall getHighBindExpressionParserRuleCall_0() { return cHighBindExpressionParserRuleCall_0; }

		//({SequenceExpression.left=current} right=HighBindExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{SequenceExpression.left=current}
		public Action getSequenceExpressionLeftAction_1_0() { return cSequenceExpressionLeftAction_1_0; }

		//right=HighBindExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//HighBindExpression
		public RuleCall getRightHighBindExpressionParserRuleCall_1_1_0() { return cRightHighBindExpressionParserRuleCall_1_1_0; }
	}

	public class HighBindExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HighBindExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAtomicExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAsteriskKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Action cStarExpressionInnerExpressionAction_1_1 = (Action)cGroup_1.eContents().get(1);
		private final Keyword cAsteriskKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//HighBindExpression:
		//	AtomicExpression ("*" {StarExpression.innerExpression=current} "*"*)?;
		@Override public ParserRule getRule() { return rule; }

		//AtomicExpression ("*" {StarExpression.innerExpression=current} "*"*)?
		public Group getGroup() { return cGroup; }

		//AtomicExpression
		public RuleCall getAtomicExpressionParserRuleCall_0() { return cAtomicExpressionParserRuleCall_0; }

		//("*" {StarExpression.innerExpression=current} "*"*)?
		public Group getGroup_1() { return cGroup_1; }

		//"*"
		public Keyword getAsteriskKeyword_1_0() { return cAsteriskKeyword_1_0; }

		//{StarExpression.innerExpression=current}
		public Action getStarExpressionInnerExpressionAction_1_1() { return cStarExpressionInnerExpressionAction_1_1; }

		//"*"*
		public Keyword getAsteriskKeyword_1_2() { return cAsteriskKeyword_1_2; }
	}

	public class AtomicExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AtomicExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBracedExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAtomParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AtomicExpression:
		//	BracedExpression | Atom;
		@Override public ParserRule getRule() { return rule; }

		//BracedExpression | Atom
		public Alternatives getAlternatives() { return cAlternatives; }

		//BracedExpression
		public RuleCall getBracedExpressionParserRuleCall_0() { return cBracedExpressionParserRuleCall_0; }

		//Atom
		public RuleCall getAtomParserRuleCall_1() { return cAtomParserRuleCall_1; }
	}

	public class BracedExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BracedExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cInnerExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInnerExpressionRegularExpressionParserRuleCall_1_0 = (RuleCall)cInnerExpressionAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//BracedExpression:
		//	"(" innerExpression=RegularExpression ")";
		@Override public ParserRule getRule() { return rule; }

		//"(" innerExpression=RegularExpression ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//innerExpression=RegularExpression
		public Assignment getInnerExpressionAssignment_1() { return cInnerExpressionAssignment_1; }

		//RegularExpression
		public RuleCall getInnerExpressionRegularExpressionParserRuleCall_1_0() { return cInnerExpressionRegularExpressionParserRuleCall_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class AtomElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Atom");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueCHARTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//Atom:
		//	value=CHAR;
		@Override public ParserRule getRule() { return rule; }

		//value=CHAR
		public Assignment getValueAssignment() { return cValueAssignment; }

		//CHAR
		public RuleCall getValueCHARTerminalRuleCall_0() { return cValueCHARTerminalRuleCall_0; }
	}
	
	
	private final ModelElements pModel;
	private final TitleElements pTitle;
	private final ExportElements pExport;
	private final GlobalElements pGlobal;
	private final LocalElements pLocal;
	private final DefaultElements pDefault;
	private final EofElements pEof;
	private final DefineElements pDefine;
	private final DefineRuleElements pDefineRule;
	private final StartStatesElements pStartStates;
	private final StartStateElements pStartState;
	private final RuleElements pRule;
	private final SingleRuleElements pSingleRule;
	private final RegularExpressionElements pRegularExpression;
	private final OrExpressionElements pOrExpression;
	private final SequenceExpressionElements pSequenceExpression;
	private final HighBindExpressionElements pHighBindExpression;
	private final AtomicExpressionElements pAtomicExpression;
	private final BracedExpressionElements pBracedExpression;
	private final AtomElements pAtom;
	private final TerminalRule tCHAR;
	private final TerminalRule tWS;
	private final TerminalRule tANY_OTHER;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ScannerGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pTitle = new TitleElements();
		this.pExport = new ExportElements();
		this.pGlobal = new GlobalElements();
		this.pLocal = new LocalElements();
		this.pDefault = new DefaultElements();
		this.pEof = new EofElements();
		this.pDefine = new DefineElements();
		this.pDefineRule = new DefineRuleElements();
		this.pStartStates = new StartStatesElements();
		this.pStartState = new StartStateElements();
		this.pRule = new RuleElements();
		this.pSingleRule = new SingleRuleElements();
		this.pRegularExpression = new RegularExpressionElements();
		this.pOrExpression = new OrExpressionElements();
		this.pSequenceExpression = new SequenceExpressionElements();
		this.pHighBindExpression = new HighBindExpressionElements();
		this.pAtomicExpression = new AtomicExpressionElements();
		this.pBracedExpression = new BracedExpressionElements();
		this.pAtom = new AtomElements();
		this.tCHAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "CHAR");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS");
		this.tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ANY_OTHER");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.cocktail.Scanner".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	scanner+=Title scanner+=Export scanner+=Global scanner+=Local scanner+=Default scanner+=Eof scanner+=Define
	//	scanner+=StartStates scanner+=Rule;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Title:
	//	"SCANNER" name=ID;
	public TitleElements getTitleAccess() {
		return pTitle;
	}
	
	public ParserRule getTitleRule() {
		return getTitleAccess().getRule();
	}

	//Export:
	//	"EXPORT {" content=ID "}";
	public ExportElements getExportAccess() {
		return pExport;
	}
	
	public ParserRule getExportRule() {
		return getExportAccess().getRule();
	}

	//Global:
	//	"GLOBAL {" content=ID "}";
	public GlobalElements getGlobalAccess() {
		return pGlobal;
	}
	
	public ParserRule getGlobalRule() {
		return getGlobalAccess().getRule();
	}

	//Local:
	//	"LOCAL {" content=ID "}";
	public LocalElements getLocalAccess() {
		return pLocal;
	}
	
	public ParserRule getLocalRule() {
		return getLocalAccess().getRule();
	}

	//Default:
	//	"DEFAULT {" content=ID "}";
	public DefaultElements getDefaultAccess() {
		return pDefault;
	}
	
	public ParserRule getDefaultRule() {
		return getDefaultAccess().getRule();
	}

	//Eof:
	//	"EOF {" content=ID "}";
	public EofElements getEofAccess() {
		return pEof;
	}
	
	public ParserRule getEofRule() {
		return getEofAccess().getRule();
	}

	//Define:
	//	"DEFINE" defines+=DefineRule+;
	public DefineElements getDefineAccess() {
		return pDefine;
	}
	
	public ParserRule getDefineRule() {
		return getDefineAccess().getRule();
	}

	//DefineRule:
	//	defineName=ID "=" defineRule=ID;
	public DefineRuleElements getDefineRuleAccess() {
		return pDefineRule;
	}
	
	public ParserRule getDefineRuleRule() {
		return getDefineRuleAccess().getRule();
	}

	//StartStates:
	//	"START" states+=StartState ("," states+=StartState)*;
	public StartStatesElements getStartStatesAccess() {
		return pStartStates;
	}
	
	public ParserRule getStartStatesRule() {
		return getStartStatesAccess().getRule();
	}

	//StartState:
	//	name=ID;
	public StartStateElements getStartStateAccess() {
		return pStartState;
	}
	
	public ParserRule getStartStateRule() {
		return getStartStateAccess().getRule();
	}

	//Rule:
	//	"RULE" content=SingleRule*;
	public RuleElements getRuleAccess() {
		return pRule;
	}
	
	public ParserRule getRuleRule() {
		return getRuleAccess().getRule();
	}

	////Rule: #Statename# oder #STD# regex :  { rule-content }
	//SingleRule:
	//	"#" (state+=[StartState] | "STD") "#" regex+=ANY_OTHER+ ": {" STRING "}";
	public SingleRuleElements getSingleRuleAccess() {
		return pSingleRule;
	}
	
	public ParserRule getSingleRuleRule() {
		return getSingleRuleAccess().getRule();
	}

	//// Fremdcode importiert
	////# von https://www.eclipse.org/forums/index.php/t/600708/
	//RegularExpression:
	//	OrExpression;
	public RegularExpressionElements getRegularExpressionAccess() {
		return pRegularExpression;
	}
	
	public ParserRule getRegularExpressionRule() {
		return getRegularExpressionAccess().getRule();
	}

	//OrExpression:
	//	SequenceExpression ({OrExpression.left=current} "+" right=SequenceExpression)*;
	public OrExpressionElements getOrExpressionAccess() {
		return pOrExpression;
	}
	
	public ParserRule getOrExpressionRule() {
		return getOrExpressionAccess().getRule();
	}

	//// note the abscence of a syntactic separating symbol -> juxtaposition!
	//SequenceExpression:
	//	HighBindExpression ({SequenceExpression.left=current} right=HighBindExpression)*;
	public SequenceExpressionElements getSequenceExpressionAccess() {
		return pSequenceExpression;
	}
	
	public ParserRule getSequenceExpressionRule() {
		return getSequenceExpressionAccess().getRule();
	}

	//HighBindExpression:
	//	AtomicExpression ("*" {StarExpression.innerExpression=current} "*"*)?;
	public HighBindExpressionElements getHighBindExpressionAccess() {
		return pHighBindExpression;
	}
	
	public ParserRule getHighBindExpressionRule() {
		return getHighBindExpressionAccess().getRule();
	}

	//AtomicExpression:
	//	BracedExpression | Atom;
	public AtomicExpressionElements getAtomicExpressionAccess() {
		return pAtomicExpression;
	}
	
	public ParserRule getAtomicExpressionRule() {
		return getAtomicExpressionAccess().getRule();
	}

	//BracedExpression:
	//	"(" innerExpression=RegularExpression ")";
	public BracedExpressionElements getBracedExpressionAccess() {
		return pBracedExpression;
	}
	
	public ParserRule getBracedExpressionRule() {
		return getBracedExpressionAccess().getRule();
	}

	//Atom:
	//	value=CHAR;
	public AtomElements getAtomAccess() {
		return pAtom;
	}
	
	public ParserRule getAtomRule() {
		return getAtomAccess().getRule();
	}

	//terminal CHAR returns ecore::EChar:
	//	"a".."z" | "A".."Z" | "0".."9";
	public TerminalRule getCHARRule() {
		return tCHAR;
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return tWS;
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return tANY_OTHER;
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 
}
