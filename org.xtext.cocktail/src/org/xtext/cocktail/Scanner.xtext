grammar org.xtext.cocktail.Scanner with org.eclipse.xtext.common.Terminals

generate scanner "http://www.xtext.org/cocktail/Scanner"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Model:
	scanner+=Title scanner+=Export scanner+=Global scanner+=Local scanner+=Default
	scanner +=Eof scanner+=Define scanner+=StartStates scanner+=Rule;

Title:
	'SCANNER' name=ID;

Export:
	'EXPORT {' content=ID '}';

Global:
	'GLOBAL {' content=ID '}';

Local:
	'LOCAL {' content=ID '}';
	
Default:
	'DEFAULT {' content=ID '}';
	
Eof:
	'EOF {' content=ID '}';
	
Define:
	'DEFINE'  (defines+=DefineRule)+   ;	

DefineRule:
	defineName=ID '=' defineRule=ID;

StartStates: 
'START' states+= ID (',' ID)*
;

Rule:
	'RULE' content=SingleRule*;


SingleRule:
	'#STD#' STRING ': {' STRING '}'  
;



// Fremdcode importiert

//# von https://www.eclipse.org/forums/index.php/t/600708/
RegularExpression:
	OrExpression
;

OrExpression:
	SequenceExpression ({OrExpression.left = current} '+' right=SequenceExpression)*
;

SequenceExpression:
	HighBindExpression({SequenceExpression.left = current} right = HighBindExpression)*
        // note the abscence of a syntactic separating symbol -> juxtaposition!
;

HighBindExpression:
        AtomicExpression ('*'{StarExpression.innerExpression=current} '*'* )?
;

AtomicExpression:
	BracedExpression | Atom
;

BracedExpression:
	'(' innerExpression = RegularExpression ')'
;

Atom:
	value = CHAR
;

terminal CHAR returns ecore::EChar:
	('a'..'z'|'A'..'Z'|'0'..'9')
;

terminal WS			: (' '|'\t'|'\r'|'\n')+;

terminal ANY_OTHER: .;



