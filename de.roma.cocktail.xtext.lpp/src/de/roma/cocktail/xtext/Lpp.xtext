grammar de.roma.cocktail.xtext.Lpp with org.eclipse.xtext.common.Terminals

generate lpp "http://www.roma.de/cocktail/xtext/Lpp"

Parser:
	(scanner=ScannerName? & parser=ParserName?
	& importBlock=Import? & exportBlock=Export? & globalBlock=Global?
	& localBlock=Local? & beginBlock=Begin? & closeBlock=Close?
	& precedence=Precedence?
	& start=StartSymbols?)
	rules=GrammarRules;

ScannerName:
	'SCANNER' (name=ID)?;

ParserName:
	'PARSER' (name=ID)?;

Import:
	'IMPORT' '{' content=CodeBlock '}';

Export:
	'EXPORT' '{' content=CodeBlock '}';

Global:
	'GLOBAL' '{' content=CodeBlock '}';

Local:
	'LOCAL' '{' content=CodeBlock '}';

Begin:
	'BEGIN' '{' content=CodeBlock '}';

Close:
	'CLOSE' '{' content=CodeBlock '}';

TokenExtra:
	cost=INT "," presentation=STRING;

CodeBlock:
	(wall=CodeWall | '{' block=CodeBlock '}')*;

CodeWall:
//(ID|INT|STRING|WS|'+'|'-'|'('|')'|'*'|'.'|'/'|'\\'|'|'|'?'|'>'|'<'|'#'|'$'|'%'|';'|':'|'['|']'|'=')
	ID | INT | STRING | WS | '+' | '-' | '(' | ')' | '*' | '.' | '/' | '\\' | '|' | '?' | '>' | '<' | '#' | '$' | '%' | ';'
	| ':' | '!' | '=' | ',' | ':=';

Precedence:
	'PREC' rows+=PrecedenceRow*;

PrecedenceRow:
	type=PrecedenceType strings+=STRING* name=ID?;

enum PrecedenceType:
	NONE | LEFT | RIGHT;

StartSymbols:
	'START' (states+=StartState)*;

StartState:
	name=ID;

GrammarRules:
	('RULE' | 'RULES') nodes+=GrammarRule*;

GrammarRule:
	name=RuleName body=RuleBody;
	
ExtensionRule:
	name=RuleName? body=RuleBody;

RuleBody:
	nodetype=NodeType? part+=NodePart* ('PREC' token=[PrecedenceRow])?
	('{' block=CodeBlock '}')? extension=Extensions? 
	'.';

Extensions:
	"<" nodes+=ExtensionRule* ">";

NodePart:
	(child=Node | attribute=NodeAttribute);

Node:
	(selector=ID ':')? name=(ID | STRING);

NodeAttribute:
	'[' attribute=ID (':' type=ID)? ']';

RuleName:
	name=(ID | STRING);

NodeType:
	"=" | ":" | ":=";


//GrammarRules:
//	('RULE' | 'RULES') rules+=GrammarRule*;
//
//GrammerReference:
//	GrammarRule | DefinedToken;
//
//GrammarRule:
//	 name=ID '=' '<'  rules+=SimpleRule*  '>.';
//	 
//SimpleRule:
//	(name=ID)? '=' body=RuleBody ('<'  rules+=SimpleRule*   '>.')?;	 
//
//RuleBody:
//	part=RulePart code=RuleCode;
//
//RuleCode:
//	('{' CodeBlock '}')? & ('[' CodeBlock ']')?;
//
//RuleContent:
//	regex=STRING | ref=[GrammerReference];
//
//RulePart:
//	(content+=RuleContent)*;

	//terminal Identifier:
//	('\\')?('a'..'z'|'A'..'Z'|'_')('a'..'z'|'A'..'Z'|'_'|'0'..'9')* 
//;

