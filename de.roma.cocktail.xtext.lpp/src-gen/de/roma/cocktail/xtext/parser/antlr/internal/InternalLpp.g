/*
 * generated by Xtext 2.9.1
 */
grammar InternalLpp;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package de.roma.cocktail.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.roma.cocktail.xtext.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import de.roma.cocktail.xtext.services.LppGrammarAccess;

}

@parser::members {

 	private LppGrammarAccess grammarAccess;

    public InternalLppParser(TokenStream input, LppGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Parser";
   	}

   	@Override
   	protected LppGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleParser
entryRuleParser returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParserRule()); }
	iv_ruleParser=ruleParser
	{ $current=$iv_ruleParser.current; }
	EOF;

// Rule Parser
ruleParser returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{ 
				  getUnorderedGroupHelper().enter(grammarAccess.getParserAccess().getUnorderedGroup_0());
				}
				(
					(
			(
				{getUnorderedGroupHelper().canSelect(grammarAccess.getParserAccess().getUnorderedGroup_0(), 0)}?=>(
					{
						getUnorderedGroupHelper().select(grammarAccess.getParserAccess().getUnorderedGroup_0(), 0);
					}
								({true}?=>((
									{
										newCompositeNode(grammarAccess.getParserAccess().getScannerScannerNameParserRuleCall_0_0_0());
									}
									lv_scanner_1_0=ruleScannerName
									{
										if ($current==null) {
											$current = createModelElementForParent(grammarAccess.getParserRule());
										}
										set(
											$current,
											"scanner",
											lv_scanner_1_0,
											"de.roma.cocktail.xtext.Lpp.ScannerName");
										afterParserOrEnumRuleCall();
									}
								)
								))
					{ 
						getUnorderedGroupHelper().returnFromSelection(grammarAccess.getParserAccess().getUnorderedGroup_0());
					}
				)
			)|
			(
				{getUnorderedGroupHelper().canSelect(grammarAccess.getParserAccess().getUnorderedGroup_0(), 1)}?=>(
					{
						getUnorderedGroupHelper().select(grammarAccess.getParserAccess().getUnorderedGroup_0(), 1);
					}
								({true}?=>((
									{
										newCompositeNode(grammarAccess.getParserAccess().getParserParserNameParserRuleCall_0_1_0());
									}
									lv_parser_2_0=ruleParserName
									{
										if ($current==null) {
											$current = createModelElementForParent(grammarAccess.getParserRule());
										}
										set(
											$current,
											"parser",
											lv_parser_2_0,
											"de.roma.cocktail.xtext.Lpp.ParserName");
										afterParserOrEnumRuleCall();
									}
								)
								))
					{ 
						getUnorderedGroupHelper().returnFromSelection(grammarAccess.getParserAccess().getUnorderedGroup_0());
					}
				)
			)|
			(
				{getUnorderedGroupHelper().canSelect(grammarAccess.getParserAccess().getUnorderedGroup_0(), 2)}?=>(
					{
						getUnorderedGroupHelper().select(grammarAccess.getParserAccess().getUnorderedGroup_0(), 2);
					}
								({true}?=>((
									{
										newCompositeNode(grammarAccess.getParserAccess().getImportBlockImportParserRuleCall_0_2_0());
									}
									lv_importBlock_3_0=ruleImport
									{
										if ($current==null) {
											$current = createModelElementForParent(grammarAccess.getParserRule());
										}
										set(
											$current,
											"importBlock",
											lv_importBlock_3_0,
											"de.roma.cocktail.xtext.Lpp.Import");
										afterParserOrEnumRuleCall();
									}
								)
								))
					{ 
						getUnorderedGroupHelper().returnFromSelection(grammarAccess.getParserAccess().getUnorderedGroup_0());
					}
				)
			)|
			(
				{getUnorderedGroupHelper().canSelect(grammarAccess.getParserAccess().getUnorderedGroup_0(), 3)}?=>(
					{
						getUnorderedGroupHelper().select(grammarAccess.getParserAccess().getUnorderedGroup_0(), 3);
					}
								({true}?=>((
									{
										newCompositeNode(grammarAccess.getParserAccess().getExportBlockExportParserRuleCall_0_3_0());
									}
									lv_exportBlock_4_0=ruleExport
									{
										if ($current==null) {
											$current = createModelElementForParent(grammarAccess.getParserRule());
										}
										set(
											$current,
											"exportBlock",
											lv_exportBlock_4_0,
											"de.roma.cocktail.xtext.Lpp.Export");
										afterParserOrEnumRuleCall();
									}
								)
								))
					{ 
						getUnorderedGroupHelper().returnFromSelection(grammarAccess.getParserAccess().getUnorderedGroup_0());
					}
				)
			)|
			(
				{getUnorderedGroupHelper().canSelect(grammarAccess.getParserAccess().getUnorderedGroup_0(), 4)}?=>(
					{
						getUnorderedGroupHelper().select(grammarAccess.getParserAccess().getUnorderedGroup_0(), 4);
					}
								({true}?=>((
									{
										newCompositeNode(grammarAccess.getParserAccess().getGlobalBlockGlobalParserRuleCall_0_4_0());
									}
									lv_globalBlock_5_0=ruleGlobal
									{
										if ($current==null) {
											$current = createModelElementForParent(grammarAccess.getParserRule());
										}
										set(
											$current,
											"globalBlock",
											lv_globalBlock_5_0,
											"de.roma.cocktail.xtext.Lpp.Global");
										afterParserOrEnumRuleCall();
									}
								)
								))
					{ 
						getUnorderedGroupHelper().returnFromSelection(grammarAccess.getParserAccess().getUnorderedGroup_0());
					}
				)
			)|
			(
				{getUnorderedGroupHelper().canSelect(grammarAccess.getParserAccess().getUnorderedGroup_0(), 5)}?=>(
					{
						getUnorderedGroupHelper().select(grammarAccess.getParserAccess().getUnorderedGroup_0(), 5);
					}
								({true}?=>((
									{
										newCompositeNode(grammarAccess.getParserAccess().getLocalBlockLocalParserRuleCall_0_5_0());
									}
									lv_localBlock_6_0=ruleLocal
									{
										if ($current==null) {
											$current = createModelElementForParent(grammarAccess.getParserRule());
										}
										set(
											$current,
											"localBlock",
											lv_localBlock_6_0,
											"de.roma.cocktail.xtext.Lpp.Local");
										afterParserOrEnumRuleCall();
									}
								)
								))
					{ 
						getUnorderedGroupHelper().returnFromSelection(grammarAccess.getParserAccess().getUnorderedGroup_0());
					}
				)
			)|
			(
				{getUnorderedGroupHelper().canSelect(grammarAccess.getParserAccess().getUnorderedGroup_0(), 6)}?=>(
					{
						getUnorderedGroupHelper().select(grammarAccess.getParserAccess().getUnorderedGroup_0(), 6);
					}
								({true}?=>((
									{
										newCompositeNode(grammarAccess.getParserAccess().getBeginBlockBeginParserRuleCall_0_6_0());
									}
									lv_beginBlock_7_0=ruleBegin
									{
										if ($current==null) {
											$current = createModelElementForParent(grammarAccess.getParserRule());
										}
										set(
											$current,
											"beginBlock",
											lv_beginBlock_7_0,
											"de.roma.cocktail.xtext.Lpp.Begin");
										afterParserOrEnumRuleCall();
									}
								)
								))
					{ 
						getUnorderedGroupHelper().returnFromSelection(grammarAccess.getParserAccess().getUnorderedGroup_0());
					}
				)
			)|
			(
				{getUnorderedGroupHelper().canSelect(grammarAccess.getParserAccess().getUnorderedGroup_0(), 7)}?=>(
					{
						getUnorderedGroupHelper().select(grammarAccess.getParserAccess().getUnorderedGroup_0(), 7);
					}
								({true}?=>((
									{
										newCompositeNode(grammarAccess.getParserAccess().getCloseBlockCloseParserRuleCall_0_7_0());
									}
									lv_closeBlock_8_0=ruleClose
									{
										if ($current==null) {
											$current = createModelElementForParent(grammarAccess.getParserRule());
										}
										set(
											$current,
											"closeBlock",
											lv_closeBlock_8_0,
											"de.roma.cocktail.xtext.Lpp.Close");
										afterParserOrEnumRuleCall();
									}
								)
								))
					{ 
						getUnorderedGroupHelper().returnFromSelection(grammarAccess.getParserAccess().getUnorderedGroup_0());
					}
				)
			)|
			(
				{getUnorderedGroupHelper().canSelect(grammarAccess.getParserAccess().getUnorderedGroup_0(), 8)}?=>(
					{
						getUnorderedGroupHelper().select(grammarAccess.getParserAccess().getUnorderedGroup_0(), 8);
					}
								({true}?=>((
									{
										newCompositeNode(grammarAccess.getParserAccess().getPrecedencePrecedenceParserRuleCall_0_8_0());
									}
									lv_precedence_9_0=rulePrecedence
									{
										if ($current==null) {
											$current = createModelElementForParent(grammarAccess.getParserRule());
										}
										set(
											$current,
											"precedence",
											lv_precedence_9_0,
											"de.roma.cocktail.xtext.Lpp.Precedence");
										afterParserOrEnumRuleCall();
									}
								)
								))
					{ 
						getUnorderedGroupHelper().returnFromSelection(grammarAccess.getParserAccess().getUnorderedGroup_0());
					}
				)
			)|
			(
				{getUnorderedGroupHelper().canSelect(grammarAccess.getParserAccess().getUnorderedGroup_0(), 9)}?=>(
					{
						getUnorderedGroupHelper().select(grammarAccess.getParserAccess().getUnorderedGroup_0(), 9);
					}
								({true}?=>((
									{
										newCompositeNode(grammarAccess.getParserAccess().getStartStartSymbolsParserRuleCall_0_9_0());
									}
									lv_start_10_0=ruleStartSymbols
									{
										if ($current==null) {
											$current = createModelElementForParent(grammarAccess.getParserRule());
										}
										set(
											$current,
											"start",
											lv_start_10_0,
											"de.roma.cocktail.xtext.Lpp.StartSymbols");
										afterParserOrEnumRuleCall();
									}
								)
								))
					{ 
						getUnorderedGroupHelper().returnFromSelection(grammarAccess.getParserAccess().getUnorderedGroup_0());
					}
				)
			)
					)*
				)
			)
				{ 
				  getUnorderedGroupHelper().leave(grammarAccess.getParserAccess().getUnorderedGroup_0());
				}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getParserAccess().getRulesGrammarRulesParserRuleCall_1_0());
				}
				lv_rules_11_0=ruleGrammarRules
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParserRule());
					}
					set(
						$current,
						"rules",
						lv_rules_11_0,
						"de.roma.cocktail.xtext.Lpp.GrammarRules");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleScannerName
entryRuleScannerName returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getScannerNameRule()); }
	iv_ruleScannerName=ruleScannerName
	{ $current=$iv_ruleScannerName.current; }
	EOF;

// Rule ScannerName
ruleScannerName returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='SCANNER'
		{
			newLeafNode(otherlv_0, grammarAccess.getScannerNameAccess().getSCANNERKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getScannerNameAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getScannerNameRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)?
	)
;

// Entry rule entryRuleParserName
entryRuleParserName returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParserNameRule()); }
	iv_ruleParserName=ruleParserName
	{ $current=$iv_ruleParserName.current; }
	EOF;

// Rule ParserName
ruleParserName returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='PARSER'
		{
			newLeafNode(otherlv_0, grammarAccess.getParserNameAccess().getPARSERKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getParserNameAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getParserNameRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)?
	)
;

// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getImportRule()); }
	iv_ruleImport=ruleImport
	{ $current=$iv_ruleImport.current; }
	EOF;

// Rule Import
ruleImport returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='IMPORT'
		{
			newLeafNode(otherlv_0, grammarAccess.getImportAccess().getIMPORTKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getImportAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getImportAccess().getContentCodeBlockParserRuleCall_2_0());
				}
				lv_content_2_0=ruleCodeBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getImportRule());
					}
					set(
						$current,
						"content",
						lv_content_2_0,
						"de.roma.cocktail.xtext.Lpp.CodeBlock");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='}'
		{
			newLeafNode(otherlv_3, grammarAccess.getImportAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleExport
entryRuleExport returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExportRule()); }
	iv_ruleExport=ruleExport
	{ $current=$iv_ruleExport.current; }
	EOF;

// Rule Export
ruleExport returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='EXPORT'
		{
			newLeafNode(otherlv_0, grammarAccess.getExportAccess().getEXPORTKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getExportAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExportAccess().getContentCodeBlockParserRuleCall_2_0());
				}
				lv_content_2_0=ruleCodeBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExportRule());
					}
					set(
						$current,
						"content",
						lv_content_2_0,
						"de.roma.cocktail.xtext.Lpp.CodeBlock");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='}'
		{
			newLeafNode(otherlv_3, grammarAccess.getExportAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleGlobal
entryRuleGlobal returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGlobalRule()); }
	iv_ruleGlobal=ruleGlobal
	{ $current=$iv_ruleGlobal.current; }
	EOF;

// Rule Global
ruleGlobal returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='GLOBAL'
		{
			newLeafNode(otherlv_0, grammarAccess.getGlobalAccess().getGLOBALKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getGlobalAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGlobalAccess().getContentCodeBlockParserRuleCall_2_0());
				}
				lv_content_2_0=ruleCodeBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGlobalRule());
					}
					set(
						$current,
						"content",
						lv_content_2_0,
						"de.roma.cocktail.xtext.Lpp.CodeBlock");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='}'
		{
			newLeafNode(otherlv_3, grammarAccess.getGlobalAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleLocal
entryRuleLocal returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLocalRule()); }
	iv_ruleLocal=ruleLocal
	{ $current=$iv_ruleLocal.current; }
	EOF;

// Rule Local
ruleLocal returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='LOCAL'
		{
			newLeafNode(otherlv_0, grammarAccess.getLocalAccess().getLOCALKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getLocalAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLocalAccess().getContentCodeBlockParserRuleCall_2_0());
				}
				lv_content_2_0=ruleCodeBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLocalRule());
					}
					set(
						$current,
						"content",
						lv_content_2_0,
						"de.roma.cocktail.xtext.Lpp.CodeBlock");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='}'
		{
			newLeafNode(otherlv_3, grammarAccess.getLocalAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleBegin
entryRuleBegin returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBeginRule()); }
	iv_ruleBegin=ruleBegin
	{ $current=$iv_ruleBegin.current; }
	EOF;

// Rule Begin
ruleBegin returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='BEGIN'
		{
			newLeafNode(otherlv_0, grammarAccess.getBeginAccess().getBEGINKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getBeginAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBeginAccess().getContentCodeBlockParserRuleCall_2_0());
				}
				lv_content_2_0=ruleCodeBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBeginRule());
					}
					set(
						$current,
						"content",
						lv_content_2_0,
						"de.roma.cocktail.xtext.Lpp.CodeBlock");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='}'
		{
			newLeafNode(otherlv_3, grammarAccess.getBeginAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleClose
entryRuleClose returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCloseRule()); }
	iv_ruleClose=ruleClose
	{ $current=$iv_ruleClose.current; }
	EOF;

// Rule Close
ruleClose returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='CLOSE'
		{
			newLeafNode(otherlv_0, grammarAccess.getCloseAccess().getCLOSEKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getCloseAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCloseAccess().getContentCodeBlockParserRuleCall_2_0());
				}
				lv_content_2_0=ruleCodeBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCloseRule());
					}
					set(
						$current,
						"content",
						lv_content_2_0,
						"de.roma.cocktail.xtext.Lpp.CodeBlock");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='}'
		{
			newLeafNode(otherlv_3, grammarAccess.getCloseAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleCodeBlock
entryRuleCodeBlock returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCodeBlockRule()); }
	iv_ruleCodeBlock=ruleCodeBlock
	{ $current=$iv_ruleCodeBlock.current; }
	EOF;

// Rule CodeBlock
ruleCodeBlock returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getCodeBlockAccess().getWallCodeWallParserRuleCall_0_0());
				}
				lv_wall_0_0=ruleCodeWall
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCodeBlockRule());
					}
					set(
						$current,
						"wall",
						lv_wall_0_0,
						"de.roma.cocktail.xtext.Lpp.CodeWall");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			otherlv_1='{'
			{
				newLeafNode(otherlv_1, grammarAccess.getCodeBlockAccess().getLeftCurlyBracketKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCodeBlockAccess().getBlockCodeBlockParserRuleCall_1_1_0());
					}
					lv_block_2_0=ruleCodeBlock
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCodeBlockRule());
						}
						set(
							$current,
							"block",
							lv_block_2_0,
							"de.roma.cocktail.xtext.Lpp.CodeBlock");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_3='}'
			{
				newLeafNode(otherlv_3, grammarAccess.getCodeBlockAccess().getRightCurlyBracketKeyword_1_2());
			}
		)
	)*
;

// Entry rule entryRuleCodeWall
entryRuleCodeWall returns [String current=null]:
	{ newCompositeNode(grammarAccess.getCodeWallRule()); }
	iv_ruleCodeWall=ruleCodeWall
	{ $current=$iv_ruleCodeWall.current.getText(); }
	EOF;

// Rule CodeWall
ruleCodeWall returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getCodeWallAccess().getIDTerminalRuleCall_0());
		}
		    |
		this_INT_1=RULE_INT
		{
			$current.merge(this_INT_1);
		}
		{
			newLeafNode(this_INT_1, grammarAccess.getCodeWallAccess().getINTTerminalRuleCall_1());
		}
		    |
		this_STRING_2=RULE_STRING
		{
			$current.merge(this_STRING_2);
		}
		{
			newLeafNode(this_STRING_2, grammarAccess.getCodeWallAccess().getSTRINGTerminalRuleCall_2());
		}
		    |
		this_WS_3=RULE_WS
		{
			$current.merge(this_WS_3);
		}
		{
			newLeafNode(this_WS_3, grammarAccess.getCodeWallAccess().getWSTerminalRuleCall_3());
		}
		    |
		kw='+'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCodeWallAccess().getPlusSignKeyword_4());
		}
		    |
		kw='-'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCodeWallAccess().getHyphenMinusKeyword_5());
		}
		    |
		kw='('
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCodeWallAccess().getLeftParenthesisKeyword_6());
		}
		    |
		kw=')'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCodeWallAccess().getRightParenthesisKeyword_7());
		}
		    |
		kw='*'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCodeWallAccess().getAsteriskKeyword_8());
		}
		    |
		kw='.'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCodeWallAccess().getFullStopKeyword_9());
		}
		    |
		kw='/'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCodeWallAccess().getSolidusKeyword_10());
		}
		    |
		kw='\\'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCodeWallAccess().getReverseSolidusKeyword_11());
		}
		    |
		kw='|'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCodeWallAccess().getVerticalLineKeyword_12());
		}
		    |
		kw='?'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCodeWallAccess().getQuestionMarkKeyword_13());
		}
		    |
		kw='>'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCodeWallAccess().getGreaterThanSignKeyword_14());
		}
		    |
		kw='<'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCodeWallAccess().getLessThanSignKeyword_15());
		}
		    |
		kw='#'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCodeWallAccess().getNumberSignKeyword_16());
		}
		    |
		kw='$'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCodeWallAccess().getDollarSignKeyword_17());
		}
		    |
		kw='%'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCodeWallAccess().getPercentSignKeyword_18());
		}
		    |
		kw=';'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCodeWallAccess().getSemicolonKeyword_19());
		}
		    |
		kw=':'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCodeWallAccess().getColonKeyword_20());
		}
		    |
		kw='!'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCodeWallAccess().getExclamationMarkKeyword_21());
		}
		    |
		kw='='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCodeWallAccess().getEqualsSignKeyword_22());
		}
		    |
		kw=','
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCodeWallAccess().getCommaKeyword_23());
		}
		    |
		kw=':='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCodeWallAccess().getColonEqualsSignKeyword_24());
		}
	)
;

// Entry rule entryRulePrecedence
entryRulePrecedence returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrecedenceRule()); }
	iv_rulePrecedence=rulePrecedence
	{ $current=$iv_rulePrecedence.current; }
	EOF;

// Rule Precedence
rulePrecedence returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='PREC'
		{
			newLeafNode(otherlv_0, grammarAccess.getPrecedenceAccess().getPRECKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPrecedenceAccess().getRowsPrecedenceRowParserRuleCall_1_0());
				}
				lv_rows_1_0=rulePrecedenceRow
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrecedenceRule());
					}
					add(
						$current,
						"rows",
						lv_rows_1_0,
						"de.roma.cocktail.xtext.Lpp.PrecedenceRow");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRulePrecedenceRow
entryRulePrecedenceRow returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrecedenceRowRule()); }
	iv_rulePrecedenceRow=rulePrecedenceRow
	{ $current=$iv_rulePrecedenceRow.current; }
	EOF;

// Rule PrecedenceRow
rulePrecedenceRow returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getPrecedenceRowAccess().getTypePrecedenceTypeEnumRuleCall_0_0());
				}
				lv_type_0_0=rulePrecedenceType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrecedenceRowRule());
					}
					set(
						$current,
						"type",
						lv_type_0_0,
						"de.roma.cocktail.xtext.Lpp.PrecedenceType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_strings_1_0=RULE_STRING
				{
					newLeafNode(lv_strings_1_0, grammarAccess.getPrecedenceRowAccess().getStringsSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPrecedenceRowRule());
					}
					addWithLastConsumed(
						$current,
						"strings",
						lv_strings_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)*
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getPrecedenceRowAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPrecedenceRowRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)?
	)
;

// Entry rule entryRuleStartSymbols
entryRuleStartSymbols returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStartSymbolsRule()); }
	iv_ruleStartSymbols=ruleStartSymbols
	{ $current=$iv_ruleStartSymbols.current; }
	EOF;

// Rule StartSymbols
ruleStartSymbols returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='START'
		{
			newLeafNode(otherlv_0, grammarAccess.getStartSymbolsAccess().getSTARTKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getStartSymbolsAccess().getStatesStartStateParserRuleCall_1_0());
				}
				lv_states_1_0=ruleStartState
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStartSymbolsRule());
					}
					add(
						$current,
						"states",
						lv_states_1_0,
						"de.roma.cocktail.xtext.Lpp.StartState");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleStartState
entryRuleStartState returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStartStateRule()); }
	iv_ruleStartState=ruleStartState
	{ $current=$iv_ruleStartState.current; }
	EOF;

// Rule StartState
ruleStartState returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getStartStateAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getStartStateRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleGrammarRules
entryRuleGrammarRules returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGrammarRulesRule()); }
	iv_ruleGrammarRules=ruleGrammarRules
	{ $current=$iv_ruleGrammarRules.current; }
	EOF;

// Rule GrammarRules
ruleGrammarRules returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='RULE'
			{
				newLeafNode(otherlv_0, grammarAccess.getGrammarRulesAccess().getRULEKeyword_0_0());
			}
			    |
			otherlv_1='RULES'
			{
				newLeafNode(otherlv_1, grammarAccess.getGrammarRulesAccess().getRULESKeyword_0_1());
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getGrammarRulesAccess().getNodesGrammarRuleParserRuleCall_1_0());
				}
				lv_nodes_2_0=ruleGrammarRule
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGrammarRulesRule());
					}
					add(
						$current,
						"nodes",
						lv_nodes_2_0,
						"de.roma.cocktail.xtext.Lpp.GrammarRule");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleGrammarRule
entryRuleGrammarRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGrammarRuleRule()); }
	iv_ruleGrammarRule=ruleGrammarRule
	{ $current=$iv_ruleGrammarRule.current; }
	EOF;

// Rule GrammarRule
ruleGrammarRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getGrammarRuleAccess().getNameRuleNameParserRuleCall_0_0());
				}
				lv_name_0_0=ruleRuleName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGrammarRuleRule());
					}
					set(
						$current,
						"name",
						lv_name_0_0,
						"de.roma.cocktail.xtext.Lpp.RuleName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getGrammarRuleAccess().getBodyRuleBodyParserRuleCall_1_0());
				}
				lv_body_1_0=ruleRuleBody
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGrammarRuleRule());
					}
					set(
						$current,
						"body",
						lv_body_1_0,
						"de.roma.cocktail.xtext.Lpp.RuleBody");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleExtensionRule
entryRuleExtensionRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExtensionRuleRule()); }
	iv_ruleExtensionRule=ruleExtensionRule
	{ $current=$iv_ruleExtensionRule.current; }
	EOF;

// Rule ExtensionRule
ruleExtensionRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getExtensionRuleAccess().getNameRuleNameParserRuleCall_0_0());
				}
				lv_name_0_0=ruleRuleName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExtensionRuleRule());
					}
					set(
						$current,
						"name",
						lv_name_0_0,
						"de.roma.cocktail.xtext.Lpp.RuleName");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getExtensionRuleAccess().getBodyRuleBodyParserRuleCall_1_0());
				}
				lv_body_1_0=ruleRuleBody
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExtensionRuleRule());
					}
					set(
						$current,
						"body",
						lv_body_1_0,
						"de.roma.cocktail.xtext.Lpp.RuleBody");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleRuleBody
entryRuleRuleBody returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRuleBodyRule()); }
	iv_ruleRuleBody=ruleRuleBody
	{ $current=$iv_ruleRuleBody.current; }
	EOF;

// Rule RuleBody
ruleRuleBody returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getRuleBodyAccess().getNodetypeNodeTypeParserRuleCall_0_0());
				}
				lv_nodetype_0_0=ruleNodeType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRuleBodyRule());
					}
					set(
						$current,
						"nodetype",
						lv_nodetype_0_0,
						"de.roma.cocktail.xtext.Lpp.NodeType");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getRuleBodyAccess().getPartNodePartParserRuleCall_1_0());
				}
				lv_part_1_0=ruleNodePart
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRuleBodyRule());
					}
					add(
						$current,
						"part",
						lv_part_1_0,
						"de.roma.cocktail.xtext.Lpp.NodePart");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			otherlv_2='PREC'
			{
				newLeafNode(otherlv_2, grammarAccess.getRuleBodyAccess().getPRECKeyword_2_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRuleBodyRule());
						}
					}
					otherlv_3=RULE_ID
					{
						newLeafNode(otherlv_3, grammarAccess.getRuleBodyAccess().getTokenPrecedenceRowCrossReference_2_1_0());
					}
				)
			)
		)?
		(
			otherlv_4='{'
			{
				newLeafNode(otherlv_4, grammarAccess.getRuleBodyAccess().getLeftCurlyBracketKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getRuleBodyAccess().getBlockCodeBlockParserRuleCall_3_1_0());
					}
					lv_block_5_0=ruleCodeBlock
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRuleBodyRule());
						}
						set(
							$current,
							"block",
							lv_block_5_0,
							"de.roma.cocktail.xtext.Lpp.CodeBlock");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_6='}'
			{
				newLeafNode(otherlv_6, grammarAccess.getRuleBodyAccess().getRightCurlyBracketKeyword_3_2());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getRuleBodyAccess().getExtensionExtensionsParserRuleCall_4_0());
				}
				lv_extension_7_0=ruleExtensions
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRuleBodyRule());
					}
					set(
						$current,
						"extension",
						lv_extension_7_0,
						"de.roma.cocktail.xtext.Lpp.Extensions");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_8='.'
		{
			newLeafNode(otherlv_8, grammarAccess.getRuleBodyAccess().getFullStopKeyword_5());
		}
	)
;

// Entry rule entryRuleExtensions
entryRuleExtensions returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExtensionsRule()); }
	iv_ruleExtensions=ruleExtensions
	{ $current=$iv_ruleExtensions.current; }
	EOF;

// Rule Extensions
ruleExtensions returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='<'
		{
			newLeafNode(otherlv_0, grammarAccess.getExtensionsAccess().getLessThanSignKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExtensionsAccess().getNodesExtensionRuleParserRuleCall_1_0());
				}
				lv_nodes_1_0=ruleExtensionRule
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExtensionsRule());
					}
					add(
						$current,
						"nodes",
						lv_nodes_1_0,
						"de.roma.cocktail.xtext.Lpp.ExtensionRule");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_2='>'
		{
			newLeafNode(otherlv_2, grammarAccess.getExtensionsAccess().getGreaterThanSignKeyword_2());
		}
	)
;

// Entry rule entryRuleNodePart
entryRuleNodePart returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNodePartRule()); }
	iv_ruleNodePart=ruleNodePart
	{ $current=$iv_ruleNodePart.current; }
	EOF;

// Rule NodePart
ruleNodePart returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getNodePartAccess().getChildNodeParserRuleCall_0_0());
				}
				lv_child_0_0=ruleNode
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNodePartRule());
					}
					set(
						$current,
						"child",
						lv_child_0_0,
						"de.roma.cocktail.xtext.Lpp.Node");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getNodePartAccess().getAttributeNodeAttributeParserRuleCall_1_0());
				}
				lv_attribute_1_0=ruleNodeAttribute
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNodePartRule());
					}
					set(
						$current,
						"attribute",
						lv_attribute_1_0,
						"de.roma.cocktail.xtext.Lpp.NodeAttribute");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleNode
entryRuleNode returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNodeRule()); }
	iv_ruleNode=ruleNode
	{ $current=$iv_ruleNode.current; }
	EOF;

// Rule Node
ruleNode returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_selector_0_0=RULE_ID
					{
						newLeafNode(lv_selector_0_0, grammarAccess.getNodeAccess().getSelectorIDTerminalRuleCall_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getNodeRule());
						}
						setWithLastConsumed(
							$current,
							"selector",
							lv_selector_0_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			otherlv_1=':'
			{
				newLeafNode(otherlv_1, grammarAccess.getNodeAccess().getColonKeyword_0_1());
			}
		)?
		(
			(
				(
					lv_name_2_1=RULE_ID
					{
						newLeafNode(lv_name_2_1, grammarAccess.getNodeAccess().getNameIDTerminalRuleCall_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getNodeRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_2_1,
							"org.eclipse.xtext.common.Terminals.ID");
					}
					    |
					lv_name_2_2=RULE_STRING
					{
						newLeafNode(lv_name_2_2, grammarAccess.getNodeAccess().getNameSTRINGTerminalRuleCall_1_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getNodeRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_2_2,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)
	)
;

// Entry rule entryRuleNodeAttribute
entryRuleNodeAttribute returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNodeAttributeRule()); }
	iv_ruleNodeAttribute=ruleNodeAttribute
	{ $current=$iv_ruleNodeAttribute.current; }
	EOF;

// Rule NodeAttribute
ruleNodeAttribute returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='['
		{
			newLeafNode(otherlv_0, grammarAccess.getNodeAttributeAccess().getLeftSquareBracketKeyword_0());
		}
		(
			(
				lv_attribute_1_0=RULE_ID
				{
					newLeafNode(lv_attribute_1_0, grammarAccess.getNodeAttributeAccess().getAttributeIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNodeAttributeRule());
					}
					setWithLastConsumed(
						$current,
						"attribute",
						lv_attribute_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_2=':'
			{
				newLeafNode(otherlv_2, grammarAccess.getNodeAttributeAccess().getColonKeyword_2_0());
			}
			(
				(
					lv_type_3_0=RULE_ID
					{
						newLeafNode(lv_type_3_0, grammarAccess.getNodeAttributeAccess().getTypeIDTerminalRuleCall_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getNodeAttributeRule());
						}
						setWithLastConsumed(
							$current,
							"type",
							lv_type_3_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
		)?
		otherlv_4=']'
		{
			newLeafNode(otherlv_4, grammarAccess.getNodeAttributeAccess().getRightSquareBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleRuleName
entryRuleRuleName returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRuleNameRule()); }
	iv_ruleRuleName=ruleRuleName
	{ $current=$iv_ruleRuleName.current; }
	EOF;

// Rule RuleName
ruleRuleName returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_1=RULE_ID
				{
					newLeafNode(lv_name_0_1, grammarAccess.getRuleNameAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRuleNameRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_1,
						"org.eclipse.xtext.common.Terminals.ID");
				}
				    |
				lv_name_0_2=RULE_STRING
				{
					newLeafNode(lv_name_0_2, grammarAccess.getRuleNameAccess().getNameSTRINGTerminalRuleCall_0_1());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRuleNameRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_2,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleNodeType
entryRuleNodeType returns [String current=null]:
	{ newCompositeNode(grammarAccess.getNodeTypeRule()); }
	iv_ruleNodeType=ruleNodeType
	{ $current=$iv_ruleNodeType.current.getText(); }
	EOF;

// Rule NodeType
ruleNodeType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getNodeTypeAccess().getEqualsSignKeyword_0());
		}
		    |
		kw=':'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getNodeTypeAccess().getColonKeyword_1());
		}
		    |
		kw=':='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getNodeTypeAccess().getColonEqualsSignKeyword_2());
		}
	)
;

// Rule PrecedenceType
rulePrecedenceType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='NONE'
			{
				$current = grammarAccess.getPrecedenceTypeAccess().getNONEEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getPrecedenceTypeAccess().getNONEEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='LEFT'
			{
				$current = grammarAccess.getPrecedenceTypeAccess().getLEFTEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getPrecedenceTypeAccess().getLEFTEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='RIGHT'
			{
				$current = grammarAccess.getPrecedenceTypeAccess().getRIGHTEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getPrecedenceTypeAccess().getRIGHTEnumLiteralDeclaration_2());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
