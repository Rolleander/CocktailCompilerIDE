/**
 * generated by Xtext 2.9.2
 */
package de.roma.cocktail.xtext.lpp.impl;

import de.roma.cocktail.xtext.lpp.Begin;
import de.roma.cocktail.xtext.lpp.Close;
import de.roma.cocktail.xtext.lpp.Export;
import de.roma.cocktail.xtext.lpp.Global;
import de.roma.cocktail.xtext.lpp.GrammarRules;
import de.roma.cocktail.xtext.lpp.Import;
import de.roma.cocktail.xtext.lpp.Local;
import de.roma.cocktail.xtext.lpp.LppPackage;
import de.roma.cocktail.xtext.lpp.Parser;
import de.roma.cocktail.xtext.lpp.ParserName;
import de.roma.cocktail.xtext.lpp.Precedence;
import de.roma.cocktail.xtext.lpp.ScannerName;
import de.roma.cocktail.xtext.lpp.StartSymbols;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Parser</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link de.roma.cocktail.xtext.lpp.impl.ParserImpl#getScanner <em>Scanner</em>}</li>
 *   <li>{@link de.roma.cocktail.xtext.lpp.impl.ParserImpl#getParser <em>Parser</em>}</li>
 *   <li>{@link de.roma.cocktail.xtext.lpp.impl.ParserImpl#getImportBlock <em>Import Block</em>}</li>
 *   <li>{@link de.roma.cocktail.xtext.lpp.impl.ParserImpl#getExportBlock <em>Export Block</em>}</li>
 *   <li>{@link de.roma.cocktail.xtext.lpp.impl.ParserImpl#getGlobalBlock <em>Global Block</em>}</li>
 *   <li>{@link de.roma.cocktail.xtext.lpp.impl.ParserImpl#getLocalBlock <em>Local Block</em>}</li>
 *   <li>{@link de.roma.cocktail.xtext.lpp.impl.ParserImpl#getBeginBlock <em>Begin Block</em>}</li>
 *   <li>{@link de.roma.cocktail.xtext.lpp.impl.ParserImpl#getCloseBlock <em>Close Block</em>}</li>
 *   <li>{@link de.roma.cocktail.xtext.lpp.impl.ParserImpl#getPrecedence <em>Precedence</em>}</li>
 *   <li>{@link de.roma.cocktail.xtext.lpp.impl.ParserImpl#getStart <em>Start</em>}</li>
 *   <li>{@link de.roma.cocktail.xtext.lpp.impl.ParserImpl#getRules <em>Rules</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ParserImpl extends MinimalEObjectImpl.Container implements Parser
{
  /**
   * The cached value of the '{@link #getScanner() <em>Scanner</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getScanner()
   * @generated
   * @ordered
   */
  protected ScannerName scanner;

  /**
   * The cached value of the '{@link #getParser() <em>Parser</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getParser()
   * @generated
   * @ordered
   */
  protected ParserName parser;

  /**
   * The cached value of the '{@link #getImportBlock() <em>Import Block</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getImportBlock()
   * @generated
   * @ordered
   */
  protected Import importBlock;

  /**
   * The cached value of the '{@link #getExportBlock() <em>Export Block</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExportBlock()
   * @generated
   * @ordered
   */
  protected Export exportBlock;

  /**
   * The cached value of the '{@link #getGlobalBlock() <em>Global Block</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGlobalBlock()
   * @generated
   * @ordered
   */
  protected Global globalBlock;

  /**
   * The cached value of the '{@link #getLocalBlock() <em>Local Block</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLocalBlock()
   * @generated
   * @ordered
   */
  protected Local localBlock;

  /**
   * The cached value of the '{@link #getBeginBlock() <em>Begin Block</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBeginBlock()
   * @generated
   * @ordered
   */
  protected Begin beginBlock;

  /**
   * The cached value of the '{@link #getCloseBlock() <em>Close Block</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCloseBlock()
   * @generated
   * @ordered
   */
  protected Close closeBlock;

  /**
   * The cached value of the '{@link #getPrecedence() <em>Precedence</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPrecedence()
   * @generated
   * @ordered
   */
  protected Precedence precedence;

  /**
   * The cached value of the '{@link #getStart() <em>Start</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStart()
   * @generated
   * @ordered
   */
  protected StartSymbols start;

  /**
   * The cached value of the '{@link #getRules() <em>Rules</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRules()
   * @generated
   * @ordered
   */
  protected GrammarRules rules;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ParserImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return LppPackage.Literals.PARSER;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ScannerName getScanner()
  {
    return scanner;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetScanner(ScannerName newScanner, NotificationChain msgs)
  {
    ScannerName oldScanner = scanner;
    scanner = newScanner;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LppPackage.PARSER__SCANNER, oldScanner, newScanner);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setScanner(ScannerName newScanner)
  {
    if (newScanner != scanner)
    {
      NotificationChain msgs = null;
      if (scanner != null)
        msgs = ((InternalEObject)scanner).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LppPackage.PARSER__SCANNER, null, msgs);
      if (newScanner != null)
        msgs = ((InternalEObject)newScanner).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LppPackage.PARSER__SCANNER, null, msgs);
      msgs = basicSetScanner(newScanner, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LppPackage.PARSER__SCANNER, newScanner, newScanner));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ParserName getParser()
  {
    return parser;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetParser(ParserName newParser, NotificationChain msgs)
  {
    ParserName oldParser = parser;
    parser = newParser;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LppPackage.PARSER__PARSER, oldParser, newParser);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setParser(ParserName newParser)
  {
    if (newParser != parser)
    {
      NotificationChain msgs = null;
      if (parser != null)
        msgs = ((InternalEObject)parser).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LppPackage.PARSER__PARSER, null, msgs);
      if (newParser != null)
        msgs = ((InternalEObject)newParser).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LppPackage.PARSER__PARSER, null, msgs);
      msgs = basicSetParser(newParser, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LppPackage.PARSER__PARSER, newParser, newParser));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Import getImportBlock()
  {
    return importBlock;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetImportBlock(Import newImportBlock, NotificationChain msgs)
  {
    Import oldImportBlock = importBlock;
    importBlock = newImportBlock;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LppPackage.PARSER__IMPORT_BLOCK, oldImportBlock, newImportBlock);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setImportBlock(Import newImportBlock)
  {
    if (newImportBlock != importBlock)
    {
      NotificationChain msgs = null;
      if (importBlock != null)
        msgs = ((InternalEObject)importBlock).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LppPackage.PARSER__IMPORT_BLOCK, null, msgs);
      if (newImportBlock != null)
        msgs = ((InternalEObject)newImportBlock).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LppPackage.PARSER__IMPORT_BLOCK, null, msgs);
      msgs = basicSetImportBlock(newImportBlock, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LppPackage.PARSER__IMPORT_BLOCK, newImportBlock, newImportBlock));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Export getExportBlock()
  {
    return exportBlock;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExportBlock(Export newExportBlock, NotificationChain msgs)
  {
    Export oldExportBlock = exportBlock;
    exportBlock = newExportBlock;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LppPackage.PARSER__EXPORT_BLOCK, oldExportBlock, newExportBlock);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setExportBlock(Export newExportBlock)
  {
    if (newExportBlock != exportBlock)
    {
      NotificationChain msgs = null;
      if (exportBlock != null)
        msgs = ((InternalEObject)exportBlock).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LppPackage.PARSER__EXPORT_BLOCK, null, msgs);
      if (newExportBlock != null)
        msgs = ((InternalEObject)newExportBlock).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LppPackage.PARSER__EXPORT_BLOCK, null, msgs);
      msgs = basicSetExportBlock(newExportBlock, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LppPackage.PARSER__EXPORT_BLOCK, newExportBlock, newExportBlock));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Global getGlobalBlock()
  {
    return globalBlock;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetGlobalBlock(Global newGlobalBlock, NotificationChain msgs)
  {
    Global oldGlobalBlock = globalBlock;
    globalBlock = newGlobalBlock;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LppPackage.PARSER__GLOBAL_BLOCK, oldGlobalBlock, newGlobalBlock);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setGlobalBlock(Global newGlobalBlock)
  {
    if (newGlobalBlock != globalBlock)
    {
      NotificationChain msgs = null;
      if (globalBlock != null)
        msgs = ((InternalEObject)globalBlock).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LppPackage.PARSER__GLOBAL_BLOCK, null, msgs);
      if (newGlobalBlock != null)
        msgs = ((InternalEObject)newGlobalBlock).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LppPackage.PARSER__GLOBAL_BLOCK, null, msgs);
      msgs = basicSetGlobalBlock(newGlobalBlock, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LppPackage.PARSER__GLOBAL_BLOCK, newGlobalBlock, newGlobalBlock));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Local getLocalBlock()
  {
    return localBlock;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLocalBlock(Local newLocalBlock, NotificationChain msgs)
  {
    Local oldLocalBlock = localBlock;
    localBlock = newLocalBlock;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LppPackage.PARSER__LOCAL_BLOCK, oldLocalBlock, newLocalBlock);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setLocalBlock(Local newLocalBlock)
  {
    if (newLocalBlock != localBlock)
    {
      NotificationChain msgs = null;
      if (localBlock != null)
        msgs = ((InternalEObject)localBlock).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LppPackage.PARSER__LOCAL_BLOCK, null, msgs);
      if (newLocalBlock != null)
        msgs = ((InternalEObject)newLocalBlock).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LppPackage.PARSER__LOCAL_BLOCK, null, msgs);
      msgs = basicSetLocalBlock(newLocalBlock, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LppPackage.PARSER__LOCAL_BLOCK, newLocalBlock, newLocalBlock));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Begin getBeginBlock()
  {
    return beginBlock;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetBeginBlock(Begin newBeginBlock, NotificationChain msgs)
  {
    Begin oldBeginBlock = beginBlock;
    beginBlock = newBeginBlock;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LppPackage.PARSER__BEGIN_BLOCK, oldBeginBlock, newBeginBlock);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setBeginBlock(Begin newBeginBlock)
  {
    if (newBeginBlock != beginBlock)
    {
      NotificationChain msgs = null;
      if (beginBlock != null)
        msgs = ((InternalEObject)beginBlock).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LppPackage.PARSER__BEGIN_BLOCK, null, msgs);
      if (newBeginBlock != null)
        msgs = ((InternalEObject)newBeginBlock).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LppPackage.PARSER__BEGIN_BLOCK, null, msgs);
      msgs = basicSetBeginBlock(newBeginBlock, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LppPackage.PARSER__BEGIN_BLOCK, newBeginBlock, newBeginBlock));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Close getCloseBlock()
  {
    return closeBlock;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCloseBlock(Close newCloseBlock, NotificationChain msgs)
  {
    Close oldCloseBlock = closeBlock;
    closeBlock = newCloseBlock;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LppPackage.PARSER__CLOSE_BLOCK, oldCloseBlock, newCloseBlock);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setCloseBlock(Close newCloseBlock)
  {
    if (newCloseBlock != closeBlock)
    {
      NotificationChain msgs = null;
      if (closeBlock != null)
        msgs = ((InternalEObject)closeBlock).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LppPackage.PARSER__CLOSE_BLOCK, null, msgs);
      if (newCloseBlock != null)
        msgs = ((InternalEObject)newCloseBlock).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LppPackage.PARSER__CLOSE_BLOCK, null, msgs);
      msgs = basicSetCloseBlock(newCloseBlock, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LppPackage.PARSER__CLOSE_BLOCK, newCloseBlock, newCloseBlock));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Precedence getPrecedence()
  {
    return precedence;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPrecedence(Precedence newPrecedence, NotificationChain msgs)
  {
    Precedence oldPrecedence = precedence;
    precedence = newPrecedence;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LppPackage.PARSER__PRECEDENCE, oldPrecedence, newPrecedence);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setPrecedence(Precedence newPrecedence)
  {
    if (newPrecedence != precedence)
    {
      NotificationChain msgs = null;
      if (precedence != null)
        msgs = ((InternalEObject)precedence).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LppPackage.PARSER__PRECEDENCE, null, msgs);
      if (newPrecedence != null)
        msgs = ((InternalEObject)newPrecedence).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LppPackage.PARSER__PRECEDENCE, null, msgs);
      msgs = basicSetPrecedence(newPrecedence, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LppPackage.PARSER__PRECEDENCE, newPrecedence, newPrecedence));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StartSymbols getStart()
  {
    return start;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetStart(StartSymbols newStart, NotificationChain msgs)
  {
    StartSymbols oldStart = start;
    start = newStart;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LppPackage.PARSER__START, oldStart, newStart);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setStart(StartSymbols newStart)
  {
    if (newStart != start)
    {
      NotificationChain msgs = null;
      if (start != null)
        msgs = ((InternalEObject)start).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LppPackage.PARSER__START, null, msgs);
      if (newStart != null)
        msgs = ((InternalEObject)newStart).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LppPackage.PARSER__START, null, msgs);
      msgs = basicSetStart(newStart, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LppPackage.PARSER__START, newStart, newStart));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GrammarRules getRules()
  {
    return rules;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRules(GrammarRules newRules, NotificationChain msgs)
  {
    GrammarRules oldRules = rules;
    rules = newRules;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LppPackage.PARSER__RULES, oldRules, newRules);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setRules(GrammarRules newRules)
  {
    if (newRules != rules)
    {
      NotificationChain msgs = null;
      if (rules != null)
        msgs = ((InternalEObject)rules).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LppPackage.PARSER__RULES, null, msgs);
      if (newRules != null)
        msgs = ((InternalEObject)newRules).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LppPackage.PARSER__RULES, null, msgs);
      msgs = basicSetRules(newRules, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LppPackage.PARSER__RULES, newRules, newRules));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case LppPackage.PARSER__SCANNER:
        return basicSetScanner(null, msgs);
      case LppPackage.PARSER__PARSER:
        return basicSetParser(null, msgs);
      case LppPackage.PARSER__IMPORT_BLOCK:
        return basicSetImportBlock(null, msgs);
      case LppPackage.PARSER__EXPORT_BLOCK:
        return basicSetExportBlock(null, msgs);
      case LppPackage.PARSER__GLOBAL_BLOCK:
        return basicSetGlobalBlock(null, msgs);
      case LppPackage.PARSER__LOCAL_BLOCK:
        return basicSetLocalBlock(null, msgs);
      case LppPackage.PARSER__BEGIN_BLOCK:
        return basicSetBeginBlock(null, msgs);
      case LppPackage.PARSER__CLOSE_BLOCK:
        return basicSetCloseBlock(null, msgs);
      case LppPackage.PARSER__PRECEDENCE:
        return basicSetPrecedence(null, msgs);
      case LppPackage.PARSER__START:
        return basicSetStart(null, msgs);
      case LppPackage.PARSER__RULES:
        return basicSetRules(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case LppPackage.PARSER__SCANNER:
        return getScanner();
      case LppPackage.PARSER__PARSER:
        return getParser();
      case LppPackage.PARSER__IMPORT_BLOCK:
        return getImportBlock();
      case LppPackage.PARSER__EXPORT_BLOCK:
        return getExportBlock();
      case LppPackage.PARSER__GLOBAL_BLOCK:
        return getGlobalBlock();
      case LppPackage.PARSER__LOCAL_BLOCK:
        return getLocalBlock();
      case LppPackage.PARSER__BEGIN_BLOCK:
        return getBeginBlock();
      case LppPackage.PARSER__CLOSE_BLOCK:
        return getCloseBlock();
      case LppPackage.PARSER__PRECEDENCE:
        return getPrecedence();
      case LppPackage.PARSER__START:
        return getStart();
      case LppPackage.PARSER__RULES:
        return getRules();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case LppPackage.PARSER__SCANNER:
        setScanner((ScannerName)newValue);
        return;
      case LppPackage.PARSER__PARSER:
        setParser((ParserName)newValue);
        return;
      case LppPackage.PARSER__IMPORT_BLOCK:
        setImportBlock((Import)newValue);
        return;
      case LppPackage.PARSER__EXPORT_BLOCK:
        setExportBlock((Export)newValue);
        return;
      case LppPackage.PARSER__GLOBAL_BLOCK:
        setGlobalBlock((Global)newValue);
        return;
      case LppPackage.PARSER__LOCAL_BLOCK:
        setLocalBlock((Local)newValue);
        return;
      case LppPackage.PARSER__BEGIN_BLOCK:
        setBeginBlock((Begin)newValue);
        return;
      case LppPackage.PARSER__CLOSE_BLOCK:
        setCloseBlock((Close)newValue);
        return;
      case LppPackage.PARSER__PRECEDENCE:
        setPrecedence((Precedence)newValue);
        return;
      case LppPackage.PARSER__START:
        setStart((StartSymbols)newValue);
        return;
      case LppPackage.PARSER__RULES:
        setRules((GrammarRules)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case LppPackage.PARSER__SCANNER:
        setScanner((ScannerName)null);
        return;
      case LppPackage.PARSER__PARSER:
        setParser((ParserName)null);
        return;
      case LppPackage.PARSER__IMPORT_BLOCK:
        setImportBlock((Import)null);
        return;
      case LppPackage.PARSER__EXPORT_BLOCK:
        setExportBlock((Export)null);
        return;
      case LppPackage.PARSER__GLOBAL_BLOCK:
        setGlobalBlock((Global)null);
        return;
      case LppPackage.PARSER__LOCAL_BLOCK:
        setLocalBlock((Local)null);
        return;
      case LppPackage.PARSER__BEGIN_BLOCK:
        setBeginBlock((Begin)null);
        return;
      case LppPackage.PARSER__CLOSE_BLOCK:
        setCloseBlock((Close)null);
        return;
      case LppPackage.PARSER__PRECEDENCE:
        setPrecedence((Precedence)null);
        return;
      case LppPackage.PARSER__START:
        setStart((StartSymbols)null);
        return;
      case LppPackage.PARSER__RULES:
        setRules((GrammarRules)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case LppPackage.PARSER__SCANNER:
        return scanner != null;
      case LppPackage.PARSER__PARSER:
        return parser != null;
      case LppPackage.PARSER__IMPORT_BLOCK:
        return importBlock != null;
      case LppPackage.PARSER__EXPORT_BLOCK:
        return exportBlock != null;
      case LppPackage.PARSER__GLOBAL_BLOCK:
        return globalBlock != null;
      case LppPackage.PARSER__LOCAL_BLOCK:
        return localBlock != null;
      case LppPackage.PARSER__BEGIN_BLOCK:
        return beginBlock != null;
      case LppPackage.PARSER__CLOSE_BLOCK:
        return closeBlock != null;
      case LppPackage.PARSER__PRECEDENCE:
        return precedence != null;
      case LppPackage.PARSER__START:
        return start != null;
      case LppPackage.PARSER__RULES:
        return rules != null;
    }
    return super.eIsSet(featureID);
  }

} //ParserImpl
