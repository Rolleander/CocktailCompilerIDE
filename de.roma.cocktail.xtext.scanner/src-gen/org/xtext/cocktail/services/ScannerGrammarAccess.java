/*
 * generated by Xtext 2.9.1
 */
package org.xtext.cocktail.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.UnorderedGroup;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class ScannerGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.cocktail.Scanner.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_0 = (UnorderedGroup)cGroup.eContents().get(0);
		private final Assignment cScannerAssignment_0_0 = (Assignment)cUnorderedGroup_0.eContents().get(0);
		private final RuleCall cScannerScannerParserRuleCall_0_0_0 = (RuleCall)cScannerAssignment_0_0.eContents().get(0);
		private final Assignment cExportAssignment_0_1 = (Assignment)cUnorderedGroup_0.eContents().get(1);
		private final RuleCall cExportExportParserRuleCall_0_1_0 = (RuleCall)cExportAssignment_0_1.eContents().get(0);
		private final Assignment cImportsAssignment_0_2 = (Assignment)cUnorderedGroup_0.eContents().get(2);
		private final RuleCall cImportsImportParserRuleCall_0_2_0 = (RuleCall)cImportsAssignment_0_2.eContents().get(0);
		private final Assignment cGlobalAssignment_0_3 = (Assignment)cUnorderedGroup_0.eContents().get(3);
		private final RuleCall cGlobalGlobalParserRuleCall_0_3_0 = (RuleCall)cGlobalAssignment_0_3.eContents().get(0);
		private final Assignment cLocalAssignment_0_4 = (Assignment)cUnorderedGroup_0.eContents().get(4);
		private final RuleCall cLocalLocalParserRuleCall_0_4_0 = (RuleCall)cLocalAssignment_0_4.eContents().get(0);
		private final Assignment cDefaultAssignment_0_5 = (Assignment)cUnorderedGroup_0.eContents().get(5);
		private final RuleCall cDefaultDefaultParserRuleCall_0_5_0 = (RuleCall)cDefaultAssignment_0_5.eContents().get(0);
		private final Assignment cEofAssignment_0_6 = (Assignment)cUnorderedGroup_0.eContents().get(6);
		private final RuleCall cEofEofParserRuleCall_0_6_0 = (RuleCall)cEofAssignment_0_6.eContents().get(0);
		private final Assignment cBeginAssignment_0_7 = (Assignment)cUnorderedGroup_0.eContents().get(7);
		private final RuleCall cBeginBeginParserRuleCall_0_7_0 = (RuleCall)cBeginAssignment_0_7.eContents().get(0);
		private final Assignment cCloseAssignment_0_8 = (Assignment)cUnorderedGroup_0.eContents().get(8);
		private final RuleCall cCloseCloseParserRuleCall_0_8_0 = (RuleCall)cCloseAssignment_0_8.eContents().get(0);
		private final Assignment cDefineAssignment_0_9 = (Assignment)cUnorderedGroup_0.eContents().get(9);
		private final RuleCall cDefineDefineParserRuleCall_0_9_0 = (RuleCall)cDefineAssignment_0_9.eContents().get(0);
		private final Assignment cStatesAssignment_0_10 = (Assignment)cUnorderedGroup_0.eContents().get(10);
		private final RuleCall cStatesStartStatesParserRuleCall_0_10_0 = (RuleCall)cStatesAssignment_0_10.eContents().get(0);
		private final Assignment cRulesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRulesRuleParserRuleCall_1_0 = (RuleCall)cRulesAssignment_1.eContents().get(0);
		
		//Model:
		//	(scanner=Scanner?
		//	& export=Export?
		//	& imports=Import?
		//	& global=Global?
		//	& local=Local?
		//	& default=Default?
		//	& eof=Eof?
		//	& begin=Begin?
		//	& close=Close?
		//	& define=Define?
		//	& states=StartStates?) rules=Rule;
		@Override public ParserRule getRule() { return rule; }
		
		//(scanner=Scanner? & export=Export? & imports=Import? & global=Global? & local=Local? & default=Default? & eof=Eof? &
		//begin=Begin? & close=Close? & define=Define? & states=StartStates?) rules=Rule
		public Group getGroup() { return cGroup; }
		
		//(scanner=Scanner? & export=Export? & imports=Import? & global=Global? & local=Local? & default=Default? & eof=Eof? &
		//begin=Begin? & close=Close? & define=Define? & states=StartStates?)
		public UnorderedGroup getUnorderedGroup_0() { return cUnorderedGroup_0; }
		
		//scanner=Scanner?
		public Assignment getScannerAssignment_0_0() { return cScannerAssignment_0_0; }
		
		//Scanner
		public RuleCall getScannerScannerParserRuleCall_0_0_0() { return cScannerScannerParserRuleCall_0_0_0; }
		
		//export=Export?
		public Assignment getExportAssignment_0_1() { return cExportAssignment_0_1; }
		
		//Export
		public RuleCall getExportExportParserRuleCall_0_1_0() { return cExportExportParserRuleCall_0_1_0; }
		
		//imports=Import?
		public Assignment getImportsAssignment_0_2() { return cImportsAssignment_0_2; }
		
		//Import
		public RuleCall getImportsImportParserRuleCall_0_2_0() { return cImportsImportParserRuleCall_0_2_0; }
		
		//global=Global?
		public Assignment getGlobalAssignment_0_3() { return cGlobalAssignment_0_3; }
		
		//Global
		public RuleCall getGlobalGlobalParserRuleCall_0_3_0() { return cGlobalGlobalParserRuleCall_0_3_0; }
		
		//local=Local?
		public Assignment getLocalAssignment_0_4() { return cLocalAssignment_0_4; }
		
		//Local
		public RuleCall getLocalLocalParserRuleCall_0_4_0() { return cLocalLocalParserRuleCall_0_4_0; }
		
		//default=Default?
		public Assignment getDefaultAssignment_0_5() { return cDefaultAssignment_0_5; }
		
		//Default
		public RuleCall getDefaultDefaultParserRuleCall_0_5_0() { return cDefaultDefaultParserRuleCall_0_5_0; }
		
		//eof=Eof?
		public Assignment getEofAssignment_0_6() { return cEofAssignment_0_6; }
		
		//Eof
		public RuleCall getEofEofParserRuleCall_0_6_0() { return cEofEofParserRuleCall_0_6_0; }
		
		//begin=Begin?
		public Assignment getBeginAssignment_0_7() { return cBeginAssignment_0_7; }
		
		//Begin
		public RuleCall getBeginBeginParserRuleCall_0_7_0() { return cBeginBeginParserRuleCall_0_7_0; }
		
		//close=Close?
		public Assignment getCloseAssignment_0_8() { return cCloseAssignment_0_8; }
		
		//Close
		public RuleCall getCloseCloseParserRuleCall_0_8_0() { return cCloseCloseParserRuleCall_0_8_0; }
		
		//define=Define?
		public Assignment getDefineAssignment_0_9() { return cDefineAssignment_0_9; }
		
		//Define
		public RuleCall getDefineDefineParserRuleCall_0_9_0() { return cDefineDefineParserRuleCall_0_9_0; }
		
		//states=StartStates?
		public Assignment getStatesAssignment_0_10() { return cStatesAssignment_0_10; }
		
		//StartStates
		public RuleCall getStatesStartStatesParserRuleCall_0_10_0() { return cStatesStartStatesParserRuleCall_0_10_0; }
		
		//rules=Rule
		public Assignment getRulesAssignment_1() { return cRulesAssignment_1; }
		
		//Rule
		public RuleCall getRulesRuleParserRuleCall_1_0() { return cRulesRuleParserRuleCall_1_0; }
	}
	public class CodeBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.cocktail.Scanner.CodeBlock");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cWallAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cWallCodeWallParserRuleCall_0_0 = (RuleCall)cWallAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cBlockAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cBlockCodeBlockParserRuleCall_1_1_0 = (RuleCall)cBlockAssignment_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		////TODO Characterset
		//CodeBlock:
		//	(wall+=CodeWall | '{' block=CodeBlock '}')*;
		@Override public ParserRule getRule() { return rule; }
		
		//(wall+=CodeWall | '{' block=CodeBlock '}')*
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//wall+=CodeWall
		public Assignment getWallAssignment_0() { return cWallAssignment_0; }
		
		//CodeWall
		public RuleCall getWallCodeWallParserRuleCall_0_0() { return cWallCodeWallParserRuleCall_0_0; }
		
		//'{' block=CodeBlock '}'
		public Group getGroup_1() { return cGroup_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }
		
		//block=CodeBlock
		public Assignment getBlockAssignment_1_1() { return cBlockAssignment_1_1; }
		
		//CodeBlock
		public RuleCall getBlockCodeBlockParserRuleCall_1_1_0() { return cBlockCodeBlockParserRuleCall_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_2() { return cRightCurlyBracketKeyword_1_2; }
	}
	public class CodeWallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.cocktail.Scanner.CodeWall");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cWSTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final Keyword cPlusSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cHyphenMinusKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cLeftParenthesisKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cAsteriskKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cFullStopKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cSolidusKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cReverseSolidusKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cVerticalLineKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cQuestionMarkKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		private final Keyword cGreaterThanSignKeyword_14 = (Keyword)cAlternatives.eContents().get(14);
		private final Keyword cLessThanSignKeyword_15 = (Keyword)cAlternatives.eContents().get(15);
		private final Keyword cNumberSignKeyword_16 = (Keyword)cAlternatives.eContents().get(16);
		private final Keyword cDollarSignKeyword_17 = (Keyword)cAlternatives.eContents().get(17);
		private final Keyword cPercentSignKeyword_18 = (Keyword)cAlternatives.eContents().get(18);
		private final Keyword cSemicolonKeyword_19 = (Keyword)cAlternatives.eContents().get(19);
		private final Keyword cColonKeyword_20 = (Keyword)cAlternatives.eContents().get(20);
		private final Keyword cExclamationMarkKeyword_21 = (Keyword)cAlternatives.eContents().get(21);
		private final Keyword cEqualsSignKeyword_22 = (Keyword)cAlternatives.eContents().get(22);
		private final Keyword cCommaKeyword_23 = (Keyword)cAlternatives.eContents().get(23);
		
		//CodeWall:
		//	ID | INT | STRING | WS | '+' | '-' | '(' | ')' | '*' | '.' | '/' | '\\' | '|' | '?' | '>' | '<' | '#' | '$' | '%' |
		//	';'
		//	| ':' | '!' | '=' | ',';
		@Override public ParserRule getRule() { return rule; }
		
		////(ID|INT|STRING|WS|'+'|'-'|'('|')'|'*'|'.'|'/'|'\\'|'|'|'?'|'>'|'<'|'#'|'$'|'%'|';'|':'|'['|']'|'=')
		//ID | INT | STRING | WS | '+' | '-' | '(' | ')' | '*' | '.' | '/' | '\\' | '|' | '?' | '>' | '<' | '#' | '$' | '%' | ';'
		//| ':' | '!' | '=' | ','
		public Alternatives getAlternatives() { return cAlternatives; }
		
		////(ID|INT|STRING|WS|'+'|'-'|'('|')'|'*'|'.'|'/'|'\\'|'|'|'?'|'>'|'<'|'#'|'$'|'%'|';'|':'|'['|']'|'=')
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_2() { return cSTRINGTerminalRuleCall_2; }
		
		//WS
		public RuleCall getWSTerminalRuleCall_3() { return cWSTerminalRuleCall_3; }
		
		//'+'
		public Keyword getPlusSignKeyword_4() { return cPlusSignKeyword_4; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_5() { return cHyphenMinusKeyword_5; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_6() { return cLeftParenthesisKeyword_6; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
		
		//'*'
		public Keyword getAsteriskKeyword_8() { return cAsteriskKeyword_8; }
		
		//'.'
		public Keyword getFullStopKeyword_9() { return cFullStopKeyword_9; }
		
		//'/'
		public Keyword getSolidusKeyword_10() { return cSolidusKeyword_10; }
		
		//'\\'
		public Keyword getReverseSolidusKeyword_11() { return cReverseSolidusKeyword_11; }
		
		//'|'
		public Keyword getVerticalLineKeyword_12() { return cVerticalLineKeyword_12; }
		
		//'?'
		public Keyword getQuestionMarkKeyword_13() { return cQuestionMarkKeyword_13; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_14() { return cGreaterThanSignKeyword_14; }
		
		//'<'
		public Keyword getLessThanSignKeyword_15() { return cLessThanSignKeyword_15; }
		
		//'#'
		public Keyword getNumberSignKeyword_16() { return cNumberSignKeyword_16; }
		
		//'$'
		public Keyword getDollarSignKeyword_17() { return cDollarSignKeyword_17; }
		
		//'%'
		public Keyword getPercentSignKeyword_18() { return cPercentSignKeyword_18; }
		
		//';'
		public Keyword getSemicolonKeyword_19() { return cSemicolonKeyword_19; }
		
		//':'
		public Keyword getColonKeyword_20() { return cColonKeyword_20; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_21() { return cExclamationMarkKeyword_21; }
		
		//'='
		public Keyword getEqualsSignKeyword_22() { return cEqualsSignKeyword_22; }
		
		//','
		public Keyword getCommaKeyword_23() { return cCommaKeyword_23; }
	}
	public class ScannerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.cocktail.Scanner.Scanner");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSCANNERKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Scanner:
		//	'SCANNER' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'SCANNER' name=ID
		public Group getGroup() { return cGroup; }
		
		//'SCANNER'
		public Keyword getSCANNERKeyword_0() { return cSCANNERKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class ExportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.cocktail.Scanner.Export");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEXPORTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cContentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cContentCodeBlockParserRuleCall_2_0 = (RuleCall)cContentAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Export:
		//	'EXPORT' '{' content=CodeBlock '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'EXPORT' '{' content=CodeBlock '}'
		public Group getGroup() { return cGroup; }
		
		//'EXPORT'
		public Keyword getEXPORTKeyword_0() { return cEXPORTKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//content=CodeBlock
		public Assignment getContentAssignment_2() { return cContentAssignment_2; }
		
		//CodeBlock
		public RuleCall getContentCodeBlockParserRuleCall_2_0() { return cContentCodeBlockParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.cocktail.Scanner.Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIMPORTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cContentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cContentCodeBlockParserRuleCall_2_0 = (RuleCall)cContentAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Import:
		//	'IMPORT' '{' content=CodeBlock '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'IMPORT' '{' content=CodeBlock '}'
		public Group getGroup() { return cGroup; }
		
		//'IMPORT'
		public Keyword getIMPORTKeyword_0() { return cIMPORTKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//content=CodeBlock
		public Assignment getContentAssignment_2() { return cContentAssignment_2; }
		
		//CodeBlock
		public RuleCall getContentCodeBlockParserRuleCall_2_0() { return cContentCodeBlockParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class GlobalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.cocktail.Scanner.Global");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGLOBALKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cContentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cContentCodeBlockParserRuleCall_2_0 = (RuleCall)cContentAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Global:
		//	'GLOBAL' '{' content=CodeBlock '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'GLOBAL' '{' content=CodeBlock '}'
		public Group getGroup() { return cGroup; }
		
		//'GLOBAL'
		public Keyword getGLOBALKeyword_0() { return cGLOBALKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//content=CodeBlock
		public Assignment getContentAssignment_2() { return cContentAssignment_2; }
		
		//CodeBlock
		public RuleCall getContentCodeBlockParserRuleCall_2_0() { return cContentCodeBlockParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class LocalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.cocktail.Scanner.Local");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLOCALKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cContentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cContentCodeBlockParserRuleCall_2_0 = (RuleCall)cContentAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Local:
		//	'LOCAL' '{' content=CodeBlock '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'LOCAL' '{' content=CodeBlock '}'
		public Group getGroup() { return cGroup; }
		
		//'LOCAL'
		public Keyword getLOCALKeyword_0() { return cLOCALKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//content=CodeBlock
		public Assignment getContentAssignment_2() { return cContentAssignment_2; }
		
		//CodeBlock
		public RuleCall getContentCodeBlockParserRuleCall_2_0() { return cContentCodeBlockParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class DefaultElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.cocktail.Scanner.Default");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDEFAULTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cContentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cContentCodeBlockParserRuleCall_2_0 = (RuleCall)cContentAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Default:
		//	'DEFAULT' '{' content=CodeBlock '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'DEFAULT' '{' content=CodeBlock '}'
		public Group getGroup() { return cGroup; }
		
		//'DEFAULT'
		public Keyword getDEFAULTKeyword_0() { return cDEFAULTKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//content=CodeBlock
		public Assignment getContentAssignment_2() { return cContentAssignment_2; }
		
		//CodeBlock
		public RuleCall getContentCodeBlockParserRuleCall_2_0() { return cContentCodeBlockParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class EofElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.cocktail.Scanner.Eof");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEOFKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cContentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cContentCodeBlockParserRuleCall_2_0 = (RuleCall)cContentAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Eof:
		//	'EOF' '{' content=CodeBlock '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'EOF' '{' content=CodeBlock '}'
		public Group getGroup() { return cGroup; }
		
		//'EOF'
		public Keyword getEOFKeyword_0() { return cEOFKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//content=CodeBlock
		public Assignment getContentAssignment_2() { return cContentAssignment_2; }
		
		//CodeBlock
		public RuleCall getContentCodeBlockParserRuleCall_2_0() { return cContentCodeBlockParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class BeginElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.cocktail.Scanner.Begin");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBEGINKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cContentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cContentCodeBlockParserRuleCall_2_0 = (RuleCall)cContentAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Begin:
		//	'BEGIN' '{' content=CodeBlock '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'BEGIN' '{' content=CodeBlock '}'
		public Group getGroup() { return cGroup; }
		
		//'BEGIN'
		public Keyword getBEGINKeyword_0() { return cBEGINKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//content=CodeBlock
		public Assignment getContentAssignment_2() { return cContentAssignment_2; }
		
		//CodeBlock
		public RuleCall getContentCodeBlockParserRuleCall_2_0() { return cContentCodeBlockParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class CloseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.cocktail.Scanner.Close");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCLOSEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cContentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cContentCodeBlockParserRuleCall_2_0 = (RuleCall)cContentAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Close:
		//	'CLOSE' '{' content=CodeBlock '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'CLOSE' '{' content=CodeBlock '}'
		public Group getGroup() { return cGroup; }
		
		//'CLOSE'
		public Keyword getCLOSEKeyword_0() { return cCLOSEKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//content=CodeBlock
		public Assignment getContentAssignment_2() { return cContentAssignment_2; }
		
		//CodeBlock
		public RuleCall getContentCodeBlockParserRuleCall_2_0() { return cContentCodeBlockParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class DefineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.cocktail.Scanner.Define");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDEFINEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDefinesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDefinesDefineRuleParserRuleCall_1_0 = (RuleCall)cDefinesAssignment_1.eContents().get(0);
		
		//Define:
		//	'DEFINE' defines+=DefineRule+;
		@Override public ParserRule getRule() { return rule; }
		
		//'DEFINE' defines+=DefineRule+
		public Group getGroup() { return cGroup; }
		
		//'DEFINE'
		public Keyword getDEFINEKeyword_0() { return cDEFINEKeyword_0; }
		
		//defines+=DefineRule+
		public Assignment getDefinesAssignment_1() { return cDefinesAssignment_1; }
		
		//DefineRule
		public RuleCall getDefinesDefineRuleParserRuleCall_1_0() { return cDefinesDefineRuleParserRuleCall_1_0; }
	}
	public class DefineRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.cocktail.Scanner.DefineRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRuleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRuleDefineRegexParserRuleCall_2_0 = (RuleCall)cRuleAssignment_2.eContents().get(0);
		private final Keyword cFullStopKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DefineRule:
		//	name=ID '=' rule=DefineRegex '.';
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '=' rule=DefineRegex '.'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//rule=DefineRegex
		public Assignment getRuleAssignment_2() { return cRuleAssignment_2; }
		
		//DefineRegex
		public RuleCall getRuleDefineRegexParserRuleCall_2_0() { return cRuleDefineRegexParserRuleCall_2_0; }
		
		//'.'
		public Keyword getFullStopKeyword_3() { return cFullStopKeyword_3; }
	}
	public class DefineRegexElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.cocktail.Scanner.DefineRegex");
		private final RuleCall cRegexParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//DefineRegex:
		//	Regex*;
		@Override public ParserRule getRule() { return rule; }
		
		//Regex*
		public RuleCall getRegexParserRuleCall() { return cRegexParserRuleCall; }
	}
	public class StartStatesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.cocktail.Scanner.StartStates");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSTARTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIncstatesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIncstatesStartStateParserRuleCall_1_0 = (RuleCall)cIncstatesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cIncstatesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cIncstatesStartStateParserRuleCall_2_1_0 = (RuleCall)cIncstatesAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cHyphenMinusKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cExstatesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cExstatesStartStateParserRuleCall_3_1_0 = (RuleCall)cExstatesAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cExstatesAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cExstatesStartStateParserRuleCall_3_2_1_0 = (RuleCall)cExstatesAssignment_3_2_1.eContents().get(0);
		
		//StartStates:
		//	'START' incstates+=StartState (',' incstates+=StartState)* ('-' exstates+=StartState (',' exstates+=StartState)*)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'START' incstates+=StartState (',' incstates+=StartState)* ('-' exstates+=StartState (',' exstates+=StartState)*)?
		public Group getGroup() { return cGroup; }
		
		//'START'
		public Keyword getSTARTKeyword_0() { return cSTARTKeyword_0; }
		
		//incstates+=StartState
		public Assignment getIncstatesAssignment_1() { return cIncstatesAssignment_1; }
		
		//StartState
		public RuleCall getIncstatesStartStateParserRuleCall_1_0() { return cIncstatesStartStateParserRuleCall_1_0; }
		
		//(',' incstates+=StartState)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//incstates+=StartState
		public Assignment getIncstatesAssignment_2_1() { return cIncstatesAssignment_2_1; }
		
		//StartState
		public RuleCall getIncstatesStartStateParserRuleCall_2_1_0() { return cIncstatesStartStateParserRuleCall_2_1_0; }
		
		//('-' exstates+=StartState (',' exstates+=StartState)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_3_0() { return cHyphenMinusKeyword_3_0; }
		
		//exstates+=StartState
		public Assignment getExstatesAssignment_3_1() { return cExstatesAssignment_3_1; }
		
		//StartState
		public RuleCall getExstatesStartStateParserRuleCall_3_1_0() { return cExstatesStartStateParserRuleCall_3_1_0; }
		
		//(',' exstates+=StartState)*
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//','
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }
		
		//exstates+=StartState
		public Assignment getExstatesAssignment_3_2_1() { return cExstatesAssignment_3_2_1; }
		
		//StartState
		public RuleCall getExstatesStartStateParserRuleCall_3_2_1_0() { return cExstatesStartStateParserRuleCall_3_2_1_0; }
	}
	public class StartStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.cocktail.Scanner.StartState");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//StartState:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.cocktail.Scanner.Rule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cInfoAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cInfoAlternatives_0_0 = (Alternatives)cInfoAssignment_0.eContents().get(0);
		private final Keyword cInfoRULEKeyword_0_0_0 = (Keyword)cInfoAlternatives_0_0.eContents().get(0);
		private final Keyword cInfoRULESKeyword_0_0_1 = (Keyword)cInfoAlternatives_0_0.eContents().get(1);
		private final Assignment cRulesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRulesSingleRuleParserRuleCall_1_0 = (RuleCall)cRulesAssignment_1.eContents().get(0);
		
		//Rule:
		//	info=('RULE' | 'RULES') rules+=SingleRule*;
		@Override public ParserRule getRule() { return rule; }
		
		//info=('RULE' | 'RULES') rules+=SingleRule*
		public Group getGroup() { return cGroup; }
		
		//info=('RULE' | 'RULES')
		public Assignment getInfoAssignment_0() { return cInfoAssignment_0; }
		
		//('RULE' | 'RULES')
		public Alternatives getInfoAlternatives_0_0() { return cInfoAlternatives_0_0; }
		
		//'RULE'
		public Keyword getInfoRULEKeyword_0_0_0() { return cInfoRULEKeyword_0_0_0; }
		
		//'RULES'
		public Keyword getInfoRULESKeyword_0_0_1() { return cInfoRULESKeyword_0_0_1; }
		
		//rules+=SingleRule*
		public Assignment getRulesAssignment_1() { return cRulesAssignment_1; }
		
		//SingleRule
		public RuleCall getRulesSingleRuleParserRuleCall_1_0() { return cRulesSingleRuleParserRuleCall_1_0; }
	}
	public class SingleRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.cocktail.Scanner.SingleRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStartAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStartRuleStartParserRuleCall_0_0 = (RuleCall)cStartAssignment_0.eContents().get(0);
		private final Assignment cRuleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRuleRuleDefinitionParserRuleCall_1_0 = (RuleCall)cRuleAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cHyphenMinusKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cContentAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cContentCodeBlockParserRuleCall_5_0 = (RuleCall)cContentAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//SingleRule:
		//	start=RuleStart? rule=RuleDefinition ':' '-'? '{' content=CodeBlock '}';
		@Override public ParserRule getRule() { return rule; }
		
		//start=RuleStart? rule=RuleDefinition ':' '-'? '{' content=CodeBlock '}'
		public Group getGroup() { return cGroup; }
		
		//start=RuleStart?
		public Assignment getStartAssignment_0() { return cStartAssignment_0; }
		
		//RuleStart
		public RuleCall getStartRuleStartParserRuleCall_0_0() { return cStartRuleStartParserRuleCall_0_0; }
		
		//rule=RuleDefinition
		public Assignment getRuleAssignment_1() { return cRuleAssignment_1; }
		
		//RuleDefinition
		public RuleCall getRuleRuleDefinitionParserRuleCall_1_0() { return cRuleRuleDefinitionParserRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_3() { return cHyphenMinusKeyword_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//content=CodeBlock
		public Assignment getContentAssignment_5() { return cContentAssignment_5; }
		
		//CodeBlock
		public RuleCall getContentCodeBlockParserRuleCall_5_0() { return cContentCodeBlockParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class RegexElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.cocktail.Scanner.Regex");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cWSTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final Keyword cPlusSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cHyphenMinusKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cLeftParenthesisKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cAsteriskKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cFullStopKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cSolidusKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cReverseSolidusKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cVerticalLineKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cQuestionMarkKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		private final Keyword cGreaterThanSignKeyword_14 = (Keyword)cAlternatives.eContents().get(14);
		private final Keyword cLessThanSignKeyword_15 = (Keyword)cAlternatives.eContents().get(15);
		private final Keyword cLeftCurlyBracketKeyword_16 = (Keyword)cAlternatives.eContents().get(16);
		private final Keyword cRightCurlyBracketKeyword_17 = (Keyword)cAlternatives.eContents().get(17);
		private final Keyword cQuotationMarkKeyword_18 = (Keyword)cAlternatives.eContents().get(18);
		private final Keyword cApostropheKeyword_19 = (Keyword)cAlternatives.eContents().get(19);
		
		//Regex:
		//	ID | INT | STRING | WS | '+' | '-' | '(' | ')' | '*' | '.' | '/' | '\\' | '|' | '?' | '>' | '<' | '{' | '}' | '"' |
		//	'\'';
		@Override public ParserRule getRule() { return rule; }
		
		//ID | INT | STRING | WS | '+' | '-' | '(' | ')' | '*' | '.' | '/' | '\\' | '|' | '?' | '>' | '<' | '{' | '}' | '"' | '\''
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_2() { return cSTRINGTerminalRuleCall_2; }
		
		//WS
		public RuleCall getWSTerminalRuleCall_3() { return cWSTerminalRuleCall_3; }
		
		//'+'
		public Keyword getPlusSignKeyword_4() { return cPlusSignKeyword_4; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_5() { return cHyphenMinusKeyword_5; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_6() { return cLeftParenthesisKeyword_6; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
		
		//'*'
		public Keyword getAsteriskKeyword_8() { return cAsteriskKeyword_8; }
		
		//'.'
		public Keyword getFullStopKeyword_9() { return cFullStopKeyword_9; }
		
		//'/'
		public Keyword getSolidusKeyword_10() { return cSolidusKeyword_10; }
		
		//'\\'
		public Keyword getReverseSolidusKeyword_11() { return cReverseSolidusKeyword_11; }
		
		//'|'
		public Keyword getVerticalLineKeyword_12() { return cVerticalLineKeyword_12; }
		
		//'?'
		public Keyword getQuestionMarkKeyword_13() { return cQuestionMarkKeyword_13; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_14() { return cGreaterThanSignKeyword_14; }
		
		//'<'
		public Keyword getLessThanSignKeyword_15() { return cLessThanSignKeyword_15; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_16() { return cLeftCurlyBracketKeyword_16; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_17() { return cRightCurlyBracketKeyword_17; }
		
		//'"'
		public Keyword getQuotationMarkKeyword_18() { return cQuotationMarkKeyword_18; }
		
		//'\''
		public Keyword getApostropheKeyword_19() { return cApostropheKeyword_19; }
	}
	public class RuleDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.cocktail.Scanner.RuleDefinition");
		private final Assignment cPartsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cPartsRulePartParserRuleCall_0 = (RuleCall)cPartsAssignment.eContents().get(0);
		
		//RuleDefinition:
		//	parts+=RulePart*;
		@Override public ParserRule getRule() { return rule; }
		
		//parts+=RulePart*
		public Assignment getPartsAssignment() { return cPartsAssignment; }
		
		//RulePart
		public RuleCall getPartsRulePartParserRuleCall_0() { return cPartsRulePartParserRuleCall_0; }
	}
	public class RulePartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.cocktail.Scanner.RulePart");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cRegAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cRegRegexParserRuleCall_0_0 = (RuleCall)cRegAssignment_0.eContents().get(0);
		private final Assignment cRefAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final CrossReference cRefDefineRuleCrossReference_1_0 = (CrossReference)cRefAssignment_1.eContents().get(0);
		private final RuleCall cRefDefineRuleIDTerminalRuleCall_1_0_1 = (RuleCall)cRefDefineRuleCrossReference_1_0.eContents().get(1);
		
		//RulePart:
		//	reg=Regex | -> ref=[DefineRule];
		@Override public ParserRule getRule() { return rule; }
		
		//reg=Regex | -> ref=[DefineRule]
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//reg=Regex
		public Assignment getRegAssignment_0() { return cRegAssignment_0; }
		
		//Regex
		public RuleCall getRegRegexParserRuleCall_0_0() { return cRegRegexParserRuleCall_0_0; }
		
		//-> ref=[DefineRule]
		public Assignment getRefAssignment_1() { return cRefAssignment_1; }
		
		//[DefineRule]
		public CrossReference getRefDefineRuleCrossReference_1_0() { return cRefDefineRuleCrossReference_1_0; }
		
		//ID
		public RuleCall getRefDefineRuleIDTerminalRuleCall_1_0_1() { return cRefDefineRuleIDTerminalRuleCall_1_0_1; }
	}
	public class RuleStartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.cocktail.Scanner.RuleStart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cRulePrecAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Keyword cRulePrecNOTKeyword_0_0_0 = (Keyword)cRulePrecAssignment_0_0.eContents().get(0);
		private final Assignment cRulePrecAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cRulePrecHyphenMinusKeyword_0_1_0 = (Keyword)cRulePrecAssignment_0_1.eContents().get(0);
		private final Keyword cNumberSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Assignment cRuleStatesAssignment_2_0_0 = (Assignment)cGroup_2_0.eContents().get(0);
		private final CrossReference cRuleStatesStartStateCrossReference_2_0_0_0 = (CrossReference)cRuleStatesAssignment_2_0_0.eContents().get(0);
		private final RuleCall cRuleStatesStartStateIDTerminalRuleCall_2_0_0_0_1 = (RuleCall)cRuleStatesStartStateCrossReference_2_0_0_0.eContents().get(1);
		private final Group cGroup_2_0_1 = (Group)cGroup_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_2_0_1_0 = (Keyword)cGroup_2_0_1.eContents().get(0);
		private final Assignment cRuleStatesAssignment_2_0_1_1 = (Assignment)cGroup_2_0_1.eContents().get(1);
		private final CrossReference cRuleStatesStartStateCrossReference_2_0_1_1_0 = (CrossReference)cRuleStatesAssignment_2_0_1_1.eContents().get(0);
		private final RuleCall cRuleStatesStartStateIDTerminalRuleCall_2_0_1_1_0_1 = (RuleCall)cRuleStatesStartStateCrossReference_2_0_1_1_0.eContents().get(1);
		private final Assignment cRuleDefaultAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final Keyword cRuleDefaultSTDKeyword_2_1_0 = (Keyword)cRuleDefaultAssignment_2_1.eContents().get(0);
		private final Assignment cRuleDefaultAssignment_2_2 = (Assignment)cAlternatives_2.eContents().get(2);
		private final Keyword cRuleDefaultAsteriskKeyword_2_2_0 = (Keyword)cRuleDefaultAssignment_2_2.eContents().get(0);
		private final Keyword cNumberSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////#STD# oder #STARTSTATE# oder #State1,State2,State3# oder #*# oder Not / - #STD#
		//RuleStart:
		//	(rulePrec='NOT' | rulePrec='-')? '#' (ruleStates+=[StartState] (',' ruleStates+=[StartState])* | ruleDefault='STD' |
		//	ruleDefault='*') '#';
		@Override public ParserRule getRule() { return rule; }
		
		//(rulePrec='NOT' | rulePrec='-')? '#' (ruleStates+=[StartState] (',' ruleStates+=[StartState])* | ruleDefault='STD' |
		//ruleDefault='*') '#'
		public Group getGroup() { return cGroup; }
		
		//(rulePrec='NOT' | rulePrec='-')?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//rulePrec='NOT'
		public Assignment getRulePrecAssignment_0_0() { return cRulePrecAssignment_0_0; }
		
		//'NOT'
		public Keyword getRulePrecNOTKeyword_0_0_0() { return cRulePrecNOTKeyword_0_0_0; }
		
		//rulePrec='-'
		public Assignment getRulePrecAssignment_0_1() { return cRulePrecAssignment_0_1; }
		
		//'-'
		public Keyword getRulePrecHyphenMinusKeyword_0_1_0() { return cRulePrecHyphenMinusKeyword_0_1_0; }
		
		//'#'
		public Keyword getNumberSignKeyword_1() { return cNumberSignKeyword_1; }
		
		//(ruleStates+=[StartState] (',' ruleStates+=[StartState])* | ruleDefault='STD' | ruleDefault='*')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//ruleStates+=[StartState] (',' ruleStates+=[StartState])*
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//ruleStates+=[StartState]
		public Assignment getRuleStatesAssignment_2_0_0() { return cRuleStatesAssignment_2_0_0; }
		
		//[StartState]
		public CrossReference getRuleStatesStartStateCrossReference_2_0_0_0() { return cRuleStatesStartStateCrossReference_2_0_0_0; }
		
		//ID
		public RuleCall getRuleStatesStartStateIDTerminalRuleCall_2_0_0_0_1() { return cRuleStatesStartStateIDTerminalRuleCall_2_0_0_0_1; }
		
		//(',' ruleStates+=[StartState])*
		public Group getGroup_2_0_1() { return cGroup_2_0_1; }
		
		//','
		public Keyword getCommaKeyword_2_0_1_0() { return cCommaKeyword_2_0_1_0; }
		
		//ruleStates+=[StartState]
		public Assignment getRuleStatesAssignment_2_0_1_1() { return cRuleStatesAssignment_2_0_1_1; }
		
		//[StartState]
		public CrossReference getRuleStatesStartStateCrossReference_2_0_1_1_0() { return cRuleStatesStartStateCrossReference_2_0_1_1_0; }
		
		//ID
		public RuleCall getRuleStatesStartStateIDTerminalRuleCall_2_0_1_1_0_1() { return cRuleStatesStartStateIDTerminalRuleCall_2_0_1_1_0_1; }
		
		//ruleDefault='STD'
		public Assignment getRuleDefaultAssignment_2_1() { return cRuleDefaultAssignment_2_1; }
		
		//'STD'
		public Keyword getRuleDefaultSTDKeyword_2_1_0() { return cRuleDefaultSTDKeyword_2_1_0; }
		
		//ruleDefault='*'
		public Assignment getRuleDefaultAssignment_2_2() { return cRuleDefaultAssignment_2_2; }
		
		//'*'
		public Keyword getRuleDefaultAsteriskKeyword_2_2_0() { return cRuleDefaultAsteriskKeyword_2_2_0; }
		
		//'#'
		public Keyword getNumberSignKeyword_3() { return cNumberSignKeyword_3; }
	}
	
	
	private final ModelElements pModel;
	private final CodeBlockElements pCodeBlock;
	private final CodeWallElements pCodeWall;
	private final ScannerElements pScanner;
	private final ExportElements pExport;
	private final ImportElements pImport;
	private final GlobalElements pGlobal;
	private final LocalElements pLocal;
	private final DefaultElements pDefault;
	private final EofElements pEof;
	private final BeginElements pBegin;
	private final CloseElements pClose;
	private final DefineElements pDefine;
	private final DefineRuleElements pDefineRule;
	private final DefineRegexElements pDefineRegex;
	private final StartStatesElements pStartStates;
	private final StartStateElements pStartState;
	private final RuleElements pRule;
	private final SingleRuleElements pSingleRule;
	private final RegexElements pRegex;
	private final RuleDefinitionElements pRuleDefinition;
	private final RulePartElements pRulePart;
	private final RuleStartElements pRuleStart;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ScannerGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pCodeBlock = new CodeBlockElements();
		this.pCodeWall = new CodeWallElements();
		this.pScanner = new ScannerElements();
		this.pExport = new ExportElements();
		this.pImport = new ImportElements();
		this.pGlobal = new GlobalElements();
		this.pLocal = new LocalElements();
		this.pDefault = new DefaultElements();
		this.pEof = new EofElements();
		this.pBegin = new BeginElements();
		this.pClose = new CloseElements();
		this.pDefine = new DefineElements();
		this.pDefineRule = new DefineRuleElements();
		this.pDefineRegex = new DefineRegexElements();
		this.pStartStates = new StartStatesElements();
		this.pStartState = new StartStateElements();
		this.pRule = new RuleElements();
		this.pSingleRule = new SingleRuleElements();
		this.pRegex = new RegexElements();
		this.pRuleDefinition = new RuleDefinitionElements();
		this.pRulePart = new RulePartElements();
		this.pRuleStart = new RuleStartElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.cocktail.Scanner".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	(scanner=Scanner?
	//	& export=Export?
	//	& imports=Import?
	//	& global=Global?
	//	& local=Local?
	//	& default=Default?
	//	& eof=Eof?
	//	& begin=Begin?
	//	& close=Close?
	//	& define=Define?
	//	& states=StartStates?) rules=Rule;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	////TODO Characterset
	//CodeBlock:
	//	(wall+=CodeWall | '{' block=CodeBlock '}')*;
	public CodeBlockElements getCodeBlockAccess() {
		return pCodeBlock;
	}
	
	public ParserRule getCodeBlockRule() {
		return getCodeBlockAccess().getRule();
	}
	
	//CodeWall:
	//	ID | INT | STRING | WS | '+' | '-' | '(' | ')' | '*' | '.' | '/' | '\\' | '|' | '?' | '>' | '<' | '#' | '$' | '%' |
	//	';'
	//	| ':' | '!' | '=' | ',';
	public CodeWallElements getCodeWallAccess() {
		return pCodeWall;
	}
	
	public ParserRule getCodeWallRule() {
		return getCodeWallAccess().getRule();
	}
	
	//Scanner:
	//	'SCANNER' name=ID;
	public ScannerElements getScannerAccess() {
		return pScanner;
	}
	
	public ParserRule getScannerRule() {
		return getScannerAccess().getRule();
	}
	
	//Export:
	//	'EXPORT' '{' content=CodeBlock '}';
	public ExportElements getExportAccess() {
		return pExport;
	}
	
	public ParserRule getExportRule() {
		return getExportAccess().getRule();
	}
	
	//Import:
	//	'IMPORT' '{' content=CodeBlock '}';
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}
	
	//Global:
	//	'GLOBAL' '{' content=CodeBlock '}';
	public GlobalElements getGlobalAccess() {
		return pGlobal;
	}
	
	public ParserRule getGlobalRule() {
		return getGlobalAccess().getRule();
	}
	
	//Local:
	//	'LOCAL' '{' content=CodeBlock '}';
	public LocalElements getLocalAccess() {
		return pLocal;
	}
	
	public ParserRule getLocalRule() {
		return getLocalAccess().getRule();
	}
	
	//Default:
	//	'DEFAULT' '{' content=CodeBlock '}';
	public DefaultElements getDefaultAccess() {
		return pDefault;
	}
	
	public ParserRule getDefaultRule() {
		return getDefaultAccess().getRule();
	}
	
	//Eof:
	//	'EOF' '{' content=CodeBlock '}';
	public EofElements getEofAccess() {
		return pEof;
	}
	
	public ParserRule getEofRule() {
		return getEofAccess().getRule();
	}
	
	//Begin:
	//	'BEGIN' '{' content=CodeBlock '}';
	public BeginElements getBeginAccess() {
		return pBegin;
	}
	
	public ParserRule getBeginRule() {
		return getBeginAccess().getRule();
	}
	
	//Close:
	//	'CLOSE' '{' content=CodeBlock '}';
	public CloseElements getCloseAccess() {
		return pClose;
	}
	
	public ParserRule getCloseRule() {
		return getCloseAccess().getRule();
	}
	
	//Define:
	//	'DEFINE' defines+=DefineRule+;
	public DefineElements getDefineAccess() {
		return pDefine;
	}
	
	public ParserRule getDefineRule() {
		return getDefineAccess().getRule();
	}
	
	//DefineRule:
	//	name=ID '=' rule=DefineRegex '.';
	public DefineRuleElements getDefineRuleAccess() {
		return pDefineRule;
	}
	
	public ParserRule getDefineRuleRule() {
		return getDefineRuleAccess().getRule();
	}
	
	//DefineRegex:
	//	Regex*;
	public DefineRegexElements getDefineRegexAccess() {
		return pDefineRegex;
	}
	
	public ParserRule getDefineRegexRule() {
		return getDefineRegexAccess().getRule();
	}
	
	//StartStates:
	//	'START' incstates+=StartState (',' incstates+=StartState)* ('-' exstates+=StartState (',' exstates+=StartState)*)?;
	public StartStatesElements getStartStatesAccess() {
		return pStartStates;
	}
	
	public ParserRule getStartStatesRule() {
		return getStartStatesAccess().getRule();
	}
	
	//StartState:
	//	name=ID;
	public StartStateElements getStartStateAccess() {
		return pStartState;
	}
	
	public ParserRule getStartStateRule() {
		return getStartStateAccess().getRule();
	}
	
	//Rule:
	//	info=('RULE' | 'RULES') rules+=SingleRule*;
	public RuleElements getRuleAccess() {
		return pRule;
	}
	
	public ParserRule getRuleRule() {
		return getRuleAccess().getRule();
	}
	
	//SingleRule:
	//	start=RuleStart? rule=RuleDefinition ':' '-'? '{' content=CodeBlock '}';
	public SingleRuleElements getSingleRuleAccess() {
		return pSingleRule;
	}
	
	public ParserRule getSingleRuleRule() {
		return getSingleRuleAccess().getRule();
	}
	
	//Regex:
	//	ID | INT | STRING | WS | '+' | '-' | '(' | ')' | '*' | '.' | '/' | '\\' | '|' | '?' | '>' | '<' | '{' | '}' | '"' |
	//	'\'';
	public RegexElements getRegexAccess() {
		return pRegex;
	}
	
	public ParserRule getRegexRule() {
		return getRegexAccess().getRule();
	}
	
	//RuleDefinition:
	//	parts+=RulePart*;
	public RuleDefinitionElements getRuleDefinitionAccess() {
		return pRuleDefinition;
	}
	
	public ParserRule getRuleDefinitionRule() {
		return getRuleDefinitionAccess().getRule();
	}
	
	//RulePart:
	//	reg=Regex | -> ref=[DefineRule];
	public RulePartElements getRulePartAccess() {
		return pRulePart;
	}
	
	public ParserRule getRulePartRule() {
		return getRulePartAccess().getRule();
	}
	
	////#STD# oder #STARTSTATE# oder #State1,State2,State3# oder #*# oder Not / - #STD#
	//RuleStart:
	//	(rulePrec='NOT' | rulePrec='-')? '#' (ruleStates+=[StartState] (',' ruleStates+=[StartState])* | ruleDefault='STD' |
	//	ruleDefault='*') '#';
	public RuleStartElements getRuleStartAccess() {
		return pRuleStart;
	}
	
	public ParserRule getRuleStartRule() {
		return getRuleStartAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
