/**
 * generated by Xtext 2.9.1
 */
package org.xtext.cocktail.scanner.impl;

import java.util.Collection;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;
import org.eclipse.emf.ecore.util.EObjectResolvingEList;

import org.xtext.cocktail.scanner.DefineRule;
import org.xtext.cocktail.scanner.RuleDefinition;
import org.xtext.cocktail.scanner.ScannerPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Rule Definition</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@link org.xtext.cocktail.scanner.impl.RuleDefinitionImpl#getReg <em>Reg</em>}</li>
 *   <li>{@link org.xtext.cocktail.scanner.impl.RuleDefinitionImpl#getDef <em>Def</em>}</li>
 * </ul>
 * </p>
 *
 * @generated
 */
public class RuleDefinitionImpl extends MinimalEObjectImpl.Container implements RuleDefinition
{
  /**
   * The cached value of the '{@link #getReg() <em>Reg</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getReg()
   * @generated
   * @ordered
   */
  protected EList<String> reg;

  /**
   * The cached value of the '{@link #getDef() <em>Def</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDef()
   * @generated
   * @ordered
   */
  protected EList<DefineRule> def;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RuleDefinitionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ScannerPackage.Literals.RULE_DEFINITION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<String> getReg()
  {
    if (reg == null)
    {
      reg = new EDataTypeEList<String>(String.class, this, ScannerPackage.RULE_DEFINITION__REG);
    }
    return reg;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<DefineRule> getDef()
  {
    if (def == null)
    {
      def = new EObjectResolvingEList<DefineRule>(DefineRule.class, this, ScannerPackage.RULE_DEFINITION__DEF);
    }
    return def;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ScannerPackage.RULE_DEFINITION__REG:
        return getReg();
      case ScannerPackage.RULE_DEFINITION__DEF:
        return getDef();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ScannerPackage.RULE_DEFINITION__REG:
        getReg().clear();
        getReg().addAll((Collection<? extends String>)newValue);
        return;
      case ScannerPackage.RULE_DEFINITION__DEF:
        getDef().clear();
        getDef().addAll((Collection<? extends DefineRule>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ScannerPackage.RULE_DEFINITION__REG:
        getReg().clear();
        return;
      case ScannerPackage.RULE_DEFINITION__DEF:
        getDef().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ScannerPackage.RULE_DEFINITION__REG:
        return reg != null && !reg.isEmpty();
      case ScannerPackage.RULE_DEFINITION__DEF:
        return def != null && !def.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (reg: ");
    result.append(reg);
    result.append(')');
    return result.toString();
  }

} //RuleDefinitionImpl
