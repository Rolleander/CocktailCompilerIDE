grammar org.xtext.cocktail.Scanner with org.eclipse.xtext.common.Terminals

generate scanner "http://www.xtext.org/cocktail/Scanner"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore




Model:
	scanner+=Scanner (scanner+=Export? & scanner+=Global? & scanner+=Local? & scanner+=Default? &
	scanner +=Eof? & scanner+=Define? & scanner+=StartStates? & scanner+=Rule);

terminal INLINE_CODE:
	'{' -> '}'
;


CodeBlock:
	INLINE_CODE
;

Scanner:
	'SCANNER' name=ID;

Export:
	'EXPORT'  content=CodeBlock ;

Global:
	'GLOBAL' content=CodeBlock;

Local:
	'LOCAL' content=CodeBlock;
	
Default:
	'DEFAULT' content=CodeBlock;
	
Eof:
	'EOF' content=CodeBlock;
	
Define:
	'DEFINE'  (defines+=DefineRule)+   ;	

DefineRule:
	name=ID '=' rule=ID '.';

StartStates: 
'START' incstates+= StartState (',' incstates+=StartState)* 
('-' exstates+= StartState (',' exstates+=StartState)*)?
;

StartState:
	name= ID
;



Rule:
	info= ('RULE'|'RULES') (rules+=SingleRule)*;


SingleRule:
	 RuleStart? rule+=RuleDefinition  ('-')? content=CodeBlock
;

RuleDefinition:
	(ID|STRING|WS|'+'|'-'|'('|')'|'*'|'.'|'/'|'\\'|'|'|'?'|'>'|'<'|'#')* ':'
;


//#STD# oder #STARTSTATE# oder #State1,State2,State3# oder #*# oder Not / - #STD#
RuleStart:
	 ('NOT'|'-')? '#' (state+=[StartState] (',' state+=[StartState])* | 'STD' | '*') '#' 
;

ActionStatement:
	st+=[Scanner]'_GetWord(v);' |
	st+=[Scanner]'_GetLower(v);' |
	st+=[Scanner]'_GetUpper(v);' |
	'yyEcho;'| 'yyLess(' INT ');'
;



