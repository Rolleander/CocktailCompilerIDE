grammar org.xtext.cocktail.Scanner with org.eclipse.xtext.common.Terminals

generate scanner "http://www.xtext.org/cocktail/Scanner"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Model:
	scanner+=Scanner (scanner+=Export? & scanner+=Global? & scanner+=Local? & scanner+=Default? &
	scanner+=Eof? & scanner+=Define? & scanner+=StartStates? & scanner+=Rule & scanner+=Begin? scanner+=Close?);

CodeBlock:
	(CodeWall | '{' CodeBlock '}')*;

CodeWall:
//(ID|INT|STRING|WS|'+'|'-'|'('|')'|'*'|'.'|'/'|'\\'|'|'|'?'|'>'|'<'|'#'|'$'|'%'|';'|':'|'['|']'|'=')
	ID | INT | STRING | WS | '+' | '-' | '(' | ')' | '*' | '.' | '/' | '\\' | '|' | '?' | '>' | '<' | '#' | '$' | '%' | ';'
	| ':' | '!' | '=' | ',';

Scanner:
	'SCANNER' name=ID;

Export:
	'EXPORT' '{' content=CodeBlock '}';

Global:
	'GLOBAL' '{' content=CodeBlock '}';

Local:
	'LOCAL' '{' content=CodeBlock '}';

Default:
	'DEFAULT' '{' content=CodeBlock '}';

Eof:
	'EOF' '{' content=CodeBlock '}';

Begin:
	'BEGIN' '{' content=CodeBlock '}';

Close:
	'CLOSE' '{' content=CodeBlock '}';

Define:
	'DEFINE' (defines+=DefineRule)+;

DefineRule:
	name=ID '=' rule=DefineRegex '.';

DefineRegex:
	Regex*;

StartStates:
	'START' incstates+=StartState (',' incstates+=StartState)* ('-' exstates+=StartState (',' exstates+=StartState)*)?;

StartState:
	name=ID;

Rule:
	info=('RULE' | 'RULES') (rules+=SingleRule)*;

SingleRule:
	start=RuleStart? rule=RuleDefinition ':' ('-')? '{' content=CodeBlock '}';

Regex returns ecore::EString:
	ID | INT | STRING | WS | '+' | '-' | '(' | ')' | '*' | '.' | '/' | '\\' | '|' | '?' | '>' | '<' | '{' | '}' | '"' |
	'\'' ;

RuleDefinition:
	(parts+=RulePart)*;

RulePart:
	reg=Regex | =>ref=[DefineRule]
;

	//#STD# oder #STARTSTATE# oder #State1,State2,State3# oder #*# oder Not / - #STD#
RuleStart:
	(rulePrec='NOT' | rulePrec='-')? '#' (ruleStates+=[StartState] (',' ruleStates+=[StartState])* | ruleDefault='STD' | ruleDefault='*') '#';



